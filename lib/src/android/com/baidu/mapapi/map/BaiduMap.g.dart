// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class com_baidu_mapapi_map_BaiduMap extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.baidu.mapapi.map.BaiduMap';

  @override
  final String tag__ = 'bmap_map_fluttify';

  static final int MAP_TYPE_NORMAL = 1;
  static final int MAP_TYPE_SATELLITE = 2;
  static final int MAP_TYPE_NONE = 3;
  //endregion

  //region creators
  
  //endregion

  //region getters
  static Future<int> get_static_mapStatusReason() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.BaiduMap::get_mapStatusReason", );
    return __result__;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<com_baidu_mapapi_map_Overlay> addOverlay(com_baidu_mapapi_map_OverlayOptions var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::addOverlay([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::addOverlay', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_Overlay>(__result__);
  }
  
  
  Future<List<com_baidu_mapapi_map_Overlay>> addOverlays(List<com_baidu_mapapi_map_OverlayOptions> var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::addOverlays([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::addOverlays', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return (__result__ as List)?.map((it) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_Overlay>(it))?.toList();
  }
  
  
  Future<List<com_baidu_mapapi_map_Marker>> getMarkersInBounds(com_baidu_mapapi_model_LatLngBounds var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getMarkersInBounds([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getMarkersInBounds', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return (__result__ as List)?.map((it) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_Marker>(it))?.toList();
  }
  
  
  Future<void> clear() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::clear([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::clear', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setMapStatus(com_baidu_mapapi_map_MapStatusUpdate var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setMapStatus([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMapStatus', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<com_baidu_mapapi_map_MapStatus> getMapStatus() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getMapStatus([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getMapStatus', {"__this__": this});
  
  
    // handle native call
  
  
    return BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_MapStatus>(__result__);
  }
  
  
  Future<com_baidu_mapapi_model_LatLngBounds> getMapStatusLimit() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getMapStatusLimit([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getMapStatusLimit', {"__this__": this});
  
  
    // handle native call
  
  
    return BmapMapFluttifyAndroidAs<com_baidu_mapapi_model_LatLngBounds>(__result__);
  }
  
  
  Future<void> setMapStatusLimits(com_baidu_mapapi_model_LatLngBounds var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setMapStatusLimits([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMapStatusLimits', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> animateMapStatus__com_baidu_mapapi_map_MapStatusUpdate__int(com_baidu_mapapi_map_MapStatusUpdate var1, int var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::animateMapStatus([\'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::animateMapStatus__com_baidu_mapapi_map_MapStatusUpdate__int', {"var1": var1, "var2": var2, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<double> getZoomToBound(int var1, int var2, int var3, int var4, int var5, int var6) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getZoomToBound([\'var1\':$var1, \'var2\':$var2, \'var3\':$var3, \'var4\':$var4, \'var5\':$var5, \'var6\':$var6])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getZoomToBound', {"var1": var1, "var2": var2, "var3": var3, "var4": var4, "var5": var5, "var6": var6, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> animateMapStatus__com_baidu_mapapi_map_MapStatusUpdate(com_baidu_mapapi_map_MapStatusUpdate var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::animateMapStatus([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::animateMapStatus__com_baidu_mapapi_map_MapStatusUpdate', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setMapType(int var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setMapType([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMapType', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int> getMapType() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getMapType([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getMapType', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<double> getMaxZoomLevel() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getMaxZoomLevel([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getMaxZoomLevel', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setMaxAndMinZoomLevel(double var1, double var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setMaxAndMinZoomLevel([\'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMaxAndMinZoomLevel', {"var1": var1, "var2": var2, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<double> getMinZoomLevel() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getMinZoomLevel([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getMinZoomLevel', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<com_baidu_mapapi_map_Projection> getProjection() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getProjection([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getProjection', {"__this__": this});
  
  
    // handle native call
  
  
    return BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_Projection>(__result__);
  }
  
  
  Future<com_baidu_mapapi_map_UiSettings> getUiSettings() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getUiSettings([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getUiSettings', {"__this__": this});
  
  
    // handle native call
  
  
    return BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_UiSettings>(__result__);
  }
  
  
  Future<void> setBuildingsEnabled(bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setBuildingsEnabled([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setBuildingsEnabled', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool> isBuildingsEnabled() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::isBuildingsEnabled([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::isBuildingsEnabled', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setMyLocationEnabled(bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setMyLocationEnabled([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMyLocationEnabled', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool> isMyLocationEnabled() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::isMyLocationEnabled([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::isMyLocationEnabled', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setMyLocationData(com_baidu_mapapi_map_MyLocationData var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setMyLocationData([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMyLocationData', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<com_baidu_mapapi_map_MyLocationData> getLocationData() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getLocationData([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getLocationData', {"__this__": this});
  
  
    // handle native call
  
  
    return BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_MyLocationData>(__result__);
  }
  
  
  Future<void> setMyLocationConfiguration(com_baidu_mapapi_map_MyLocationConfiguration var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setMyLocationConfiguration([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMyLocationConfiguration', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  @deprecated
  Future<void> setMyLocationConfigeration(com_baidu_mapapi_map_MyLocationConfiguration var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setMyLocationConfigeration([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMyLocationConfigeration', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<com_baidu_mapapi_map_MyLocationConfiguration> getLocationConfiguration() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getLocationConfiguration([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getLocationConfiguration', {"__this__": this});
  
  
    // handle native call
  
  
    return BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_MyLocationConfiguration>(__result__);
  }
  
  @deprecated
  Future<com_baidu_mapapi_map_MyLocationConfiguration> getLocationConfigeration() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getLocationConfigeration([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getLocationConfigeration', {"__this__": this});
  
  
    // handle native call
  
  
    return BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_MyLocationConfiguration>(__result__);
  }
  
  
  Future<void> addHeatMap(com_baidu_mapapi_map_HeatMap var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::addHeatMap([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::addHeatMap', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setBaiduHeatMapEnabled(bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setBaiduHeatMapEnabled([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setBaiduHeatMapEnabled', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setIndoorEnable(bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setIndoorEnable([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setIndoorEnable', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setCompassPosition(android_graphics_Point var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setCompassPosition([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setCompassPosition', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setCompassIcon(android_graphics_Bitmap var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setCompassIcon([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setCompassIcon', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<android_graphics_Point> getCompassPosition() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getCompassPosition([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getCompassPosition', {"__this__": this});
  
  
    // handle native call
  
  
    return BmapMapFluttifyAndroidAs<android_graphics_Point>(__result__);
  }
  
  
  Future<bool> isBaiduHeatMapEnabled() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::isBaiduHeatMapEnabled([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::isBaiduHeatMapEnabled', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool> isSupportBaiduHeatMap() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::isSupportBaiduHeatMap([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::isSupportBaiduHeatMap', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setTrafficEnabled(bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setTrafficEnabled([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setTrafficEnabled', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool> setCustomTrafficColor(String var1, String var2, String var3, String var4) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setCustomTrafficColor([\'var1\':$var1, \'var2\':$var2, \'var3\':$var3, \'var4\':$var4])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setCustomTrafficColor', {"var1": var1, "var2": var2, "var3": var3, "var4": var4, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool> isTrafficEnabled() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::isTrafficEnabled([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::isTrafficEnabled', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> showMapPoi(bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::showMapPoi([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::showMapPoi', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> showMapIndoorPoi(bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::showMapIndoorPoi([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::showMapIndoorPoi', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  @deprecated
  Future<void> setPadding(int var1, int var2, int var3, int var4) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setPadding([\'var1\':$var1, \'var2\':$var2, \'var3\':$var3, \'var4\':$var4])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setPadding', {"var1": var1, "var2": var2, "var3": var3, "var4": var4, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setViewPadding(int var1, int var2, int var3, int var4) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setViewPadding([\'var1\':$var1, \'var2\':$var2, \'var3\':$var3, \'var4\':$var4])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setViewPadding', {"var1": var1, "var2": var2, "var3": var3, "var4": var4, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> snapshot(com_baidu_mapapi_map_BaiduMap_SnapshotReadyCallback var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::snapshot([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::snapshot', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::snapshot::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.SnapshotReadyCallback::onSnapshotReady':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onSnapshotReady([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onSnapshotReady(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> showInfoWindow__com_baidu_mapapi_map_InfoWindow(com_baidu_mapapi_map_InfoWindow var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::showInfoWindow([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::showInfoWindow__com_baidu_mapapi_map_InfoWindow', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> showInfoWindow__com_baidu_mapapi_map_InfoWindow__bool(com_baidu_mapapi_map_InfoWindow var1, bool var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::showInfoWindow([\'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::showInfoWindow__com_baidu_mapapi_map_InfoWindow__bool', {"var1": var1, "var2": var2, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> showInfoWindows(List<com_baidu_mapapi_map_InfoWindow> var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::showInfoWindows([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::showInfoWindows', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<List<com_baidu_mapapi_map_InfoWindow>> getAllInfoWindows() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getAllInfoWindows([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getAllInfoWindows', {"__this__": this});
  
  
    // handle native call
  
  
    return (__result__ as List)?.map((it) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_InfoWindow>(it))?.toList();
  }
  
  
  Future<void> hideInfoWindow() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::hideInfoWindow([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::hideInfoWindow', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> hideInfoWindow__com_baidu_mapapi_map_InfoWindow(com_baidu_mapapi_map_InfoWindow var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::hideInfoWindow([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::hideInfoWindow__com_baidu_mapapi_map_InfoWindow', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setPixelFormatTransparent(bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setPixelFormatTransparent([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setPixelFormatTransparent', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setOnMapStatusChangeListener(com_baidu_mapapi_map_BaiduMap_OnMapStatusChangeListener var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOnMapStatusChangeListener([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOnMapStatusChangeListener', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::setOnMapStatusChangeListener::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMapStatusChangeListener::onMapStatusChangeStart__com_baidu_mapapi_map_MapStatus':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMapStatusChangeStart__com_baidu_mapapi_map_MapStatus([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onMapStatusChangeStart__com_baidu_mapapi_map_MapStatus(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMapStatusChangeListener::onMapStatusChangeStart__com_baidu_mapapi_map_MapStatus__int':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMapStatusChangeStart__com_baidu_mapapi_map_MapStatus__int([\'var1\':${args['var1']}, \'var2\':${args['var2']}])');
                }
          
                // handle the native call
                await var1?.onMapStatusChangeStart__com_baidu_mapapi_map_MapStatus__int(BmapMapFluttifyAndroidAs(args['var1']), args['var2']);
                break;
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMapStatusChangeListener::onMapStatusChange':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMapStatusChange([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onMapStatusChange(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMapStatusChangeListener::onMapStatusChangeFinish':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMapStatusChangeFinish([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onMapStatusChangeFinish(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> setOnMapTouchListener(com_baidu_mapapi_map_BaiduMap_OnMapTouchListener var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOnMapTouchListener([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOnMapTouchListener', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::setOnMapTouchListener::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMapTouchListener::onTouch':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onTouch([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onTouch(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> setOnMapClickListener(com_baidu_mapapi_map_BaiduMap_OnMapClickListener var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOnMapClickListener([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOnMapClickListener', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::setOnMapClickListener::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMapClickListener::onMapClick':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMapClick([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onMapClick(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMapClickListener::onMapPoiClick':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMapPoiClick([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onMapPoiClick(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> setOnMapLoadedCallback(com_baidu_mapapi_map_BaiduMap_OnMapLoadedCallback var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOnMapLoadedCallback([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOnMapLoadedCallback', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::setOnMapLoadedCallback::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMapLoadedCallback::onMapLoaded':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMapLoaded([])');
                }
          
                // handle the native call
                await var1?.onMapLoaded();
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> setOnMapRenderCallbadk(com_baidu_mapapi_map_BaiduMap_OnMapRenderCallback var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOnMapRenderCallbadk([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOnMapRenderCallbadk', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::setOnMapRenderCallbadk::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMapRenderCallback::onMapRenderFinished':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMapRenderFinished([])');
                }
          
                // handle the native call
                await var1?.onMapRenderFinished();
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> setOnMapDoubleClickListener(com_baidu_mapapi_map_BaiduMap_OnMapDoubleClickListener var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOnMapDoubleClickListener([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOnMapDoubleClickListener', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::setOnMapDoubleClickListener::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMapDoubleClickListener::onMapDoubleClick':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMapDoubleClick([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onMapDoubleClick(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> setOnMapLongClickListener(com_baidu_mapapi_map_BaiduMap_OnMapLongClickListener var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOnMapLongClickListener([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOnMapLongClickListener', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::setOnMapLongClickListener::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMapLongClickListener::onMapLongClick':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMapLongClick([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onMapLongClick(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> setOnPolylineClickListener(com_baidu_mapapi_map_BaiduMap_OnPolylineClickListener var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOnPolylineClickListener([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOnPolylineClickListener', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::setOnPolylineClickListener::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnPolylineClickListener::onPolylineClick':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onPolylineClick([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onPolylineClick(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> setOnMarkerClickListener(com_baidu_mapapi_map_BaiduMap_OnMarkerClickListener var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOnMarkerClickListener([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOnMarkerClickListener', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::setOnMarkerClickListener::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMarkerClickListener::onMarkerClick':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMarkerClick([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onMarkerClick(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> setOnMarkerDragListener(com_baidu_mapapi_map_BaiduMap_OnMarkerDragListener var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOnMarkerDragListener([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOnMarkerDragListener', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::setOnMarkerDragListener::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMarkerDragListener::onMarkerDrag':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMarkerDrag([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onMarkerDrag(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMarkerDragListener::onMarkerDragEnd':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMarkerDragEnd([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onMarkerDragEnd(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMarkerDragListener::onMarkerDragStart':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMarkerDragStart([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onMarkerDragStart(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> setOnMyLocationClickListener(com_baidu_mapapi_map_BaiduMap_OnMyLocationClickListener var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOnMyLocationClickListener([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOnMyLocationClickListener', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::setOnMyLocationClickListener::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMyLocationClickListener::onMyLocationClick':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMyLocationClick([])');
                }
          
                // handle the native call
                await var1?.onMyLocationClick();
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> setOnMapDrawFrameCallback(com_baidu_mapapi_map_BaiduMap_OnMapDrawFrameCallback var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOnMapDrawFrameCallback([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOnMapDrawFrameCallback', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::setOnMapDrawFrameCallback::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMapDrawFrameCallback::onMapDrawFrame__com_baidu_mapapi_map_MapStatus':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMapDrawFrame__com_baidu_mapapi_map_MapStatus([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onMapDrawFrame__com_baidu_mapapi_map_MapStatus(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> setOnBaseIndoorMapListener(com_baidu_mapapi_map_BaiduMap_OnBaseIndoorMapListener var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOnBaseIndoorMapListener([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOnBaseIndoorMapListener', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::setOnBaseIndoorMapListener::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnBaseIndoorMapListener::onBaseIndoorMapMode':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onBaseIndoorMapMode([\'var1\':${args['var1']}, \'var2\':${args['var2']}])');
                }
          
                // handle the native call
                await var1?.onBaseIndoorMapMode(args['var1'], BmapMapFluttifyAndroidAs(args['var2']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> setOnMapRenderValidDataListener(com_baidu_mapapi_map_BaiduMap_OnMapRenderValidDataListener var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOnMapRenderValidDataListener([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOnMapRenderValidDataListener', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::setOnMapRenderValidDataListener::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMapRenderValidDataListener::onMapRenderValidData':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMapRenderValidData([\'var1\':${args['var1']}, \'var2\':${args['var2']}, \'var3\':${args['var3']}])');
                }
          
                // handle the native call
                await var1?.onMapRenderValidData(args['var1'], args['var2'], args['var3']);
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> setOnSynchronizationListener(com_baidu_mapapi_map_BaiduMap_OnSynchronizationListener var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOnSynchronizationListener([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOnSynchronizationListener', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::setOnSynchronizationListener::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnSynchronizationListener::onMapStatusChangeReason':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMapStatusChangeReason([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onMapStatusChangeReason(args['var1']);
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<com_baidu_mapapi_map_MapBaseIndoorMapInfo> getFocusedBaseIndoorMapInfo() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getFocusedBaseIndoorMapInfo([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getFocusedBaseIndoorMapInfo', {"__this__": this});
  
  
    // handle native call
  
  
    return BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_MapBaseIndoorMapInfo>(__result__);
  }
  
  
  Future<com_baidu_mapapi_map_MapBaseIndoorMapInfo_SwitchFloorError> switchBaseIndoorMapFloor(String var1, String var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::switchBaseIndoorMapFloor([\'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::switchBaseIndoorMapFloor', {"var1": var1, "var2": var2, "__this__": this});
  
  
    // handle native call
  
  
    return (__result__ as int).tocom_baidu_mapapi_map_MapBaseIndoorMapInfo_SwitchFloorError();
  }
  
  
  Future<bool> isBaseIndoorMapMode() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::isBaseIndoorMapMode([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::isBaseIndoorMapMode', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> removeMarkerClickListener(com_baidu_mapapi_map_BaiduMap_OnMarkerClickListener var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::removeMarkerClickListener([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::removeMarkerClickListener', {"var1": var1, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.BaiduMap::removeMarkerClickListener::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.baidu.mapapi.map.BaiduMap.OnMarkerClickListener::onMarkerClick':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onMarkerClick([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var1?.onMarkerClick(BmapMapFluttifyAndroidAs(args['var1']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<com_baidu_mapapi_map_TileOverlay> addTileLayer(com_baidu_mapapi_map_TileOverlayOptions var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::addTileLayer([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::addTileLayer', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_TileOverlay>(__result__);
  }
  
  
  Future<void> hideSDKLayer() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::hideSDKLayer([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::hideSDKLayer', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> showSDKLayer() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::showSDKLayer([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::showSDKLayer', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> changeLocationLayerOrder(bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::changeLocationLayerOrder([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::changeLocationLayerOrder', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setCompassEnable(bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setCompassEnable([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setCompassEnable', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<Float64List> getProjectionMatrix() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getProjectionMatrix([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getProjectionMatrix', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__ as Float64List;
  }
  
  
  Future<Float64List> getViewMatrix() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::getViewMatrix([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getViewMatrix', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__ as Float64List;
  }
  
  
  Future<void> setOverlayUnderPoi(bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setOverlayUnderPoi([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOverlayUnderPoi', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> switchLayerOrder(com_baidu_mapapi_map_MapLayer var1, com_baidu_mapapi_map_MapLayer var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::switchLayerOrder([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::switchLayerOrder', {"var1": var1.toValue(), "var2": var2.toValue(), "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setLayerClickable(com_baidu_mapapi_map_MapLayer var1, bool var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::setLayerClickable([\'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setLayerClickable', {"var1": var1.toValue(), "var2": var2, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> cleanCache(int var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.map.BaiduMap@$refId::cleanCache([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::cleanCache', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'com_baidu_mapapi_map_BaiduMap{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_baidu_mapapi_map_BaiduMap_Batch on List<com_baidu_mapapi_map_BaiduMap> {
  //region getters
  Future<List<int>> get_static_mapStatusReason_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.BaiduMap::get_mapStatusReason_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<int>()?.toList();
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<com_baidu_mapapi_map_Overlay>> addOverlay_batch(List<com_baidu_mapapi_map_OverlayOptions> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::addOverlay_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_Overlay>(__result__)).cast<com_baidu_mapapi_map_Overlay>().toList();
  }
  
  
  Future<List<List<com_baidu_mapapi_map_Overlay>>> addOverlays_batch(List<List<com_baidu_mapapi_map_OverlayOptions>> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::addOverlays_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as List)?.map((it) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_Overlay>(it))?.toList()).cast<List<com_baidu_mapapi_map_Overlay>>().toList();
  }
  
  
  Future<List<List<com_baidu_mapapi_map_Marker>>> getMarkersInBounds_batch(List<com_baidu_mapapi_model_LatLngBounds> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getMarkersInBounds_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as List)?.map((it) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_Marker>(it))?.toList()).cast<List<com_baidu_mapapi_map_Marker>>().toList();
  }
  
  
  Future<List<void>> clear_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::clear_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setMapStatus_batch(List<com_baidu_mapapi_map_MapStatusUpdate> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMapStatus_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<com_baidu_mapapi_map_MapStatus>> getMapStatus_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getMapStatus_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_MapStatus>(__result__)).cast<com_baidu_mapapi_map_MapStatus>().toList();
  }
  
  
  Future<List<com_baidu_mapapi_model_LatLngBounds>> getMapStatusLimit_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getMapStatusLimit_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_model_LatLngBounds>(__result__)).cast<com_baidu_mapapi_model_LatLngBounds>().toList();
  }
  
  
  Future<List<void>> setMapStatusLimits_batch(List<com_baidu_mapapi_model_LatLngBounds> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMapStatusLimits_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> animateMapStatus__com_baidu_mapapi_map_MapStatusUpdate__int_batch(List<com_baidu_mapapi_map_MapStatusUpdate> var1, List<int> var2) async {
    assert(var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::animateMapStatus__com_baidu_mapapi_map_MapStatusUpdate__int_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "var2": var2[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<double>> getZoomToBound_batch(List<int> var1, List<int> var2, List<int> var3, List<int> var4, List<int> var5, List<int> var6) async {
    assert(var1.length == var2.length && var2.length == var3.length && var3.length == var4.length && var4.length == var5.length && var5.length == var6.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getZoomToBound_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "var2": var2[__i__], "var3": var3[__i__], "var4": var4[__i__], "var5": var5[__i__], "var6": var6[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<double>().toList();
  }
  
  
  Future<List<void>> animateMapStatus__com_baidu_mapapi_map_MapStatusUpdate_batch(List<com_baidu_mapapi_map_MapStatusUpdate> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::animateMapStatus__com_baidu_mapapi_map_MapStatusUpdate_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setMapType_batch(List<int> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMapType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<int>> getMapType_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getMapType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int>().toList();
  }
  
  
  Future<List<double>> getMaxZoomLevel_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getMaxZoomLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<double>().toList();
  }
  
  
  Future<List<void>> setMaxAndMinZoomLevel_batch(List<double> var1, List<double> var2) async {
    assert(var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMaxAndMinZoomLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "var2": var2[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<double>> getMinZoomLevel_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getMinZoomLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<double>().toList();
  }
  
  
  Future<List<com_baidu_mapapi_map_Projection>> getProjection_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getProjection_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_Projection>(__result__)).cast<com_baidu_mapapi_map_Projection>().toList();
  }
  
  
  Future<List<com_baidu_mapapi_map_UiSettings>> getUiSettings_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getUiSettings_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_UiSettings>(__result__)).cast<com_baidu_mapapi_map_UiSettings>().toList();
  }
  
  
  Future<List<void>> setBuildingsEnabled_batch(List<bool> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setBuildingsEnabled_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<bool>> isBuildingsEnabled_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::isBuildingsEnabled_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  Future<List<void>> setMyLocationEnabled_batch(List<bool> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMyLocationEnabled_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<bool>> isMyLocationEnabled_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::isMyLocationEnabled_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  Future<List<void>> setMyLocationData_batch(List<com_baidu_mapapi_map_MyLocationData> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMyLocationData_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<com_baidu_mapapi_map_MyLocationData>> getLocationData_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getLocationData_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_MyLocationData>(__result__)).cast<com_baidu_mapapi_map_MyLocationData>().toList();
  }
  
  
  Future<List<void>> setMyLocationConfiguration_batch(List<com_baidu_mapapi_map_MyLocationConfiguration> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMyLocationConfiguration_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  @deprecated
  Future<List<void>> setMyLocationConfigeration_batch(List<com_baidu_mapapi_map_MyLocationConfiguration> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setMyLocationConfigeration_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<com_baidu_mapapi_map_MyLocationConfiguration>> getLocationConfiguration_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getLocationConfiguration_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_MyLocationConfiguration>(__result__)).cast<com_baidu_mapapi_map_MyLocationConfiguration>().toList();
  }
  
  @deprecated
  Future<List<com_baidu_mapapi_map_MyLocationConfiguration>> getLocationConfigeration_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getLocationConfigeration_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_MyLocationConfiguration>(__result__)).cast<com_baidu_mapapi_map_MyLocationConfiguration>().toList();
  }
  
  
  Future<List<void>> addHeatMap_batch(List<com_baidu_mapapi_map_HeatMap> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::addHeatMap_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setBaiduHeatMapEnabled_batch(List<bool> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setBaiduHeatMapEnabled_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setIndoorEnable_batch(List<bool> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setIndoorEnable_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setCompassPosition_batch(List<android_graphics_Point> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setCompassPosition_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setCompassIcon_batch(List<android_graphics_Bitmap> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setCompassIcon_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<android_graphics_Point>> getCompassPosition_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getCompassPosition_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyAndroidAs<android_graphics_Point>(__result__)).cast<android_graphics_Point>().toList();
  }
  
  
  Future<List<bool>> isBaiduHeatMapEnabled_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::isBaiduHeatMapEnabled_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  Future<List<bool>> isSupportBaiduHeatMap_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::isSupportBaiduHeatMap_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  Future<List<void>> setTrafficEnabled_batch(List<bool> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setTrafficEnabled_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<bool>> setCustomTrafficColor_batch(List<String> var1, List<String> var2, List<String> var3, List<String> var4) async {
    assert(var1.length == var2.length && var2.length == var3.length && var3.length == var4.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setCustomTrafficColor_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "var2": var2[__i__], "var3": var3[__i__], "var4": var4[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  Future<List<bool>> isTrafficEnabled_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::isTrafficEnabled_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  Future<List<void>> showMapPoi_batch(List<bool> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::showMapPoi_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> showMapIndoorPoi_batch(List<bool> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::showMapIndoorPoi_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  @deprecated
  Future<List<void>> setPadding_batch(List<int> var1, List<int> var2, List<int> var3, List<int> var4) async {
    assert(var1.length == var2.length && var2.length == var3.length && var3.length == var4.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setPadding_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "var2": var2[__i__], "var3": var3[__i__], "var4": var4[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setViewPadding_batch(List<int> var1, List<int> var2, List<int> var3, List<int> var4) async {
    assert(var1.length == var2.length && var2.length == var3.length && var3.length == var4.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setViewPadding_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "var2": var2[__i__], "var3": var3[__i__], "var4": var4[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> showInfoWindow__com_baidu_mapapi_map_InfoWindow_batch(List<com_baidu_mapapi_map_InfoWindow> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::showInfoWindow__com_baidu_mapapi_map_InfoWindow_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> showInfoWindow__com_baidu_mapapi_map_InfoWindow__bool_batch(List<com_baidu_mapapi_map_InfoWindow> var1, List<bool> var2) async {
    assert(var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::showInfoWindow__com_baidu_mapapi_map_InfoWindow__bool_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "var2": var2[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> showInfoWindows_batch(List<List<com_baidu_mapapi_map_InfoWindow>> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::showInfoWindows_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<List<com_baidu_mapapi_map_InfoWindow>>> getAllInfoWindows_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getAllInfoWindows_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as List)?.map((it) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_InfoWindow>(it))?.toList()).cast<List<com_baidu_mapapi_map_InfoWindow>>().toList();
  }
  
  
  Future<List<void>> hideInfoWindow_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::hideInfoWindow_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> hideInfoWindow__com_baidu_mapapi_map_InfoWindow_batch(List<com_baidu_mapapi_map_InfoWindow> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::hideInfoWindow__com_baidu_mapapi_map_InfoWindow_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setPixelFormatTransparent_batch(List<bool> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setPixelFormatTransparent_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<com_baidu_mapapi_map_MapBaseIndoorMapInfo>> getFocusedBaseIndoorMapInfo_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getFocusedBaseIndoorMapInfo_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_MapBaseIndoorMapInfo>(__result__)).cast<com_baidu_mapapi_map_MapBaseIndoorMapInfo>().toList();
  }
  
  
  Future<List<com_baidu_mapapi_map_MapBaseIndoorMapInfo_SwitchFloorError>> switchBaseIndoorMapFloor_batch(List<String> var1, List<String> var2) async {
    assert(var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::switchBaseIndoorMapFloor_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "var2": var2[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as int).tocom_baidu_mapapi_map_MapBaseIndoorMapInfo_SwitchFloorError()).cast<com_baidu_mapapi_map_MapBaseIndoorMapInfo_SwitchFloorError>().toList();
  }
  
  
  Future<List<bool>> isBaseIndoorMapMode_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::isBaseIndoorMapMode_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  Future<List<com_baidu_mapapi_map_TileOverlay>> addTileLayer_batch(List<com_baidu_mapapi_map_TileOverlayOptions> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::addTileLayer_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_TileOverlay>(__result__)).cast<com_baidu_mapapi_map_TileOverlay>().toList();
  }
  
  
  Future<List<void>> hideSDKLayer_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::hideSDKLayer_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> showSDKLayer_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::showSDKLayer_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> changeLocationLayerOrder_batch(List<bool> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::changeLocationLayerOrder_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setCompassEnable_batch(List<bool> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setCompassEnable_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<Float64List>> getProjectionMatrix_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getProjectionMatrix_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__ as Float64List).cast<Float64List>().toList();
  }
  
  
  Future<List<Float64List>> getViewMatrix_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::getViewMatrix_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__ as Float64List).cast<Float64List>().toList();
  }
  
  
  Future<List<void>> setOverlayUnderPoi_batch(List<bool> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setOverlayUnderPoi_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> switchLayerOrder_batch(List<com_baidu_mapapi_map_MapLayer> var1, List<com_baidu_mapapi_map_MapLayer> var2) async {
    assert(var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::switchLayerOrder_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__].toValue(), "var2": var2[__i__].toValue(), "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setLayerClickable_batch(List<com_baidu_mapapi_map_MapLayer> var1, List<bool> var2) async {
    assert(var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::setLayerClickable_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__].toValue(), "var2": var2[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> cleanCache_batch(List<int> var1) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.BaiduMap::cleanCache_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  //endregion
}