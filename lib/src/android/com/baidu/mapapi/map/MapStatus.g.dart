// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class com_baidu_mapapi_map_MapStatus extends java_lang_Object with android_os_Parcelable {
  //region constants
  static const String name__ = 'com.baidu.mapapi.map.MapStatus';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  
  //endregion

  //region getters
  Future<double> get_rotate() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.MapStatus::get_rotate", {'__this__': this});
    return __result__;
  }
  
  Future<com_baidu_mapapi_model_LatLng> get_target() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.MapStatus::get_target", {'__this__': this});
    return BmapMapFluttifyAndroidAs<com_baidu_mapapi_model_LatLng>(__result__);
  }
  
  Future<double> get_overlook() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.MapStatus::get_overlook", {'__this__': this});
    return __result__;
  }
  
  Future<double> get_zoom() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.MapStatus::get_zoom", {'__this__': this});
    return __result__;
  }
  
  Future<android_graphics_Point> get_targetScreen() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.MapStatus::get_targetScreen", {'__this__': this});
    return BmapMapFluttifyAndroidAs<android_graphics_Point>(__result__);
  }
  
  Future<com_baidu_mapapi_model_LatLngBounds> get_bound() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.MapStatus::get_bound", {'__this__': this});
    return BmapMapFluttifyAndroidAs<com_baidu_mapapi_model_LatLngBounds>(__result__);
  }
  
  Future<com_baidu_mapapi_map_WinRound> get_winRound() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.MapStatus::get_winRound", {'__this__': this});
    return BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_WinRound>(__result__);
  }
  
  //endregion

  //region setters
  Future<void> set_winRound(com_baidu_mapapi_map_WinRound winRound) async {
    await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.MapStatus::set_winRound', <String, dynamic>{'__this__': this, "winRound": winRound});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'com_baidu_mapapi_map_MapStatus{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_baidu_mapapi_map_MapStatus_Batch on List<com_baidu_mapapi_map_MapStatus> {
  //region getters
  Future<List<double>> get_rotate_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.MapStatus::get_rotate_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<double>()?.toList();
  }
  
  Future<List<com_baidu_mapapi_model_LatLng>> get_target_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.MapStatus::get_target_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_model_LatLng>(__result__))?.cast<com_baidu_mapapi_model_LatLng>()?.toList();
  }
  
  Future<List<double>> get_overlook_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.MapStatus::get_overlook_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<double>()?.toList();
  }
  
  Future<List<double>> get_zoom_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.MapStatus::get_zoom_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<double>()?.toList();
  }
  
  Future<List<android_graphics_Point>> get_targetScreen_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.MapStatus::get_targetScreen_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyAndroidAs<android_graphics_Point>(__result__))?.cast<android_graphics_Point>()?.toList();
  }
  
  Future<List<com_baidu_mapapi_model_LatLngBounds>> get_bound_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.MapStatus::get_bound_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_model_LatLngBounds>(__result__))?.cast<com_baidu_mapapi_model_LatLngBounds>()?.toList();
  }
  
  Future<List<com_baidu_mapapi_map_WinRound>> get_winRound_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("com.baidu.mapapi.map.MapStatus::get_winRound_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyAndroidAs<com_baidu_mapapi_map_WinRound>(__result__))?.cast<com_baidu_mapapi_map_WinRound>()?.toList();
  }
  
  //endregion

  //region setters
  Future<void> set_winRound_batch(List<com_baidu_mapapi_map_WinRound> winRound) async {
    await kBmapMapFluttifyChannel.invokeMethod('com.baidu.mapapi.map.MapStatus::set_winRound_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "winRound": winRound[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}