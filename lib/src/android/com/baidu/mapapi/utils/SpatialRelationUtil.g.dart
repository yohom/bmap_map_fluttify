// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class com_baidu_mapapi_utils_SpatialRelationUtil extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.baidu.mapapi.utils.SpatialRelationUtil';

  
  //endregion

  //region creators
  static Future<com_baidu_mapapi_utils_SpatialRelationUtil> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::createcom_baidu_mapapi_utils_SpatialRelationUtil__');
    final object = com_baidu_mapapi_utils_SpatialRelationUtil()..refId = refId..tag__ = 'bmap_map_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<com_baidu_mapapi_utils_SpatialRelationUtil>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::create_batchcom_baidu_mapapi_utils_SpatialRelationUtil__', {'length': length});
  
    final List<com_baidu_mapapi_utils_SpatialRelationUtil> typedResult = resultBatch.map((result) => com_baidu_mapapi_utils_SpatialRelationUtil()..refId = result..tag__ = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<bool> isPolygonContainsPoint(List<com_baidu_mapapi_model_LatLng> var0, com_baidu_mapapi_model_LatLng var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.utils.SpatialRelationUtil::isPolygonContainsPoint([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.mapapi.utils.SpatialRelationUtil::isPolygonContainsPoint', {"var0": var0.map((__it__) => __it__?.refId).toList(), "var1": var1?.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  static Future<bool> isCircleContainsPoint(com_baidu_mapapi_model_LatLng var0, int var1, com_baidu_mapapi_model_LatLng var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.utils.SpatialRelationUtil::isCircleContainsPoint([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.mapapi.utils.SpatialRelationUtil::isCircleContainsPoint', {"var0": var0?.refId, "var1": var1, "var2": var2?.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  static Future<com_baidu_mapapi_model_LatLng> getNearestPointFromLine(List<com_baidu_mapapi_model_LatLng> var0, com_baidu_mapapi_model_LatLng var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.mapapi.utils.SpatialRelationUtil::getNearestPointFromLine([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.mapapi.utils.SpatialRelationUtil::getNearestPointFromLine', {"var0": var0.map((__it__) => __it__?.refId).toList(), "var1": var1?.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_baidu_mapapi_model_LatLng()..refId = __result__..tag__ = 'bmap_map_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  //endregion
}

extension com_baidu_mapapi_utils_SpatialRelationUtil_Batch on List<com_baidu_mapapi_utils_SpatialRelationUtil> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<bool>> isPolygonContainsPoint_batch(List<List<com_baidu_mapapi_model_LatLng>> var0, List<com_baidu_mapapi_model_LatLng> var1) async {
    if (var0.length != var1.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.mapapi.utils.SpatialRelationUtil::isPolygonContainsPoint_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__].map((it) => it.refId).toList(), "var1": var1[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<bool>> isCircleContainsPoint_batch(List<com_baidu_mapapi_model_LatLng> var0, List<int> var1, List<com_baidu_mapapi_model_LatLng> var2) async {
    if (var0.length != var1.length || var1.length != var2.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.mapapi.utils.SpatialRelationUtil::isCircleContainsPoint_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__].refId, "var1": var1[__i__], "var2": var2[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<com_baidu_mapapi_model_LatLng>> getNearestPointFromLine_batch(List<List<com_baidu_mapapi_model_LatLng>> var0, List<com_baidu_mapapi_model_LatLng> var1) async {
    if (var0.length != var1.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.mapapi.utils.SpatialRelationUtil::getNearestPointFromLine_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__].map((it) => it.refId).toList(), "var1": var1[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => com_baidu_mapapi_model_LatLng()..refId = __result__..tag__ = 'bmap_map_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  //endregion
}