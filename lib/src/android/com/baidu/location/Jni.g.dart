// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class com_baidu_location_Jni extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.baidu.location.Jni';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<com_baidu_location_Jni> create__() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createcom_baidu_location_Jni__',
    
    );
    return BmapMapFluttifyAndroidAs<com_baidu_location_Jni>(__result__);
  }
  
  static Future<List<com_baidu_location_Jni>> create_batch__(int length) async {
    assert(true);
    final __result_batch__ = await  kBmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchcom_baidu_location_Jni__',
      {'length': length}
    );
    return __result_batch__
        .map((it) => BmapMapFluttifyAndroidAs<com_baidu_location_Jni>(it))
        .toList();
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<String> encode(String var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.location.Jni::encode([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::encode', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> en1(String var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.location.Jni::en1([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::en1', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> encode2(String var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.location.Jni::encode2([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::encode2', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<int> encode3(String var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.location.Jni::encode3([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::encode3', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> encodeOfflineLocationUpdateRequest(String var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.location.Jni::encodeOfflineLocationUpdateRequest([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::encodeOfflineLocationUpdateRequest', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> encodeTp4(String var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.location.Jni::encodeTp4([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::encodeTp4', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<double> getGpsSwiftRadius(double var0, double var1, double var3) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.location.Jni::getGpsSwiftRadius([\'var0\':$var0, \'var1\':$var1, \'var3\':$var3])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::getGpsSwiftRadius', {"var0": var0, "var1": var1, "var3": var3});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> getldkaiv() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.location.Jni::getldkaiv([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::getldkaiv', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<Float64List> coorEncrypt(double var0, double var2, String var4) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.location.Jni::coorEncrypt([\'var0\':$var0, \'var2\':$var2, \'var4\':$var4])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::coorEncrypt', {"var0": var0, "var2": var2, "var4": var4});
  
  
    // handle native call
  
  
    return __result__ as Float64List;
  }
  
  //endregion

  @override
  String toString() {
    return 'com_baidu_location_Jni{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_baidu_location_Jni_Batch on List<com_baidu_location_Jni> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<String>> encode_batch(List<String> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::encode_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<String>> en1_batch(List<String> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::en1_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<String>> encode2_batch(List<String> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::encode2_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<int>> encode3_batch(List<String> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::encode3_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int>().toList();
  }
  
  
  static Future<List<String>> encodeOfflineLocationUpdateRequest_batch(List<String> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::encodeOfflineLocationUpdateRequest_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<String>> encodeTp4_batch(List<String> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::encodeTp4_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<double>> getGpsSwiftRadius_batch(List<double> var0, List<double> var1, List<double> var3) async {
    assert(var0.length == var1.length && var1.length == var3.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::getGpsSwiftRadius_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var3": var3[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<double>().toList();
  }
  
  
  static Future<List<String>> getldkaiv_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::getldkaiv_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<Float64List>> coorEncrypt_batch(List<double> var0, List<double> var2, List<String> var4) async {
    assert(var0.length == var2.length && var2.length == var4.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('com.baidu.location.Jni::coorEncrypt_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var2": var2[__i__], "var4": var4[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__ as Float64List).cast<Float64List>().toList();
  }
  
  //endregion
}