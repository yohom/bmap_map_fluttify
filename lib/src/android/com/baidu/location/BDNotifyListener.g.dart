// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

/* abstract */ class com_baidu_location_BDNotifyListener extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.baidu.location.BDNotifyListener';

  
  //endregion

  //region creators
  
  //endregion

  //region getters
  Future<double> get_mLatitude() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_mLatitude", {'refId': refId});
  
    return __result__;
  }
  
  Future<double> get_mLongitude() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_mLongitude", {'refId': refId});
  
    return __result__;
  }
  
  Future<double> get_mRadius() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_mRadius", {'refId': refId});
  
    return __result__;
  }
  
  Future<double> get_differDistance() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_differDistance", {'refId': refId});
  
    return __result__;
  }
  
  Future<String> get_mCoorType() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_mCoorType", {'refId': refId});
  
    return __result__;
  }
  
  Future<double> get_mLatitudeC() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_mLatitudeC", {'refId': refId});
  
    return __result__;
  }
  
  Future<double> get_mLongitudeC() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_mLongitudeC", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_Notified() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_Notified", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_isAdded() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_isAdded", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_mLatitude(double mLatitude) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_mLatitude', {'refId': refId, "mLatitude": mLatitude});
  
  
  }
  
  Future<void> set_mLongitude(double mLongitude) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_mLongitude', {'refId': refId, "mLongitude": mLongitude});
  
  
  }
  
  Future<void> set_mRadius(double mRadius) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_mRadius', {'refId': refId, "mRadius": mRadius});
  
  
  }
  
  Future<void> set_differDistance(double differDistance) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_differDistance', {'refId': refId, "differDistance": differDistance});
  
  
  }
  
  Future<void> set_mCoorType(String mCoorType) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_mCoorType', {'refId': refId, "mCoorType": mCoorType});
  
  
  }
  
  Future<void> set_mLatitudeC(double mLatitudeC) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_mLatitudeC', {'refId': refId, "mLatitudeC": mLatitudeC});
  
  
  }
  
  Future<void> set_mLongitudeC(double mLongitudeC) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_mLongitudeC', {'refId': refId, "mLongitudeC": mLongitudeC});
  
  
  }
  
  Future<void> set_Notified(int Notified) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_Notified', {'refId': refId, "Notified": Notified});
  
  
  }
  
  Future<void> set_isAdded(bool isAdded) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_isAdded', {'refId': refId, "isAdded": isAdded});
  
  
  }
  
  //endregion

  //region methods
  
  Future<void> SetNotifyLocation(double var1, double var3, double var5, String var6) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.location.BDNotifyListener@$refId::SetNotifyLocation([\'var1\':$var1, \'var3\':$var3, \'var5\':$var5, \'var6\':$var6])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::SetNotifyLocation', {"var1": var1, "var3": var3, "var5": var5, "var6": var6, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> onNotify(com_baidu_location_BDLocation var1, double var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.baidu.location.BDNotifyListener@$refId::onNotify([\'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::onNotify', {"var1": var1 is Ref ? (var1 as Ref)?.refId : var1, "var2": var2, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension com_baidu_location_BDNotifyListener_Batch on List<com_baidu_location_BDNotifyListener> {
  //region getters
  Future<List<double>> get_mLatitude_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_mLatitude_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<double>> get_mLongitude_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_mLongitude_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<double>> get_mRadius_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_mRadius_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<double>> get_differDistance_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_differDistance_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_mCoorType_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_mCoorType_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<double>> get_mLatitudeC_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_mLatitudeC_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<double>> get_mLongitudeC_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_mLongitudeC_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_Notified_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_Notified_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_isAdded_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("com.baidu.location.BDNotifyListener::get_isAdded_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_mLatitude_batch(List<double> mLatitude) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_mLatitude_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "mLatitude": mLatitude[__i__]}]);
  
  
  }
  
  Future<void> set_mLongitude_batch(List<double> mLongitude) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_mLongitude_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "mLongitude": mLongitude[__i__]}]);
  
  
  }
  
  Future<void> set_mRadius_batch(List<double> mRadius) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_mRadius_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "mRadius": mRadius[__i__]}]);
  
  
  }
  
  Future<void> set_differDistance_batch(List<double> differDistance) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_differDistance_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "differDistance": differDistance[__i__]}]);
  
  
  }
  
  Future<void> set_mCoorType_batch(List<String> mCoorType) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_mCoorType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "mCoorType": mCoorType[__i__]}]);
  
  
  }
  
  Future<void> set_mLatitudeC_batch(List<double> mLatitudeC) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_mLatitudeC_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "mLatitudeC": mLatitudeC[__i__]}]);
  
  
  }
  
  Future<void> set_mLongitudeC_batch(List<double> mLongitudeC) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_mLongitudeC_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "mLongitudeC": mLongitudeC[__i__]}]);
  
  
  }
  
  Future<void> set_Notified_batch(List<int> Notified) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_Notified_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "Notified": Notified[__i__]}]);
  
  
  }
  
  Future<void> set_isAdded_batch(List<bool> isAdded) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::set_isAdded_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "isAdded": isAdded[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<void>> SetNotifyLocation_batch(List<double> var1, List<double> var3, List<double> var5, List<String> var6) async {
    if (var1.length != var3.length || var3.length != var5.length || var5.length != var6.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::SetNotifyLocation_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "var3": var3[__i__], "var5": var5[__i__], "var6": var6[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> onNotify_batch(List<com_baidu_location_BDLocation> var1, List<double> var2) async {
    if (var1.length != var2.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.location.BDNotifyListener::onNotify_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__].refId, "var2": var2[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}