// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKLocationAuth extends NSObject  {
  //region constants
  static const String name__ = 'BMKLocationAuth';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<BMKLocationAuth> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKLocationAuth',
      {'init': init}
    );
    return BmapMapFluttifyIOSAs<BMKLocationAuth>(__result__);
  }
  
  static Future<List<BMKLocationAuth>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKLocationAuth',
      {'length': length, 'init': init}
    );
    return __result_batch__
        .map((it) => BmapMapFluttifyIOSAs<BMKLocationAuth>(it))
        .toList();
  }
  
  //endregion

  //region getters
  Future<BMKLocationAuthErrorCode> get_permisionState() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKLocationAuth::get_permisionState", {'__this__': this});
    return (__result__ as int).toBMKLocationAuthErrorCode();
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<BMKLocationAuth> sharedInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKLocationAuth::sharedInstance([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKLocationAuth::sharedInstance', );
  
  
    // handle native call
  
  
    return BmapMapFluttifyIOSAs<BMKLocationAuth>(__result__);
  }
  
  
  Future<void> checkPermisionWithKey_authDelegate(String key, BMKLocationAuthDelegate delegate) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKLocationAuth@$refId::checkPermisionWithKey([\'key\':$key])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKLocationAuth::checkPermisionWithKey_authDelegate', {"key": key, "delegate": delegate, "__this__": this});
  
  
    // handle native call
    MethodChannel('BMKLocationAuthDelegate::Callback', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::BMKLocationAuthDelegate::onCheckPermissionState':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onCheckPermissionState([\'iError\':${args['iError']}])');
                }
          
                // handle the native call
                await delegate?.onCheckPermissionState((args['iError'] as int).toBMKLocationAuthErrorCode());
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKLocationAuth{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKLocationAuth_Batch on List<BMKLocationAuth> {
  //region getters
  Future<List<BMKLocationAuthErrorCode>> get_permisionState_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKLocationAuth::get_permisionState_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => (__result__ as int).toBMKLocationAuthErrorCode())?.cast<BMKLocationAuthErrorCode>()?.toList();
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<BMKLocationAuth>> sharedInstance_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKLocationAuth::sharedInstance_batch', );
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyIOSAs<BMKLocationAuth>(__result__)).cast<BMKLocationAuth>().toList();
  }
  
  //endregion
}