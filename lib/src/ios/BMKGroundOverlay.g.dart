// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKGroundOverlay extends BMKMultiPoint with BMKOverlay, BMKAnnotation {
  //region constants
  static const String name__ = 'BMKGroundOverlay';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<BMKGroundOverlay> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKGroundOverlay',
      {'init': init}
    );
    return BmapMapFluttifyIOSAs<BMKGroundOverlay>(__result__);
  }
  
  static Future<List<BMKGroundOverlay>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKGroundOverlay',
      {'length': length, 'init': init}
    );
    return __result_batch__
        .map((it) => BmapMapFluttifyIOSAs<BMKGroundOverlay>(it))
        .toList();
  }
  
  //endregion

  //region getters
  Future<CLLocationCoordinate2D> get_pt() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKGroundOverlay::get_pt", {'__this__': this});
    return BmapMapFluttifyIOSAs<CLLocationCoordinate2D>(__result__);
  }
  
  Future<CGPoint> get_anchor() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKGroundOverlay::get_anchor", {'__this__': this});
    return BmapMapFluttifyIOSAs<CGPoint>(__result__);
  }
  
  Future<BMKCoordinateBounds> get_bound() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKGroundOverlay::get_bound", {'__this__': this});
    return BmapMapFluttifyIOSAs<BMKCoordinateBounds>(__result__);
  }
  
  Future<UIImage> get_icon() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKGroundOverlay::get_icon", {'__this__': this});
    return BmapMapFluttifyIOSAs<UIImage>(__result__);
  }
  
  //endregion

  //region setters
  Future<void> set_pt(CLLocationCoordinate2D pt) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGroundOverlay::set_pt', <String, dynamic>{'__this__': this, "pt": pt});
  
  
  }
  
  Future<void> set_anchor(CGPoint anchor) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGroundOverlay::set_anchor', <String, dynamic>{'__this__': this, "anchor": anchor});
  
  
  }
  
  Future<void> set_bound(BMKCoordinateBounds bound) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGroundOverlay::set_bound', <String, dynamic>{'__this__': this, "bound": bound});
  
  
  }
  
  Future<void> set_icon(UIImage icon) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGroundOverlay::set_icon', <String, dynamic>{'__this__': this, "icon": icon});
  
  
  }
  
  //endregion

  //region methods
  
  static Future<BMKGroundOverlay> groundOverlayWithPosition_zoomLevel_anchor_icon(CLLocationCoordinate2D position, double zoomLevel, CGPoint anchor, UIImage icon) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKGroundOverlay::groundOverlayWithPosition([\'zoomLevel\':$zoomLevel])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKGroundOverlay::groundOverlayWithPosition_zoomLevel_anchor_icon', {"position": position, "zoomLevel": zoomLevel, "anchor": anchor, "icon": icon});
  
  
    // handle native call
  
  
    return BmapMapFluttifyIOSAs<BMKGroundOverlay>(__result__);
  }
  
  
  static Future<BMKGroundOverlay> groundOverlayWithBounds_icon(BMKCoordinateBounds bounds, UIImage icon) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKGroundOverlay::groundOverlayWithBounds([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKGroundOverlay::groundOverlayWithBounds_icon', {"bounds": bounds, "icon": icon});
  
  
    // handle native call
  
  
    return BmapMapFluttifyIOSAs<BMKGroundOverlay>(__result__);
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKGroundOverlay{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKGroundOverlay_Batch on List<BMKGroundOverlay> {
  //region getters
  Future<List<CLLocationCoordinate2D>> get_pt_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKGroundOverlay::get_pt_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyIOSAs<CLLocationCoordinate2D>(__result__))?.cast<CLLocationCoordinate2D>()?.toList();
  }
  
  Future<List<CGPoint>> get_anchor_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKGroundOverlay::get_anchor_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyIOSAs<CGPoint>(__result__))?.cast<CGPoint>()?.toList();
  }
  
  Future<List<BMKCoordinateBounds>> get_bound_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKGroundOverlay::get_bound_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyIOSAs<BMKCoordinateBounds>(__result__))?.cast<BMKCoordinateBounds>()?.toList();
  }
  
  Future<List<UIImage>> get_icon_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKGroundOverlay::get_icon_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyIOSAs<UIImage>(__result__))?.cast<UIImage>()?.toList();
  }
  
  //endregion

  //region setters
  Future<void> set_pt_batch(List<CLLocationCoordinate2D> pt) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGroundOverlay::set_pt_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "pt": pt[__i__]}]);
  
  
  }
  
  Future<void> set_anchor_batch(List<CGPoint> anchor) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGroundOverlay::set_anchor_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "anchor": anchor[__i__]}]);
  
  
  }
  
  Future<void> set_bound_batch(List<BMKCoordinateBounds> bound) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGroundOverlay::set_bound_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "bound": bound[__i__]}]);
  
  
  }
  
  Future<void> set_icon_batch(List<UIImage> icon) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGroundOverlay::set_icon_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "icon": icon[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  static Future<List<BMKGroundOverlay>> groundOverlayWithPosition_zoomLevel_anchor_icon_batch(List<CLLocationCoordinate2D> position, List<double> zoomLevel, List<CGPoint> anchor, List<UIImage> icon) async {
    assert(position.length == zoomLevel.length && zoomLevel.length == anchor.length && anchor.length == icon.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKGroundOverlay::groundOverlayWithPosition_zoomLevel_anchor_icon_batch', [for (int __i__ = 0; __i__ < position.length; __i__++) {"position": position[__i__], "zoomLevel": zoomLevel[__i__], "anchor": anchor[__i__], "icon": icon[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyIOSAs<BMKGroundOverlay>(__result__)).cast<BMKGroundOverlay>().toList();
  }
  
  
  static Future<List<BMKGroundOverlay>> groundOverlayWithBounds_icon_batch(List<BMKCoordinateBounds> bounds, List<UIImage> icon) async {
    assert(bounds.length == icon.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKGroundOverlay::groundOverlayWithBounds_icon_batch', [for (int __i__ = 0; __i__ < bounds.length; __i__++) {"bounds": bounds[__i__], "icon": icon[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyIOSAs<BMKGroundOverlay>(__result__)).cast<BMKGroundOverlay>().toList();
  }
  
  //endregion
}