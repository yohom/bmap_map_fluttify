// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKGeoFenceCircleRegion extends BMKGeoFenceRegion with NSCopying {
  //region constants
  static const String name__ = 'BMKGeoFenceCircleRegion';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<BMKGeoFenceCircleRegion> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKGeoFenceCircleRegion',
      {'init': init}
    );
    return BmapMapFluttifyIOSAs<BMKGeoFenceCircleRegion>(__result__);
  }
  
  static Future<List<BMKGeoFenceCircleRegion>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKGeoFenceCircleRegion',
      {'length': length, 'init': init}
    );
    return __result_batch__
        .map((it) => BmapMapFluttifyIOSAs<BMKGeoFenceCircleRegion>(it))
        .toList();
  }
  
  //endregion

  //region getters
  Future<CLLocationCoordinate2D> get_center() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKGeoFenceCircleRegion::get_center", {'__this__': this});
    return BmapMapFluttifyIOSAs<CLLocationCoordinate2D>(__result__);
  }
  
  Future<double> get_radius() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKGeoFenceCircleRegion::get_radius", {'__this__': this});
    return __result__;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<dynamic> initWithCustomID_identityID_center_radius_coor(String customid, String identityid, CLLocationCoordinate2D center, double radius, BMKLocationCoordinateType type) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKGeoFenceCircleRegion@$refId::initWithCustomID([\'customid\':$customid, \'identityid\':$identityid, \'radius\':$radius])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceCircleRegion::initWithCustomID_identityID_center_radius_coor', {"customid": customid, "identityid": identityid, "center": center, "radius": radius, "type": type.toValue(), "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKGeoFenceCircleRegion{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKGeoFenceCircleRegion_Batch on List<BMKGeoFenceCircleRegion> {
  //region getters
  Future<List<CLLocationCoordinate2D>> get_center_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKGeoFenceCircleRegion::get_center_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyIOSAs<CLLocationCoordinate2D>(__result__))?.cast<CLLocationCoordinate2D>()?.toList();
  }
  
  Future<List<double>> get_radius_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKGeoFenceCircleRegion::get_radius_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<double>()?.toList();
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<dynamic>> initWithCustomID_identityID_center_radius_coor_batch(List<String> customid, List<String> identityid, List<CLLocationCoordinate2D> center, List<double> radius, List<BMKLocationCoordinateType> type) async {
    assert(customid.length == identityid.length && identityid.length == center.length && center.length == radius.length && radius.length == type.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceCircleRegion::initWithCustomID_identityID_center_radius_coor_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"customid": customid[__i__], "identityid": identityid[__i__], "center": center[__i__], "radius": radius[__i__], "type": type[__i__].toValue(), "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<dynamic>().toList();
  }
  
  //endregion
}