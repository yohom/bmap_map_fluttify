// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKMapStatus extends NSObject  {
  //region constants
  static const String name__ = 'BMKMapStatus';

  
  //endregion

  //region creators
  static Future<BMKMapStatus> create__({ bool init = true /* ios only */ }) async {
    final refId = await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod('ObjectFactory::createBMKMapStatus', {'init': init});
    final object = BMKMapStatus()..refId = refId..tag__ = 'bmap_map_fluttify';
    return object;
  }
  
  static Future<List<BMKMapStatus>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchBMKMapStatus', {'length': length, 'init': init});
  
    final List<BMKMapStatus> typedResult = resultBatch.map((result) => BMKMapStatus()..refId = result..tag__ = 'bmap_map_fluttify').toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<double> get_fLevel() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod("BMKMapStatus::get_fLevel", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<double> get_fRotation() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod("BMKMapStatus::get_fRotation", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<double> get_fOverlooking() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod("BMKMapStatus::get_fOverlooking", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<CGPoint> get_targetScreenPt() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod("BMKMapStatus::get_targetScreenPt", {'__this__': this});
    return __result__ == null ? null : (CGPoint()..refId = __result__..tag__ = 'bmap_map_fluttify');
  }
  
  Future<CLLocationCoordinate2D> get_targetGeoPt() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod("BMKMapStatus::get_targetGeoPt", {'__this__': this});
    return __result__ == null ? null : (CLLocationCoordinate2D()..refId = __result__..tag__ = 'bmap_map_fluttify');
  }
  
  Future<BMKMapRect> get_visibleMapRect() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod("BMKMapStatus::get_visibleMapRect", {'__this__': this});
    return __result__ == null ? null : (BMKMapRect()..refId = __result__..tag__ = 'bmap_map_fluttify');
  }
  
  //endregion

  //region setters
  Future<void> set_fLevel(double fLevel) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod('BMKMapStatus::set_fLevel', <String, dynamic>{'__this__': this, "fLevel": fLevel});
  
  
  }
  
  Future<void> set_fRotation(double fRotation) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod('BMKMapStatus::set_fRotation', <String, dynamic>{'__this__': this, "fRotation": fRotation});
  
  
  }
  
  Future<void> set_fOverlooking(double fOverlooking) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod('BMKMapStatus::set_fOverlooking', <String, dynamic>{'__this__': this, "fOverlooking": fOverlooking});
  
  
  }
  
  Future<void> set_targetScreenPt(CGPoint targetScreenPt) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod('BMKMapStatus::set_targetScreenPt', <String, dynamic>{'__this__': this, "targetScreenPt": targetScreenPt});
  
  
  }
  
  Future<void> set_targetGeoPt(CLLocationCoordinate2D targetGeoPt) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod('BMKMapStatus::set_targetGeoPt', <String, dynamic>{'__this__': this, "targetGeoPt": targetGeoPt});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension BMKMapStatus_Batch on List<BMKMapStatus> {
  //region getters
  Future<List<double>> get_fLevel_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod("BMKMapStatus::get_fLevel_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<double>> get_fRotation_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod("BMKMapStatus::get_fRotation_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<double>> get_fOverlooking_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod("BMKMapStatus::get_fOverlooking_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<CGPoint>> get_targetScreenPt_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod("BMKMapStatus::get_targetScreenPt_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => CGPoint()..refId = __result__..tag__ = 'bmap_map_fluttify').toList();
    return typedResult;
  }
  
  Future<List<CLLocationCoordinate2D>> get_targetGeoPt_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod("BMKMapStatus::get_targetGeoPt_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => CLLocationCoordinate2D()..refId = __result__..tag__ = 'bmap_map_fluttify').toList();
    return typedResult;
  }
  
  Future<List<BMKMapRect>> get_visibleMapRect_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('bmap_map_fluttify'))).invokeMethod("BMKMapStatus::get_visibleMapRect_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => BMKMapRect()..refId = __result__..tag__ = 'bmap_map_fluttify').toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_fLevel_batch(List<double> fLevel) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('BMKMapStatus::set_fLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "fLevel": fLevel[__i__]}]);
  
  
  }
  
  Future<void> set_fRotation_batch(List<double> fRotation) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('BMKMapStatus::set_fRotation_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "fRotation": fRotation[__i__]}]);
  
  
  }
  
  Future<void> set_fOverlooking_batch(List<double> fOverlooking) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('BMKMapStatus::set_fOverlooking_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "fOverlooking": fOverlooking[__i__]}]);
  
  
  }
  
  Future<void> set_targetScreenPt_batch(List<CGPoint> targetScreenPt) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('BMKMapStatus::set_targetScreenPt_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "targetScreenPt": targetScreenPt[__i__]}]);
  
  
  }
  
  Future<void> set_targetGeoPt_batch(List<CLLocationCoordinate2D> targetGeoPt) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('BMKMapStatus::set_targetGeoPt_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "targetGeoPt": targetGeoPt[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}