// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKMapStatus extends NSObject  {
  //region constants
  static const String name__ = 'BMKMapStatus';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<BMKMapStatus> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKMapStatus',
      {'init': init}
    );
    return BmapMapFluttifyIOSAs<BMKMapStatus>(__result__);
  }
  
  static Future<List<BMKMapStatus>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKMapStatus',
      {'length': length, 'init': init}
    );
    return __result_batch__
        .map((it) => BmapMapFluttifyIOSAs<BMKMapStatus>(it))
        .toList();
  }
  
  //endregion

  //region getters
  Future<double> get_fLevel() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKMapStatus::get_fLevel", {'__this__': this});
    return __result__;
  }
  
  Future<double> get_fRotation() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKMapStatus::get_fRotation", {'__this__': this});
    return __result__;
  }
  
  Future<double> get_fOverlooking() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKMapStatus::get_fOverlooking", {'__this__': this});
    return __result__;
  }
  
  Future<CGPoint> get_targetScreenPt() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKMapStatus::get_targetScreenPt", {'__this__': this});
    return BmapMapFluttifyIOSAs<CGPoint>(__result__);
  }
  
  Future<CLLocationCoordinate2D> get_targetGeoPt() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKMapStatus::get_targetGeoPt", {'__this__': this});
    return BmapMapFluttifyIOSAs<CLLocationCoordinate2D>(__result__);
  }
  
  Future<BMKMapRect> get_visibleMapRect() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKMapStatus::get_visibleMapRect", {'__this__': this});
    return BmapMapFluttifyIOSAs<BMKMapRect>(__result__);
  }
  
  //endregion

  //region setters
  Future<void> set_fLevel(double fLevel) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKMapStatus::set_fLevel', <String, dynamic>{'__this__': this, "fLevel": fLevel});
  
  
  }
  
  Future<void> set_fRotation(double fRotation) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKMapStatus::set_fRotation', <String, dynamic>{'__this__': this, "fRotation": fRotation});
  
  
  }
  
  Future<void> set_fOverlooking(double fOverlooking) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKMapStatus::set_fOverlooking', <String, dynamic>{'__this__': this, "fOverlooking": fOverlooking});
  
  
  }
  
  Future<void> set_targetScreenPt(CGPoint targetScreenPt) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKMapStatus::set_targetScreenPt', <String, dynamic>{'__this__': this, "targetScreenPt": targetScreenPt});
  
  
  }
  
  Future<void> set_targetGeoPt(CLLocationCoordinate2D targetGeoPt) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKMapStatus::set_targetGeoPt', <String, dynamic>{'__this__': this, "targetGeoPt": targetGeoPt});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'BMKMapStatus{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKMapStatus_Batch on List<BMKMapStatus> {
  //region getters
  Future<List<double>> get_fLevel_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKMapStatus::get_fLevel_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<double>()?.toList();
  }
  
  Future<List<double>> get_fRotation_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKMapStatus::get_fRotation_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<double>()?.toList();
  }
  
  Future<List<double>> get_fOverlooking_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKMapStatus::get_fOverlooking_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<double>()?.toList();
  }
  
  Future<List<CGPoint>> get_targetScreenPt_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKMapStatus::get_targetScreenPt_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyIOSAs<CGPoint>(__result__))?.cast<CGPoint>()?.toList();
  }
  
  Future<List<CLLocationCoordinate2D>> get_targetGeoPt_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKMapStatus::get_targetGeoPt_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyIOSAs<CLLocationCoordinate2D>(__result__))?.cast<CLLocationCoordinate2D>()?.toList();
  }
  
  Future<List<BMKMapRect>> get_visibleMapRect_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKMapStatus::get_visibleMapRect_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyIOSAs<BMKMapRect>(__result__))?.cast<BMKMapRect>()?.toList();
  }
  
  //endregion

  //region setters
  Future<void> set_fLevel_batch(List<double> fLevel) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKMapStatus::set_fLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "fLevel": fLevel[__i__]}]);
  
  
  }
  
  Future<void> set_fRotation_batch(List<double> fRotation) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKMapStatus::set_fRotation_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "fRotation": fRotation[__i__]}]);
  
  
  }
  
  Future<void> set_fOverlooking_batch(List<double> fOverlooking) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKMapStatus::set_fOverlooking_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "fOverlooking": fOverlooking[__i__]}]);
  
  
  }
  
  Future<void> set_targetScreenPt_batch(List<CGPoint> targetScreenPt) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKMapStatus::set_targetScreenPt_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "targetScreenPt": targetScreenPt[__i__]}]);
  
  
  }
  
  Future<void> set_targetGeoPt_batch(List<CLLocationCoordinate2D> targetGeoPt) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKMapStatus::set_targetGeoPt_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "targetGeoPt": targetGeoPt[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}