// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKArcline extends BMKMultiPoint with BMKOverlay, BMKAnnotation {
  //region constants
  static const String name__ = 'BMKArcline';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<BMKArcline> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKArcline',
      {'init': init}
    );
    return BmapMapFluttifyIOSAs<BMKArcline>(__result__);
  }
  
  static Future<List<BMKArcline>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKArcline',
      {'length': length, 'init': init}
    );
    return __result_batch__
        .map((it) => BmapMapFluttifyIOSAs<BMKArcline>(it))
        .toList();
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<BMKArcline> arclineWithPoints(List<BMKMapPoint> points) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKArcline::arclineWithPoints([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKArcline::arclineWithPoints', {"points": points});
  
  
    // handle native call
  
  
    return BmapMapFluttifyIOSAs<BMKArcline>(__result__);
  }
  
  
  static Future<BMKArcline> arclineWithCoordinates(List<CLLocationCoordinate2D> coords) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKArcline::arclineWithCoordinates([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKArcline::arclineWithCoordinates', {"coords": coords});
  
  
    // handle native call
  
  
    return BmapMapFluttifyIOSAs<BMKArcline>(__result__);
  }
  
  
  Future<bool> setArclineWithPoints(List<BMKMapPoint> points) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKArcline@$refId::setArclineWithPoints([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKArcline::setArclineWithPoints', {"points": points, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool> setArclineWithCoordinates(List<CLLocationCoordinate2D> coords) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKArcline@$refId::setArclineWithCoordinates([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKArcline::setArclineWithCoordinates', {"coords": coords, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKArcline{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKArcline_Batch on List<BMKArcline> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<BMKArcline>> arclineWithPoints_batch(List<List<BMKMapPoint>> points) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKArcline::arclineWithPoints_batch', [for (int __i__ = 0; __i__ < points.length; __i__++) {"points": points[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyIOSAs<BMKArcline>(__result__)).cast<BMKArcline>().toList();
  }
  
  
  static Future<List<BMKArcline>> arclineWithCoordinates_batch(List<List<CLLocationCoordinate2D>> coords) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKArcline::arclineWithCoordinates_batch', [for (int __i__ = 0; __i__ < coords.length; __i__++) {"coords": coords[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyIOSAs<BMKArcline>(__result__)).cast<BMKArcline>().toList();
  }
  
  
  Future<List<bool>> setArclineWithPoints_batch(List<List<BMKMapPoint>> points) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKArcline::setArclineWithPoints_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"points": points[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  Future<List<bool>> setArclineWithCoordinates_batch(List<List<CLLocationCoordinate2D>> coords) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKArcline::setArclineWithCoordinates_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"coords": coords[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  //endregion
}