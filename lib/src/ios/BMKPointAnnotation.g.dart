// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKPointAnnotation extends BMKShape with BMKAnnotation {
  //region constants
  static const String name__ = 'BMKPointAnnotation';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<BMKPointAnnotation> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKPointAnnotation',
      {'init': init}
    );
    return BmapMapFluttifyIOSAs<BMKPointAnnotation>(__result__);
  }
  
  static Future<List<BMKPointAnnotation>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKPointAnnotation',
      {'length': length, 'init': init}
    );
    return __result_batch__
        .map((it) => BmapMapFluttifyIOSAs<BMKPointAnnotation>(it))
        .toList();
  }
  
  //endregion

  //region getters
  Future<CLLocationCoordinate2D> get_coordinate() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKPointAnnotation::get_coordinate", {'__this__': this});
    return BmapMapFluttifyIOSAs<CLLocationCoordinate2D>(__result__);
  }
  
  Future<bool> get_isLockedToScreen() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKPointAnnotation::get_isLockedToScreen", {'__this__': this});
    return __result__;
  }
  
  Future<CGPoint> get_screenPointToLock() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKPointAnnotation::get_screenPointToLock", {'__this__': this});
    return BmapMapFluttifyIOSAs<CGPoint>(__result__);
  }
  
  //endregion

  //region setters
  Future<void> set_coordinate(CLLocationCoordinate2D coordinate) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKPointAnnotation::set_coordinate', <String, dynamic>{'__this__': this, "coordinate": coordinate});
  
  
  }
  
  Future<void> set_isLockedToScreen(bool isLockedToScreen) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKPointAnnotation::set_isLockedToScreen', <String, dynamic>{'__this__': this, "isLockedToScreen": isLockedToScreen});
  
  
  }
  
  Future<void> set_screenPointToLock(CGPoint screenPointToLock) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKPointAnnotation::set_screenPointToLock', <String, dynamic>{'__this__': this, "screenPointToLock": screenPointToLock});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'BMKPointAnnotation{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKPointAnnotation_Batch on List<BMKPointAnnotation> {
  //region getters
  Future<List<CLLocationCoordinate2D>> get_coordinate_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKPointAnnotation::get_coordinate_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyIOSAs<CLLocationCoordinate2D>(__result__))?.cast<CLLocationCoordinate2D>()?.toList();
  }
  
  Future<List<bool>> get_isLockedToScreen_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKPointAnnotation::get_isLockedToScreen_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<bool>()?.toList();
  }
  
  Future<List<CGPoint>> get_screenPointToLock_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKPointAnnotation::get_screenPointToLock_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyIOSAs<CGPoint>(__result__))?.cast<CGPoint>()?.toList();
  }
  
  //endregion

  //region setters
  Future<void> set_coordinate_batch(List<CLLocationCoordinate2D> coordinate) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKPointAnnotation::set_coordinate_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "coordinate": coordinate[__i__]}]);
  
  
  }
  
  Future<void> set_isLockedToScreen_batch(List<bool> isLockedToScreen) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKPointAnnotation::set_isLockedToScreen_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "isLockedToScreen": isLockedToScreen[__i__]}]);
  
  
  }
  
  Future<void> set_screenPointToLock_batch(List<CGPoint> screenPointToLock) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKPointAnnotation::set_screenPointToLock_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "screenPointToLock": screenPointToLock[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}