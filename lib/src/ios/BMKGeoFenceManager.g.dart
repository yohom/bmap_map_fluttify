// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKGeoFenceManager extends NSObject  {
  //region constants
  static const String name__ = 'BMKGeoFenceManager';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<BMKGeoFenceManager> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKGeoFenceManager',
      {'init': init}
    );
    return BmapMapFluttifyIOSAs<BMKGeoFenceManager>(__result__);
  }
  
  static Future<List<BMKGeoFenceManager>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKGeoFenceManager',
      {'length': length, 'init': init}
    );
    return __result_batch__
        .map((it) => BmapMapFluttifyIOSAs<BMKGeoFenceManager>(it))
        .toList();
  }
  
  //endregion

  //region getters
  Future<BMKGeoFenceActiveAction> get_activeAction() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKGeoFenceManager::get_activeAction", {'__this__': this});
    return (__result__ as int).toBMKGeoFenceActiveAction();
  }
  
  Future<bool> get_pausesLocationUpdatesAutomatically() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKGeoFenceManager::get_pausesLocationUpdatesAutomatically", {'__this__': this});
    return __result__;
  }
  
  Future<bool> get_allowsBackgroundLocationUpdates() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKGeoFenceManager::get_allowsBackgroundLocationUpdates", {'__this__': this});
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_delegate(BMKGeoFenceManagerDelegate delegate) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::set_delegate', <String, dynamic>{'__this__': this, });
  
    MethodChannel('BMKGeoFenceManagerDelegate::Callback', kBmapMapFluttifyMethodCodec)
      .setMethodCallHandler((methodCall) async {
        try {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::BMKGeoFenceManagerDelegate::BMKGeoFenceManager_doRequestAlwaysAuthorization':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: BMKGeoFenceManager_doRequestAlwaysAuthorization([\'manager\':${args['manager']}, \'locationManager\':${args['locationManager']}])');
              }
          
              // handle the native call
              await delegate?.BMKGeoFenceManager_doRequestAlwaysAuthorization(BmapMapFluttifyIOSAs(args['manager']), BmapMapFluttifyIOSAs(args['locationManager']));
              break;
            case 'Callback::BMKGeoFenceManagerDelegate::BMKGeoFenceManager_didAddRegionForMonitoringFinished_customID_error':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: BMKGeoFenceManager_didAddRegionForMonitoringFinished_customID_error([\'manager\':${args['manager']}, \'regions\':${args['regions']}, \'customID\':${args['customID']}, \'error\':${args['error']}])');
              }
          
              // handle the native call
              await delegate?.BMKGeoFenceManager_didAddRegionForMonitoringFinished_customID_error(BmapMapFluttifyIOSAs(args['manager']), (args['regions'] as List)?.map((it) => BmapMapFluttifyIOSAs<BMKGeoFenceRegion>(it))?.toList(), args['customID'], BmapMapFluttifyIOSAs(args['error']));
              break;
            case 'Callback::BMKGeoFenceManagerDelegate::BMKGeoFenceManager_didGeoFencesStatusChangedForRegion_customID_error':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: BMKGeoFenceManager_didGeoFencesStatusChangedForRegion_customID_error([\'manager\':${args['manager']}, \'region\':${args['region']}, \'customID\':${args['customID']}, \'error\':${args['error']}])');
              }
          
              // handle the native call
              await delegate?.BMKGeoFenceManager_didGeoFencesStatusChangedForRegion_customID_error(BmapMapFluttifyIOSAs(args['manager']), BmapMapFluttifyIOSAs(args['region']), args['customID'], BmapMapFluttifyIOSAs(args['error']));
              break;
            default:
              throw MissingPluginException('方法${methodCall.method}未实现');
              break;
          }
        } catch (e) {
          debugPrint(e);
          rethrow;
        }
      });
  }
  
  Future<void> set_activeAction(BMKGeoFenceActiveAction activeAction) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::set_activeAction', <String, dynamic>{'__this__': this, "activeAction": activeAction.toValue()});
  
  
  }
  
  Future<void> set_pausesLocationUpdatesAutomatically(bool pausesLocationUpdatesAutomatically) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::set_pausesLocationUpdatesAutomatically', <String, dynamic>{'__this__': this, "pausesLocationUpdatesAutomatically": pausesLocationUpdatesAutomatically});
  
  
  }
  
  Future<void> set_allowsBackgroundLocationUpdates(bool allowsBackgroundLocationUpdates) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::set_allowsBackgroundLocationUpdates', <String, dynamic>{'__this__': this, "allowsBackgroundLocationUpdates": allowsBackgroundLocationUpdates});
  
  
  }
  
  //endregion

  //region methods
  
  Future<void> addCircleRegionForMonitoringWithCenter_radius_coorType_customID(CLLocationCoordinate2D center, double radius, BMKLocationCoordinateType type, String customID) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKGeoFenceManager@$refId::addCircleRegionForMonitoringWithCenter([\'radius\':$radius, \'customID\':$customID])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::addCircleRegionForMonitoringWithCenter_radius_coorType_customID', {"center": center, "radius": radius, "type": type.toValue(), "customID": customID, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> addPolygonRegionForMonitoringWithCoordinates_count_coorType_customID(List<CLLocationCoordinate2D> coordinates, int count, BMKLocationCoordinateType type, String customID) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKGeoFenceManager@$refId::addPolygonRegionForMonitoringWithCoordinates([\'count\':$count, \'customID\':$customID])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::addPolygonRegionForMonitoringWithCoordinates_count_coorType_customID', {"coordinates": coordinates, "count": count, "type": type.toValue(), "customID": customID, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<List<dynamic>> geoFenceRegionsWithCustomID(String customID) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKGeoFenceManager@$refId::geoFenceRegionsWithCustomID([\'customID\':$customID])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::geoFenceRegionsWithCustomID', {"customID": customID, "__this__": this});
  
  
    // handle native call
  
  
    return (__result__ as List)?.cast<dynamic>();
  }
  
  
  Future<void> removeTheGeoFenceRegion(BMKGeoFenceRegion region) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKGeoFenceManager@$refId::removeTheGeoFenceRegion([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::removeTheGeoFenceRegion', {"region": region, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> removeGeoFenceRegionsWithCustomID(String customID) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKGeoFenceManager@$refId::removeGeoFenceRegionsWithCustomID([\'customID\':$customID])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::removeGeoFenceRegionsWithCustomID', {"customID": customID, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> removeAllGeoFenceRegions() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKGeoFenceManager@$refId::removeAllGeoFenceRegions([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::removeAllGeoFenceRegions', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKGeoFenceManager{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKGeoFenceManager_Batch on List<BMKGeoFenceManager> {
  //region getters
  Future<List<BMKGeoFenceActiveAction>> get_activeAction_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKGeoFenceManager::get_activeAction_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => (__result__ as int).toBMKGeoFenceActiveAction())?.cast<BMKGeoFenceActiveAction>()?.toList();
  }
  
  Future<List<bool>> get_pausesLocationUpdatesAutomatically_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKGeoFenceManager::get_pausesLocationUpdatesAutomatically_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<bool>()?.toList();
  }
  
  Future<List<bool>> get_allowsBackgroundLocationUpdates_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKGeoFenceManager::get_allowsBackgroundLocationUpdates_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<bool>()?.toList();
  }
  
  //endregion

  //region setters
  Future<void> set_activeAction_batch(List<BMKGeoFenceActiveAction> activeAction) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::set_activeAction_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "activeAction": activeAction[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_pausesLocationUpdatesAutomatically_batch(List<bool> pausesLocationUpdatesAutomatically) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::set_pausesLocationUpdatesAutomatically_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "pausesLocationUpdatesAutomatically": pausesLocationUpdatesAutomatically[__i__]}]);
  
  
  }
  
  Future<void> set_allowsBackgroundLocationUpdates_batch(List<bool> allowsBackgroundLocationUpdates) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::set_allowsBackgroundLocationUpdates_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "allowsBackgroundLocationUpdates": allowsBackgroundLocationUpdates[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<void>> addCircleRegionForMonitoringWithCenter_radius_coorType_customID_batch(List<CLLocationCoordinate2D> center, List<double> radius, List<BMKLocationCoordinateType> type, List<String> customID) async {
    assert(center.length == radius.length && radius.length == type.length && type.length == customID.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::addCircleRegionForMonitoringWithCenter_radius_coorType_customID_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"center": center[__i__], "radius": radius[__i__], "type": type[__i__].toValue(), "customID": customID[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> addPolygonRegionForMonitoringWithCoordinates_count_coorType_customID_batch(List<List<CLLocationCoordinate2D>> coordinates, List<int> count, List<BMKLocationCoordinateType> type, List<String> customID) async {
    assert(coordinates.length == count.length && count.length == type.length && type.length == customID.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::addPolygonRegionForMonitoringWithCoordinates_count_coorType_customID_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"coordinates": coordinates[__i__], "count": count[__i__], "type": type[__i__].toValue(), "customID": customID[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<List<dynamic>>> geoFenceRegionsWithCustomID_batch(List<String> customID) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::geoFenceRegionsWithCustomID_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"customID": customID[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as List)?.cast<dynamic>()).cast<List<dynamic>>().toList();
  }
  
  
  Future<List<void>> removeTheGeoFenceRegion_batch(List<BMKGeoFenceRegion> region) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::removeTheGeoFenceRegion_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"region": region[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> removeGeoFenceRegionsWithCustomID_batch(List<String> customID) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::removeGeoFenceRegionsWithCustomID_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"customID": customID[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> removeAllGeoFenceRegions_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKGeoFenceManager::removeAllGeoFenceRegions_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  //endregion
}