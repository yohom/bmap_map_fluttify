// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKGradient extends NSObject  {
  //region constants
  static const String name__ = 'BMKGradient';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<BMKGradient> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKGradient',
      {'init': init}
    );
    return BmapMapFluttifyIOSAs<BMKGradient>(__result__);
  }
  
  static Future<List<BMKGradient>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKGradient',
      {'length': length, 'init': init}
    );
    return __result_batch__
        .map((it) => BmapMapFluttifyIOSAs<BMKGradient>(it))
        .toList();
  }
  
  //endregion

  //region getters
  Future<List<dynamic>> get_mColors() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKGradient::get_mColors", {'__this__': this});
    return (__result__ as List)?.cast<dynamic>();
  }
  
  Future<List<dynamic>> get_mStartPoints() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKGradient::get_mStartPoints", {'__this__': this});
    return (__result__ as List)?.cast<dynamic>();
  }
  
  //endregion

  //region setters
  Future<void> set_mColors(List<dynamic> mColors) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGradient::set_mColors', <String, dynamic>{'__this__': this, "mColors": mColors});
  
  
  }
  
  Future<void> set_mStartPoints(List<dynamic> mStartPoints) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGradient::set_mStartPoints', <String, dynamic>{'__this__': this, "mStartPoints": mStartPoints});
  
  
  }
  
  //endregion

  //region methods
  
  Future<dynamic> initWithColors_startPoints(List<dynamic> colors, List<dynamic> startPoints) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKGradient@$refId::initWithColors([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKGradient::initWithColors_startPoints', {"colors": colors, "startPoints": startPoints, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKGradient{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKGradient_Batch on List<BMKGradient> {
  //region getters
  Future<List<List<dynamic>>> get_mColors_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKGradient::get_mColors_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => (__result__ as List)?.cast<dynamic>())?.cast<List<dynamic>>()?.toList();
  }
  
  Future<List<List<dynamic>>> get_mStartPoints_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKGradient::get_mStartPoints_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => (__result__ as List)?.cast<dynamic>())?.cast<List<dynamic>>()?.toList();
  }
  
  //endregion

  //region setters
  Future<void> set_mColors_batch(List<List<dynamic>> mColors) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGradient::set_mColors_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "mColors": mColors[__i__]}]);
  
  
  }
  
  Future<void> set_mStartPoints_batch(List<List<dynamic>> mStartPoints) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKGradient::set_mStartPoints_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "mStartPoints": mStartPoints[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<dynamic>> initWithColors_startPoints_batch(List<List<dynamic>> colors, List<List<dynamic>> startPoints) async {
    assert(colors.length == startPoints.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKGradient::initWithColors_startPoints_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"colors": colors[__i__], "startPoints": startPoints[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<dynamic>().toList();
  }
  
  //endregion
}