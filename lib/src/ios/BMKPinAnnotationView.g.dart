// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKPinAnnotationView extends BMKAnnotationView  {
  //region constants
  static const String name__ = 'BMKPinAnnotationView';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<BMKPinAnnotationView> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKPinAnnotationView',
      {'init': init}
    );
    return BmapMapFluttifyIOSAs<BMKPinAnnotationView>(__result__);
  }
  
  static Future<List<BMKPinAnnotationView>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKPinAnnotationView',
      {'length': length, 'init': init}
    );
    return __result_batch__
        .map((it) => BmapMapFluttifyIOSAs<BMKPinAnnotationView>(it))
        .toList();
  }
  
  //endregion

  //region getters
  Future<int> get_pinColor({bool viewChannel = true}) async {
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKPinAnnotationView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKPinAnnotationView::get_pinColor", {'__this__': this});
    return __result__;
  }
  
  Future<bool> get_animatesDrop({bool viewChannel = true}) async {
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKPinAnnotationView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKPinAnnotationView::get_animatesDrop", {'__this__': this});
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_pinColor(int pinColor, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKPinAnnotationView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKPinAnnotationView::set_pinColor', <String, dynamic>{'__this__': this, "pinColor": pinColor});
  
  
  }
  
  Future<void> set_animatesDrop(bool animatesDrop, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKPinAnnotationView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKPinAnnotationView::set_animatesDrop', <String, dynamic>{'__this__': this, "animatesDrop": animatesDrop});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'BMKPinAnnotationView{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKPinAnnotationView_Batch on List<BMKPinAnnotationView> {
  //region getters
  Future<List<int>> get_pinColor_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKPinAnnotationView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKPinAnnotationView::get_pinColor_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<int>()?.toList();
  }
  
  Future<List<bool>> get_animatesDrop_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKPinAnnotationView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKPinAnnotationView::get_animatesDrop_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<bool>()?.toList();
  }
  
  //endregion

  //region setters
  Future<void> set_pinColor_batch(List<int> pinColor, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKPinAnnotationView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKPinAnnotationView::set_pinColor_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "pinColor": pinColor[__i__]}]);
  
  
  }
  
  Future<void> set_animatesDrop_batch(List<bool> animatesDrop, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKPinAnnotationView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKPinAnnotationView::set_animatesDrop_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "animatesDrop": animatesDrop[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}