// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKAsyncTileLayer extends BMKTileLayer with BMKAnnotation, BMKOverlay {
  //region constants
  static const String name__ = 'BMKAsyncTileLayer';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<BMKAsyncTileLayer> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKAsyncTileLayer',
      {'init': init}
    );
    return BmapMapFluttifyIOSAs<BMKAsyncTileLayer>(__result__);
  }
  
  static Future<List<BMKAsyncTileLayer>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKAsyncTileLayer',
      {'length': length, 'init': init}
    );
    return __result_batch__
        .map((it) => BmapMapFluttifyIOSAs<BMKAsyncTileLayer>(it))
        .toList();
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<void> loadTileForX_y_zoom_result(int x, int y, int zoom, void Function(UIImage tileImage, NSError error) result) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKAsyncTileLayer@$refId::loadTileForX([\'x\':$x, \'y\':$y, \'zoom\':$zoom])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKAsyncTileLayer::loadTileForX_y_zoom_result', {"x": x, "y": y, "zoom": zoom, "__this__": this});
  
  
    // handle native call
    MethodChannel('void|UIImage*#tileImage,NSError*#error::Callback@$refId', kBmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::void|UIImage*#tileImage,NSError*#error::void|UIImage*#tileImage,NSError*#error':
                // print log
                if (fluttifyLogEnabled) {
          
                }
          
                // handle the native call
                if (result != null) await result(BmapMapFluttifyIOSAs(args['tileImage']), BmapMapFluttifyIOSAs(args['error']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKAsyncTileLayer{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKAsyncTileLayer_Batch on List<BMKAsyncTileLayer> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}