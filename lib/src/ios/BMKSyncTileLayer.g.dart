// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKSyncTileLayer extends BMKTileLayer with BMKAnnotation, BMKOverlay {
  //region constants
  static const String name__ = 'BMKSyncTileLayer';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<BMKSyncTileLayer> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKSyncTileLayer',
      {'init': init}
    );
    return BmapMapFluttifyIOSAs<BMKSyncTileLayer>(__result__);
  }
  
  static Future<List<BMKSyncTileLayer>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKSyncTileLayer',
      {'length': length, 'init': init}
    );
    return __result_batch__
        .map((it) => BmapMapFluttifyIOSAs<BMKSyncTileLayer>(it))
        .toList();
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<UIImage> tileForX_y_zoom(int x, int y, int zoom) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKSyncTileLayer@$refId::tileForX([\'x\':$x, \'y\':$y, \'zoom\':$zoom])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKSyncTileLayer::tileForX_y_zoom', {"x": x, "y": y, "zoom": zoom, "__this__": this});
  
  
    // handle native call
  
  
    return BmapMapFluttifyIOSAs<UIImage>(__result__);
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKSyncTileLayer{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKSyncTileLayer_Batch on List<BMKSyncTileLayer> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<UIImage>> tileForX_y_zoom_batch(List<int> x, List<int> y, List<int> zoom) async {
    assert(x.length == y.length && y.length == zoom.length);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKSyncTileLayer::tileForX_y_zoom_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"x": x[__i__], "y": y[__i__], "zoom": zoom[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyIOSAs<UIImage>(__result__)).cast<UIImage>().toList();
  }
  
  //endregion
}