// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKGeoFenceRegion extends NSObject with NSCopying {
  //region constants
  static const String name__ = 'BMKGeoFenceRegion';

  
  //endregion

  //region creators
  static Future<BMKGeoFenceRegion> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::createBMKGeoFenceRegion');
    final object = BMKGeoFenceRegion()..refId = refId..tag__ = 'bmap_map_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKGeoFenceRegion>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::create_batchBMKGeoFenceRegion', {'length': length});
  
    final List<BMKGeoFenceRegion> typedResult = resultBatch.map((result) => BMKGeoFenceRegion()..refId = result..tag__ = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_identifier() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGeoFenceRegion::get_identifier", {'refId': refId});
  
    return __result__;
  }
  
  Future<String> get_customID() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGeoFenceRegion::get_customID", {'refId': refId});
  
    return __result__;
  }
  
  Future<BMKGeoFenceRegionStatus> get_fenceStatus() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGeoFenceRegion::get_fenceStatus", {'refId': refId});
  
    return BMKGeoFenceRegionStatus.values[__result__];
  }
  
  Future<BMKLocationCoordinateType> get_coordinateType() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGeoFenceRegion::get_coordinateType", {'refId': refId});
  
    return BMKLocationCoordinateType.values[__result__];
  }
  
  Future<double> get_lastEventTime() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGeoFenceRegion::get_lastEventTime", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_fenceStatus(BMKGeoFenceRegionStatus fenceStatus) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKGeoFenceRegion::set_fenceStatus', {'refId': refId, "fenceStatus": fenceStatus.index});
  
  
  }
  
  Future<void> set_lastEventTime(double lastEventTime) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKGeoFenceRegion::set_lastEventTime', {'refId': refId, "lastEventTime": lastEventTime});
  
  
  }
  
  //endregion

  //region methods
  
  Future<BMKGeoFenceRegionStatus> judgeStatusWithCoor(CLLocationCoordinate2D coor) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKGeoFenceRegion@$refId::judgeStatusWithCoor([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKGeoFenceRegion::judgeStatusWithCoor', {"coor": coor?.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = BMKGeoFenceRegionStatus.values[__result__];
    
      return __return__;
    }
  }
  
  //endregion
}

extension BMKGeoFenceRegion_Batch on List<BMKGeoFenceRegion> {
  //region getters
  Future<List<String>> get_identifier_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGeoFenceRegion::get_identifier_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_customID_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGeoFenceRegion::get_customID_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<BMKGeoFenceRegionStatus>> get_fenceStatus_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGeoFenceRegion::get_fenceStatus_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => BMKGeoFenceRegionStatus.values[__result__]).toList();
  
    return typedResult;
  }
  
  Future<List<BMKLocationCoordinateType>> get_coordinateType_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGeoFenceRegion::get_coordinateType_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => BMKLocationCoordinateType.values[__result__]).toList();
  
    return typedResult;
  }
  
  Future<List<double>> get_lastEventTime_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGeoFenceRegion::get_lastEventTime_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_fenceStatus_batch(List<BMKGeoFenceRegionStatus> fenceStatus) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKGeoFenceRegion::set_fenceStatus_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "fenceStatus": fenceStatus[__i__].index}]);
  
  
  }
  
  Future<void> set_lastEventTime_batch(List<double> lastEventTime) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKGeoFenceRegion::set_lastEventTime_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "lastEventTime": lastEventTime[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<BMKGeoFenceRegionStatus>> judgeStatusWithCoor_batch(List<CLLocationCoordinate2D> coor) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKGeoFenceRegion::judgeStatusWithCoor_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"coor": coor[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => BMKGeoFenceRegionStatus.values[__result__]).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}