// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKURLTileLayer extends BMKTileLayer with BMKAnnotation, BMKOverlay {
  //region constants
  static const String name__ = 'BMKURLTileLayer';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<BMKURLTileLayer> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKURLTileLayer',
      {'init': init}
    );
    return BmapMapFluttifyIOSAs<BMKURLTileLayer>(__result__);
  }
  
  static Future<List<BMKURLTileLayer>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKURLTileLayer',
      {'length': length, 'init': init}
    );
    return __result_batch__
        .map((it) => BmapMapFluttifyIOSAs<BMKURLTileLayer>(it))
        .toList();
  }
  
  //endregion

  //region getters
  Future<String> get_URLTemplate() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKURLTileLayer::get_URLTemplate", {'__this__': this});
    return __result__;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<dynamic> initWithURLTemplate(String URLTemplate) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKURLTileLayer@$refId::initWithURLTemplate([\'URLTemplate\':$URLTemplate])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKURLTileLayer::initWithURLTemplate', {"URLTemplate": URLTemplate, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool> cleanTileDataCache() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKURLTileLayer@$refId::cleanTileDataCache([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKURLTileLayer::cleanTileDataCache', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKURLTileLayer{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKURLTileLayer_Batch on List<BMKURLTileLayer> {
  //region getters
  Future<List<String>> get_URLTemplate_batch() async {
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod("BMKURLTileLayer::get_URLTemplate_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<String>()?.toList();
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<dynamic>> initWithURLTemplate_batch(List<String> URLTemplate) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKURLTileLayer::initWithURLTemplate_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"URLTemplate": URLTemplate[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<dynamic>().toList();
  }
  
  
  Future<List<bool>> cleanTileDataCache_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKURLTileLayer::cleanTileDataCache_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  //endregion
}