// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKLocationManager extends NSObject  {
  //region constants
  static const String name__ = 'BMKLocationManager';

  
  //endregion

  //region creators
  static Future<BMKLocationManager> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::createBMKLocationManager');
    final object = BMKLocationManager()..refId = refId..tag__ = 'bmap_map_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKLocationManager>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::create_batchBMKLocationManager', {'length': length});
  
    final List<BMKLocationManager> typedResult = resultBatch.map((result) => BMKLocationManager()..refId = result..tag__ = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<double> get_distanceFilter() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_distanceFilter", {'refId': refId});
  
    return __result__;
  }
  
  Future<double> get_desiredAccuracy() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_desiredAccuracy", {'refId': refId});
  
    return __result__;
  }
  
  Future<BMKLocationCoordinateType> get_coordinateType() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_coordinateType", {'refId': refId});
  
    return (__result__ as int).toBMKLocationCoordinateType();
  }
  
  Future<bool> get_pausesLocationUpdatesAutomatically() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_pausesLocationUpdatesAutomatically", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_allowsBackgroundLocationUpdates() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_allowsBackgroundLocationUpdates", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_locationTimeout() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_locationTimeout", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_reGeocodeTimeout() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_reGeocodeTimeout", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_locatingWithReGeocode() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_locatingWithReGeocode", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_isNeedNewVersionReGeocode() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_isNeedNewVersionReGeocode", {'refId': refId});
  
    return __result__;
  }
  
  Future<String> get_userID() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_userID", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_delegate(BMKLocationManagerDelegate delegate) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_delegate', {'refId': refId, "delegate": delegate.refId});
  
    MethodChannel('BMKLocationManagerDelegate::Callback')
      .setMethodCallHandler((methodCall) async {
        final args = methodCall.arguments as Map;
        switch (methodCall.method) {
          case 'Callback::BMKLocationManagerDelegate::BMKLocationManager_doRequestAlwaysAuthorization':
            // print log
            if (fluttifyLogEnabled) {
              debugPrint('fluttify-dart-callback: BMKLocationManager_doRequestAlwaysAuthorization([\'manager\':${args['manager']}, \'locationManager\':${args['locationManager']}])');
            }
        
            // handle the native call
            delegate?.BMKLocationManager_doRequestAlwaysAuthorization(TypeOpBmapMapFluttifyIOS((args['manager'] as Object))?.as__<BMKLocationManager>(), TypeOpBmapMapFluttifyIOS((args['locationManager'] as Object))?.as__<CLLocationManager>());
            break;
          case 'Callback::BMKLocationManagerDelegate::BMKLocationManager_didFailWithError':
            // print log
            if (fluttifyLogEnabled) {
              debugPrint('fluttify-dart-callback: BMKLocationManager_didFailWithError([\'manager\':${args['manager']}, \'error\':${args['error']}])');
            }
        
            // handle the native call
            delegate?.BMKLocationManager_didFailWithError(TypeOpBmapMapFluttifyIOS((args['manager'] as Object))?.as__<BMKLocationManager>(), TypeOpBmapMapFluttifyIOS((args['error'] as Object))?.as__<NSError>());
            break;
          case 'Callback::BMKLocationManagerDelegate::BMKLocationManager_didUpdateLocation_orError':
            // print log
            if (fluttifyLogEnabled) {
              debugPrint('fluttify-dart-callback: BMKLocationManager_didUpdateLocation_orError([\'manager\':${args['manager']}, \'location\':${args['location']}, \'error\':${args['error']}])');
            }
        
            // handle the native call
            delegate?.BMKLocationManager_didUpdateLocation_orError(TypeOpBmapMapFluttifyIOS((args['manager'] as Object))?.as__<BMKLocationManager>(), TypeOpBmapMapFluttifyIOS((args['location'] as Object))?.as__<BMKLocation>(), TypeOpBmapMapFluttifyIOS((args['error'] as Object))?.as__<NSError>());
            break;
          case 'Callback::BMKLocationManagerDelegate::BMKLocationManager_didChangeAuthorizationStatus':
            // print log
            if (fluttifyLogEnabled) {
              debugPrint('fluttify-dart-callback: BMKLocationManager_didChangeAuthorizationStatus([\'manager\':${args['manager']}, \'status\':${args['status']}])');
            }
        
            // handle the native call
            delegate?.BMKLocationManager_didChangeAuthorizationStatus(TypeOpBmapMapFluttifyIOS((args['manager'] as Object))?.as__<BMKLocationManager>(), (args['status'] as int).toCLAuthorizationStatus());
            break;
          case 'Callback::BMKLocationManagerDelegate::BMKLocationManagerShouldDisplayHeadingCalibration':
            // print log
            if (fluttifyLogEnabled) {
              debugPrint('fluttify-dart-callback: BMKLocationManagerShouldDisplayHeadingCalibration([\'manager\':${args['manager']}])');
            }
        
            // handle the native call
            delegate?.BMKLocationManagerShouldDisplayHeadingCalibration(TypeOpBmapMapFluttifyIOS((args['manager'] as Object))?.as__<BMKLocationManager>());
            break;
          case 'Callback::BMKLocationManagerDelegate::BMKLocationManager_didUpdateHeading':
            // print log
            if (fluttifyLogEnabled) {
              debugPrint('fluttify-dart-callback: BMKLocationManager_didUpdateHeading([\'manager\':${args['manager']}, \'heading\':${args['heading']}])');
            }
        
            // handle the native call
            delegate?.BMKLocationManager_didUpdateHeading(TypeOpBmapMapFluttifyIOS((args['manager'] as Object))?.as__<BMKLocationManager>(), TypeOpBmapMapFluttifyIOS((args['heading'] as Object))?.as__<CLHeading>());
            break;
          case 'Callback::BMKLocationManagerDelegate::BMKLocationManager_didUpdateNetworkState_orError':
            // print log
            if (fluttifyLogEnabled) {
              debugPrint('fluttify-dart-callback: BMKLocationManager_didUpdateNetworkState_orError([\'manager\':${args['manager']}, \'state\':${args['state']}, \'error\':${args['error']}])');
            }
        
            // handle the native call
            delegate?.BMKLocationManager_didUpdateNetworkState_orError(TypeOpBmapMapFluttifyIOS((args['manager'] as Object))?.as__<BMKLocationManager>(), (args['state'] as int).toBMKLocationNetworkState(), TypeOpBmapMapFluttifyIOS((args['error'] as Object))?.as__<NSError>());
            break;
          default:
            break;
        }
      });
  }
  
  Future<void> set_distanceFilter(double distanceFilter) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_distanceFilter', {'refId': refId, "distanceFilter": distanceFilter});
  
  
  }
  
  Future<void> set_desiredAccuracy(double desiredAccuracy) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_desiredAccuracy', {'refId': refId, "desiredAccuracy": desiredAccuracy});
  
  
  }
  
  Future<void> set_coordinateType(BMKLocationCoordinateType coordinateType) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_coordinateType', {'refId': refId, "coordinateType": coordinateType.index});
  
  
  }
  
  Future<void> set_pausesLocationUpdatesAutomatically(bool pausesLocationUpdatesAutomatically) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_pausesLocationUpdatesAutomatically', {'refId': refId, "pausesLocationUpdatesAutomatically": pausesLocationUpdatesAutomatically});
  
  
  }
  
  Future<void> set_allowsBackgroundLocationUpdates(bool allowsBackgroundLocationUpdates) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_allowsBackgroundLocationUpdates', {'refId': refId, "allowsBackgroundLocationUpdates": allowsBackgroundLocationUpdates});
  
  
  }
  
  Future<void> set_locationTimeout(int locationTimeout) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_locationTimeout', {'refId': refId, "locationTimeout": locationTimeout});
  
  
  }
  
  Future<void> set_reGeocodeTimeout(int reGeocodeTimeout) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_reGeocodeTimeout', {'refId': refId, "reGeocodeTimeout": reGeocodeTimeout});
  
  
  }
  
  Future<void> set_locatingWithReGeocode(bool locatingWithReGeocode) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_locatingWithReGeocode', {'refId': refId, "locatingWithReGeocode": locatingWithReGeocode});
  
  
  }
  
  Future<void> set_isNeedNewVersionReGeocode(bool isNeedNewVersionReGeocode) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_isNeedNewVersionReGeocode', {'refId': refId, "isNeedNewVersionReGeocode": isNeedNewVersionReGeocode});
  
  
  }
  
  Future<void> set_userID(String userID) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_userID', {'refId': refId, "userID": userID});
  
  
  }
  
  //endregion

  //region methods
  
  Future<bool> requestLocationWithReGeocode_withNetworkState_completionBlock(bool withReGeocode, bool withNetWorkState, void completionBlock(BMKLocation location, BMKLocationNetworkState state, NSError error)) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKLocationManager@$refId::requestLocationWithReGeocode([\'withReGeocode\':$withReGeocode, \'withNetWorkState\':$withNetWorkState])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::requestLocationWithReGeocode_withNetworkState_completionBlock', {"withReGeocode": withReGeocode, "withNetWorkState": withNetWorkState, "refId": refId});
  
  
    // handle native call
    MethodChannel('BMKLocatingCompletionBlock::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::BMKLocatingCompletionBlock::BMKLocatingCompletionBlock':
              // print log
              if (fluttifyLogEnabled) {
        
              }
        
              // handle the native call
              if (completionBlock != null) completionBlock(TypeOpBmapMapFluttifyIOS((args['location'] as Object))?.as__<BMKLocation>(), (args['state'] as int).toBMKLocationNetworkState(), TypeOpBmapMapFluttifyIOS((args['error'] as Object))?.as__<NSError>());
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> startUpdatingLocation() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKLocationManager@$refId::startUpdatingLocation([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::startUpdatingLocation', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> stopUpdatingLocation() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKLocationManager@$refId::stopUpdatingLocation([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::stopUpdatingLocation', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> requestNetworkState() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKLocationManager@$refId::requestNetworkState([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::requestNetworkState', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  static Future<bool> headingAvailable() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKLocationManager::headingAvailable([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::headingAvailable', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> startUpdatingHeading() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKLocationManager@$refId::startUpdatingHeading([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::startUpdatingHeading', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> stopUpdatingHeading() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKLocationManager@$refId::stopUpdatingHeading([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::stopUpdatingHeading', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> tryIndoorLocation() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKLocationManager@$refId::tryIndoorLocation([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::tryIndoorLocation', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> stopIndoorLocation() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKLocationManager@$refId::stopIndoorLocation([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::stopIndoorLocation', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  static Future<CLLocationCoordinate2D> BMKLocationCoordinateConvert_SrcType_DesType(CLLocationCoordinate2D coordinate, BMKLocationCoordinateType srctype, BMKLocationCoordinateType destype) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKLocationManager::BMKLocationCoordinateConvert([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::BMKLocationCoordinateConvert_SrcType_DesType', {"coordinate": coordinate?.refId, "srctype": srctype.toValue(), "destype": destype.toValue()});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = CLLocationCoordinate2D()..refId = __result__..tag__ = 'bmap_map_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  static Future<bool> BMKLocationDataAvailableForCoordinate_withCoorType(CLLocationCoordinate2D coordinate, BMKLocationCoordinateType coortype) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKLocationManager::BMKLocationDataAvailableForCoordinate([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::BMKLocationDataAvailableForCoordinate_withCoorType', {"coordinate": coordinate?.refId, "coortype": coortype.toValue()});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension BMKLocationManager_Batch on List<BMKLocationManager> {
  //region getters
  Future<List<double>> get_distanceFilter_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_distanceFilter_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<double>> get_desiredAccuracy_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_desiredAccuracy_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<BMKLocationCoordinateType>> get_coordinateType_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_coordinateType_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toBMKLocationCoordinateType()).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_pausesLocationUpdatesAutomatically_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_pausesLocationUpdatesAutomatically_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_allowsBackgroundLocationUpdates_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_allowsBackgroundLocationUpdates_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_locationTimeout_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_locationTimeout_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_reGeocodeTimeout_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_reGeocodeTimeout_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_locatingWithReGeocode_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_locatingWithReGeocode_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_isNeedNewVersionReGeocode_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_isNeedNewVersionReGeocode_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_userID_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKLocationManager::get_userID_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_distanceFilter_batch(List<double> distanceFilter) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_distanceFilter_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "distanceFilter": distanceFilter[__i__]}]);
  
  
  }
  
  Future<void> set_desiredAccuracy_batch(List<double> desiredAccuracy) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_desiredAccuracy_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "desiredAccuracy": desiredAccuracy[__i__]}]);
  
  
  }
  
  Future<void> set_coordinateType_batch(List<BMKLocationCoordinateType> coordinateType) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_coordinateType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "coordinateType": coordinateType[__i__].index}]);
  
  
  }
  
  Future<void> set_pausesLocationUpdatesAutomatically_batch(List<bool> pausesLocationUpdatesAutomatically) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_pausesLocationUpdatesAutomatically_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "pausesLocationUpdatesAutomatically": pausesLocationUpdatesAutomatically[__i__]}]);
  
  
  }
  
  Future<void> set_allowsBackgroundLocationUpdates_batch(List<bool> allowsBackgroundLocationUpdates) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_allowsBackgroundLocationUpdates_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "allowsBackgroundLocationUpdates": allowsBackgroundLocationUpdates[__i__]}]);
  
  
  }
  
  Future<void> set_locationTimeout_batch(List<int> locationTimeout) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_locationTimeout_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "locationTimeout": locationTimeout[__i__]}]);
  
  
  }
  
  Future<void> set_reGeocodeTimeout_batch(List<int> reGeocodeTimeout) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_reGeocodeTimeout_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "reGeocodeTimeout": reGeocodeTimeout[__i__]}]);
  
  
  }
  
  Future<void> set_locatingWithReGeocode_batch(List<bool> locatingWithReGeocode) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_locatingWithReGeocode_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "locatingWithReGeocode": locatingWithReGeocode[__i__]}]);
  
  
  }
  
  Future<void> set_isNeedNewVersionReGeocode_batch(List<bool> isNeedNewVersionReGeocode) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_isNeedNewVersionReGeocode_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "isNeedNewVersionReGeocode": isNeedNewVersionReGeocode[__i__]}]);
  
  
  }
  
  Future<void> set_userID_batch(List<String> userID) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::set_userID_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "userID": userID[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<void>> startUpdatingLocation_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::startUpdatingLocation_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> stopUpdatingLocation_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::stopUpdatingLocation_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> requestNetworkState_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::requestNetworkState_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<bool>> headingAvailable_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::headingAvailable_batch', );
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> startUpdatingHeading_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::startUpdatingHeading_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> stopUpdatingHeading_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::stopUpdatingHeading_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> tryIndoorLocation_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::tryIndoorLocation_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> stopIndoorLocation_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::stopIndoorLocation_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<CLLocationCoordinate2D>> BMKLocationCoordinateConvert_SrcType_DesType_batch(List<CLLocationCoordinate2D> coordinate, List<BMKLocationCoordinateType> srctype, List<BMKLocationCoordinateType> destype) async {
    if (coordinate.length != srctype.length || srctype.length != destype.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::BMKLocationCoordinateConvert_SrcType_DesType_batch', [for (int __i__ = 0; __i__ < coordinate.length; __i__++) {"coordinate": coordinate[__i__].refId, "srctype": srctype[__i__].toValue(), "destype": destype[__i__].toValue()}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => CLLocationCoordinate2D()..refId = __result__..tag__ = 'bmap_map_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  static Future<List<bool>> BMKLocationDataAvailableForCoordinate_withCoorType_batch(List<CLLocationCoordinate2D> coordinate, List<BMKLocationCoordinateType> coortype) async {
    if (coordinate.length != coortype.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKLocationManager::BMKLocationDataAvailableForCoordinate_withCoorType_batch', [for (int __i__ = 0; __i__ < coordinate.length; __i__++) {"coordinate": coordinate[__i__].refId, "coortype": coortype[__i__].toValue()}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}