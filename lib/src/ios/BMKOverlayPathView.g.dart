// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKOverlayPathView extends BMKOverlayView  {
  //region constants
  static const String name__ = 'BMKOverlayPathView';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<BMKOverlayPathView> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKOverlayPathView',
      {'init': init}
    );
    return BmapMapFluttifyIOSAs<BMKOverlayPathView>(__result__);
  }
  
  static Future<List<BMKOverlayPathView>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKOverlayPathView',
      {'length': length, 'init': init}
    );
    return __result_batch__
        .map((it) => BmapMapFluttifyIOSAs<BMKOverlayPathView>(it))
        .toList();
  }
  
  //endregion

  //region getters
  Future<UIColor> get_fillColor({bool viewChannel = true}) async {
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKOverlayPathView::get_fillColor", {'__this__': this});
    return BmapMapFluttifyIOSAs<UIColor>(__result__);
  }
  
  Future<UIColor> get_strokeColor({bool viewChannel = true}) async {
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKOverlayPathView::get_strokeColor", {'__this__': this});
    return BmapMapFluttifyIOSAs<UIColor>(__result__);
  }
  
  Future<double> get_lineWidth({bool viewChannel = true}) async {
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKOverlayPathView::get_lineWidth", {'__this__': this});
    return __result__;
  }
  
  Future<double> get_miterLimit({bool viewChannel = true}) async {
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKOverlayPathView::get_miterLimit", {'__this__': this});
    return __result__;
  }
  
  Future<double> get_lineDashPhase({bool viewChannel = true}) async {
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKOverlayPathView::get_lineDashPhase", {'__this__': this});
    return __result__;
  }
  
  Future<List<dynamic>> get_lineDashPattern({bool viewChannel = true}) async {
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKOverlayPathView::get_lineDashPattern", {'__this__': this});
    return (__result__ as List)?.cast<dynamic>();
  }
  
  //endregion

  //region setters
  Future<void> set_fillColor(UIColor fillColor, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::set_fillColor', <String, dynamic>{'__this__': this, "fillColor": fillColor});
  
  
  }
  
  Future<void> set_strokeColor(UIColor strokeColor, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::set_strokeColor', <String, dynamic>{'__this__': this, "strokeColor": strokeColor});
  
  
  }
  
  Future<void> set_lineWidth(double lineWidth, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::set_lineWidth', <String, dynamic>{'__this__': this, "lineWidth": lineWidth});
  
  
  }
  
  Future<void> set_miterLimit(double miterLimit, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::set_miterLimit', <String, dynamic>{'__this__': this, "miterLimit": miterLimit});
  
  
  }
  
  Future<void> set_lineDashPhase(double lineDashPhase, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::set_lineDashPhase', <String, dynamic>{'__this__': this, "lineDashPhase": lineDashPhase});
  
  
  }
  
  Future<void> set_lineDashPattern(List<dynamic> lineDashPattern, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::set_lineDashPattern', <String, dynamic>{'__this__': this, "lineDashPattern": lineDashPattern});
  
  
  }
  
  //endregion

  //region methods
  
  Future<void> createPath({bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOverlayPathView@$refId::createPath([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::createPath', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> invalidatePath({bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOverlayPathView@$refId::invalidatePath([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::invalidatePath', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKOverlayPathView{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKOverlayPathView_Batch on List<BMKOverlayPathView> {
  //region getters
  Future<List<UIColor>> get_fillColor_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKOverlayPathView::get_fillColor_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyIOSAs<UIColor>(__result__))?.cast<UIColor>()?.toList();
  }
  
  Future<List<UIColor>> get_strokeColor_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKOverlayPathView::get_strokeColor_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => BmapMapFluttifyIOSAs<UIColor>(__result__))?.cast<UIColor>()?.toList();
  }
  
  Future<List<double>> get_lineWidth_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKOverlayPathView::get_lineWidth_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<double>()?.toList();
  }
  
  Future<List<double>> get_miterLimit_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKOverlayPathView::get_miterLimit_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<double>()?.toList();
  }
  
  Future<List<double>> get_lineDashPhase_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKOverlayPathView::get_lineDashPhase_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<double>()?.toList();
  }
  
  Future<List<List<dynamic>>> get_lineDashPattern_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod("BMKOverlayPathView::get_lineDashPattern_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => (__result__ as List)?.cast<dynamic>())?.cast<List<dynamic>>()?.toList();
  }
  
  //endregion

  //region setters
  Future<void> set_fillColor_batch(List<UIColor> fillColor, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::set_fillColor_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "fillColor": fillColor[__i__]}]);
  
  
  }
  
  Future<void> set_strokeColor_batch(List<UIColor> strokeColor, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::set_strokeColor_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "strokeColor": strokeColor[__i__]}]);
  
  
  }
  
  Future<void> set_lineWidth_batch(List<double> lineWidth, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::set_lineWidth_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "lineWidth": lineWidth[__i__]}]);
  
  
  }
  
  Future<void> set_miterLimit_batch(List<double> miterLimit, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::set_miterLimit_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "miterLimit": miterLimit[__i__]}]);
  
  
  }
  
  Future<void> set_lineDashPhase_batch(List<double> lineDashPhase, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::set_lineDashPhase_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "lineDashPhase": lineDashPhase[__i__]}]);
  
  
  }
  
  Future<void> set_lineDashPattern_batch(List<List<dynamic>> lineDashPattern, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::set_lineDashPattern_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "lineDashPattern": lineDashPattern[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<void>> createPath_batch({bool viewChannel = true}) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::createPath_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> invalidatePath_batch({bool viewChannel = true}) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/bmap_map_fluttify/BMKOverlayPathView' : 'me.yohom/bmap_map_fluttify', kBmapMapFluttifyMethodCodec).invokeMethod('BMKOverlayPathView::invalidatePath_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  //endregion
}