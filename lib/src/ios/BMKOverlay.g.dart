// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class _BMKOverlay_SUB extends NSObject with BMKAnnotation, BMKOverlay {}

mixin BMKOverlay on BMKAnnotation {
  

  static BMKOverlay subInstance() => _BMKOverlay_SUB();

  @override
  final String tag__ = 'bmap_map_fluttify';

  Future<CLLocationCoordinate2D> get_coordinate() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKOverlay::get_coordinate", {'__this__': this});
    return BmapMapFluttifyIOSAs<CLLocationCoordinate2D>(__result__);
  }
  
  Future<BMKMapRect> get_boundingMapRect() async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod("BMKOverlay::get_boundingMapRect", {'__this__': this});
    return BmapMapFluttifyIOSAs<BMKMapRect>(__result__);
  }
  

  

  
  Future<bool> intersectsMapRect(BMKMapRect mapRect) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOverlay@$refId::intersectsMapRect([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKOverlay::intersectsMapRect', {"mapRect": mapRect, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
}

extension BMKOverlay_Batch on List<BMKOverlay> {
  //region methods
  
  Future<List<bool>> intersectsMapRect_batch(List<BMKMapRect> mapRect) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKOverlay::intersectsMapRect_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"mapRect": mapRect[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  //endregion
}