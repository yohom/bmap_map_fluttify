// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';



mixin BMKMapViewDelegate on NSObject {
  

  

  

  

  @mustCallSuper
  Future<void> mapViewDidFinishLoading(BMKMapView mapView) {}
  
  @mustCallSuper
  Future<void> mapViewDidRenderValidData_withError(BMKMapView mapView, NSError error) {}
  
  @mustCallSuper
  Future<void> mapViewDidFinishRendering(BMKMapView mapView) {}
  
  @mustCallSuper
  Future<void> mapView_onDrawMapFrame(BMKMapView mapView, BMKMapStatus status) {}
  
  @mustCallSuper
  Future<void> mapView_regionWillChangeAnimated(BMKMapView mapView, bool animated) {}
  
  @mustCallSuper
  Future<void> mapView_regionWillChangeAnimated_reason(BMKMapView mapView, bool animated, BMKRegionChangeReason reason) {}
  
  @mustCallSuper
  Future<void> mapView_regionDidChangeAnimated(BMKMapView mapView, bool animated) {}
  
  @mustCallSuper
  Future<void> mapView_regionDidChangeAnimated_reason(BMKMapView mapView, bool animated, BMKRegionChangeReason reason) {}
  
  @mustCallSuper
  Future<BMKAnnotationView> mapView_viewForAnnotation(BMKMapView mapView, BMKAnnotation annotation) {}
  
  @mustCallSuper
  Future<void> mapView_didAddAnnotationViews(BMKMapView mapView, List<NSObject> views) {}
  
  @mustCallSuper
  Future<void> mapView_clickAnnotationView(BMKMapView mapView, BMKAnnotationView view) {}
  
  @mustCallSuper
  Future<void> mapView_didSelectAnnotationView(BMKMapView mapView, BMKAnnotationView view) {}
  
  @mustCallSuper
  Future<void> mapView_didDeselectAnnotationView(BMKMapView mapView, BMKAnnotationView view) {}
  
  @mustCallSuper
  Future<void> mapView_annotationView_didChangeDragState_fromOldState(BMKMapView mapView, BMKAnnotationView view, int newState, int oldState) {}
  
  @mustCallSuper
  Future<void> mapView_annotationViewForBubble(BMKMapView mapView, BMKAnnotationView view) {}
  
  @mustCallSuper
  Future<BMKOverlayView> mapView_viewForOverlay(BMKMapView mapView, BMKOverlay overlay) {}
  
  @mustCallSuper
  Future<void> mapView_didAddOverlayViews(BMKMapView mapView, List<NSObject> overlayViews) {}
  
  @mustCallSuper
  Future<void> mapView_onClickedBMKOverlayView(BMKMapView mapView, BMKOverlayView overlayView) {}
  
  @mustCallSuper
  Future<void> mapView_onClickedMapPoi(BMKMapView mapView, BMKMapPoi mapPoi) {}
  
  @mustCallSuper
  Future<void> mapView_onClickedMapBlank(BMKMapView mapView, CLLocationCoordinate2D coordinate) {}
  
  @mustCallSuper
  Future<void> mapview_onDoubleClick(BMKMapView mapView, CLLocationCoordinate2D coordinate) {}
  
  @mustCallSuper
  Future<void> mapview_onLongClick(BMKMapView mapView, CLLocationCoordinate2D coordinate) {}
  
  @mustCallSuper
  Future<void> mapview_onForceTouch_force_maximumPossibleForce(BMKMapView mapView, CLLocationCoordinate2D coordinate, double force, double maximumPossibleForce) {}
  
  @mustCallSuper
  Future<void> mapStatusDidChanged(BMKMapView mapView) {}
  
  @mustCallSuper
  Future<void> mapview_baseIndoorMapWithIn_baseIndoorMapInfo(BMKMapView mapView, bool flag, BMKBaseIndoorMapInfo info) {}
  
}

