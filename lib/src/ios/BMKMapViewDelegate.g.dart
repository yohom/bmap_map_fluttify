// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';



mixin BMKMapViewDelegate on NSObject {
  

  

  

  

  @mustCallSuper
  Future<void> mapViewDidFinishLoading(BMKMapView mapView) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewDidFinishLoading::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewDidRenderValidData_withError(BMKMapView mapView, NSError error) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (error is Ref) kNativeObjectPool.add(error);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewDidRenderValidData_withError::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewDidFinishRendering(BMKMapView mapView) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewDidFinishRendering::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapView_onDrawMapFrame(BMKMapView mapView, BMKMapStatus status) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (status is Ref) kNativeObjectPool.add(status);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_onDrawMapFrame::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapView_regionWillChangeAnimated(BMKMapView mapView, bool animated) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_regionWillChangeAnimated::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapView_regionWillChangeAnimated_reason(BMKMapView mapView, bool animated, BMKRegionChangeReason reason) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_regionWillChangeAnimated_reason::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapView_regionDidChangeAnimated(BMKMapView mapView, bool animated) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_regionDidChangeAnimated::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapView_regionDidChangeAnimated_reason(BMKMapView mapView, bool animated, BMKRegionChangeReason reason) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_regionDidChangeAnimated_reason::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<BMKAnnotationView> mapView_viewForAnnotation(BMKMapView mapView, BMKAnnotation annotation) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (annotation is Ref) kNativeObjectPool.add(annotation);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_viewForAnnotation::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapView_didAddAnnotationViews(BMKMapView mapView, List<NSObject> views) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    kNativeObjectPool.addAll(views);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_didAddAnnotationViews::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapView_clickAnnotationView(BMKMapView mapView, BMKAnnotationView view) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (view is Ref) kNativeObjectPool.add(view);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_clickAnnotationView::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapView_didSelectAnnotationView(BMKMapView mapView, BMKAnnotationView view) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (view is Ref) kNativeObjectPool.add(view);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_didSelectAnnotationView::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapView_didDeselectAnnotationView(BMKMapView mapView, BMKAnnotationView view) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (view is Ref) kNativeObjectPool.add(view);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_didDeselectAnnotationView::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapView_annotationView_didChangeDragState_fromOldState(BMKMapView mapView, BMKAnnotationView view, int newState, int oldState) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (view is Ref) kNativeObjectPool.add(view);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_annotationView_didChangeDragState_fromOldState::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapView_annotationViewForBubble(BMKMapView mapView, BMKAnnotationView view) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (view is Ref) kNativeObjectPool.add(view);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_annotationViewForBubble::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<BMKOverlayView> mapView_viewForOverlay(BMKMapView mapView, BMKOverlay overlay) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (overlay is Ref) kNativeObjectPool.add(overlay);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_viewForOverlay::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapView_didAddOverlayViews(BMKMapView mapView, List<NSObject> overlayViews) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    kNativeObjectPool.addAll(overlayViews);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_didAddOverlayViews::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapView_onClickedBMKOverlayView(BMKMapView mapView, BMKOverlayView overlayView) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (overlayView is Ref) kNativeObjectPool.add(overlayView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_onClickedBMKOverlayView::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapView_onClickedMapPoi(BMKMapView mapView, BMKMapPoi mapPoi) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (mapPoi is Ref) kNativeObjectPool.add(mapPoi);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_onClickedMapPoi::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapView_onClickedMapBlank(BMKMapView mapView, CLLocationCoordinate2D coordinate) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (coordinate is Ref) kNativeObjectPool.add(coordinate);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapView_onClickedMapBlank::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapview_onDoubleClick(BMKMapView mapView, CLLocationCoordinate2D coordinate) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (coordinate is Ref) kNativeObjectPool.add(coordinate);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapview_onDoubleClick::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapview_onLongClick(BMKMapView mapView, CLLocationCoordinate2D coordinate) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (coordinate is Ref) kNativeObjectPool.add(coordinate);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapview_onLongClick::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapview_onForceTouch_force_maximumPossibleForce(BMKMapView mapView, CLLocationCoordinate2D coordinate, double force, double maximumPossibleForce) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (coordinate is Ref) kNativeObjectPool.add(coordinate);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapview_onForceTouch_force_maximumPossibleForce::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapStatusDidChanged(BMKMapView mapView) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapStatusDidChanged::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapview_baseIndoorMapWithIn_baseIndoorMapInfo(BMKMapView mapView, bool flag, BMKBaseIndoorMapInfo info) {
    if (mapView is Ref) kNativeObjectPool.add(mapView);
    if (info is Ref) kNativeObjectPool.add(info);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapview_baseIndoorMapWithIn_baseIndoorMapInfo::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
}

