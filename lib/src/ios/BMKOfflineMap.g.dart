// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKOfflineMap extends NSObject  {
  //region constants
  static const String name__ = 'BMKOfflineMap';

  @override
  final String tag__ = 'bmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<BMKOfflineMap> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKOfflineMap',
      {'init': init}
    );
    return BmapMapFluttifyIOSAs<BMKOfflineMap>(__result__);
  }
  
  static Future<List<BMKOfflineMap>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKOfflineMap',
      {'length': length, 'init': init}
    );
    return __result_batch__
        .map((it) => BmapMapFluttifyIOSAs<BMKOfflineMap>(it))
        .toList();
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  Future<void> set_delegate(BMKOfflineMapDelegate delegate) async {
    await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::set_delegate', <String, dynamic>{'__this__': this, });
  
    MethodChannel('BMKOfflineMapDelegate::Callback', kBmapMapFluttifyMethodCodec)
      .setMethodCallHandler((methodCall) async {
        try {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::BMKOfflineMapDelegate::onGetOfflineMapState_withState':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onGetOfflineMapState_withState([\'type\':${args['type']}, \'state\':${args['state']}])');
              }
          
              // handle the native call
              await delegate?.onGetOfflineMapState_withState(args['type'], args['state']);
              break;
            default:
              throw MissingPluginException('方法${methodCall.method}未实现');
              break;
          }
        } catch (e) {
          debugPrint(e);
          rethrow;
        }
      });
  }
  
  //endregion

  //region methods
  
  Future<bool> scan(bool deleteFailedr) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOfflineMap@$refId::scan([\'deleteFailedr\':$deleteFailedr])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::scan', {"deleteFailedr": deleteFailedr, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool> start(int cityID) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOfflineMap@$refId::start([\'cityID\':$cityID])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::start', {"cityID": cityID, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool> update(int cityID) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOfflineMap@$refId::update([\'cityID\':$cityID])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::update', {"cityID": cityID, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool> pause(int cityID) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOfflineMap@$refId::pause([\'cityID\':$cityID])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::pause', {"cityID": cityID, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool> remove(int cityID) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOfflineMap@$refId::remove([\'cityID\':$cityID])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::remove', {"cityID": cityID, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<List<dynamic>> getHotCityList() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOfflineMap@$refId::getHotCityList([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::getHotCityList', {"__this__": this});
  
  
    // handle native call
  
  
    return (__result__ as List)?.cast<dynamic>();
  }
  
  
  Future<List<dynamic>> getOfflineCityList() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOfflineMap@$refId::getOfflineCityList([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::getOfflineCityList', {"__this__": this});
  
  
    // handle native call
  
  
    return (__result__ as List)?.cast<dynamic>();
  }
  
  
  Future<List<dynamic>> searchCity(String cityName) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOfflineMap@$refId::searchCity([\'cityName\':$cityName])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::searchCity', {"cityName": cityName, "__this__": this});
  
  
    // handle native call
  
  
    return (__result__ as List)?.cast<dynamic>();
  }
  
  
  Future<List<dynamic>> getAllUpdateInfo() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOfflineMap@$refId::getAllUpdateInfo([])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::getAllUpdateInfo', {"__this__": this});
  
  
    // handle native call
  
  
    return (__result__ as List)?.cast<dynamic>();
  }
  
  
  Future<BMKOLUpdateElement> getUpdateInfo(int cityID) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOfflineMap@$refId::getUpdateInfo([\'cityID\':$cityID])');
    }
  
    // invoke native method
    final __result__ = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::getUpdateInfo', {"cityID": cityID, "__this__": this});
  
  
    // handle native call
  
  
    return BmapMapFluttifyIOSAs<BMKOLUpdateElement>(__result__);
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKOfflineMap{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKOfflineMap_Batch on List<BMKOfflineMap> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<bool>> scan_batch(List<bool> deleteFailedr) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::scan_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"deleteFailedr": deleteFailedr[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  Future<List<bool>> start_batch(List<int> cityID) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::start_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"cityID": cityID[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  Future<List<bool>> update_batch(List<int> cityID) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::update_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"cityID": cityID[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  Future<List<bool>> pause_batch(List<int> cityID) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::pause_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"cityID": cityID[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  Future<List<bool>> remove_batch(List<int> cityID) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::remove_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"cityID": cityID[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  Future<List<List<dynamic>>> getHotCityList_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::getHotCityList_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as List)?.cast<dynamic>()).cast<List<dynamic>>().toList();
  }
  
  
  Future<List<List<dynamic>>> getOfflineCityList_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::getOfflineCityList_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as List)?.cast<dynamic>()).cast<List<dynamic>>().toList();
  }
  
  
  Future<List<List<dynamic>>> searchCity_batch(List<String> cityName) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::searchCity_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"cityName": cityName[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as List)?.cast<dynamic>()).cast<List<dynamic>>().toList();
  }
  
  
  Future<List<List<dynamic>>> getAllUpdateInfo_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::getAllUpdateInfo_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as List)?.cast<dynamic>()).cast<List<dynamic>>().toList();
  }
  
  
  Future<List<BMKOLUpdateElement>> getUpdateInfo_batch(List<int> cityID) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapMapFluttifyChannel.invokeMethod('BMKOfflineMap::getUpdateInfo_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"cityID": cityID[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapMapFluttifyIOSAs<BMKOLUpdateElement>(__result__)).cast<BMKOLUpdateElement>().toList();
  }
  
  //endregion
}