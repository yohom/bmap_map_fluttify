//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "BmapMapFluttifyPlugin.h"
#import <objc/runtime.h>
#import "SubHandler/SubHandler0.h"
#import "SubHandler/SubHandler1.h"
#import "SubHandler/SubHandler2.h"
#import "SubHandler/SubHandler3.h"
#import "SubHandler/SubHandler4.h"
#import "SubHandler/SubHandler5.h"
#import "SubHandler/Custom/SubHandlerCustom.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation BmapMapFluttifyPlugin {
  NSMutableDictionary<NSString*, Handler>* _handlerMap;
}

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
    // 处理方法们
    _handlerMap = @{}.mutableCopy;

    [_handlerMap addEntriesFromDictionary: [self getSubHandler0]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler1]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler2]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler3]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler4]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler5]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandlerCustom]];
  }

  return self;
}

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"com.fluttify/bmap_map_fluttify"
            binaryMessenger:[registrar messenger]];

  [registrar addMethodCallDelegate:[[BmapMapFluttifyPlugin alloc] initWithFlutterPluginRegistrar:registrar]
                           channel:channel];

  // 注册View
  [registrar registerViewFactory: [[BMKActionPaopaoViewFactory alloc] initWithRegistrar:registrar] withId: @"com.fluttify/BMKActionPaopaoView"];
  [registrar registerViewFactory: [[BMKTileLayerViewFactory alloc] initWithRegistrar:registrar] withId: @"com.fluttify/BMKTileLayerView"];
  [registrar registerViewFactory: [[BMKOverlayPathViewFactory alloc] initWithRegistrar:registrar] withId: @"com.fluttify/BMKOverlayPathView"];
  [registrar registerViewFactory: [[BMKCircleViewFactory alloc] initWithRegistrar:registrar] withId: @"com.fluttify/BMKCircleView"];
  [registrar registerViewFactory: [[BMKPolylineViewFactory alloc] initWithRegistrar:registrar] withId: @"com.fluttify/BMKPolylineView"];
  [registrar registerViewFactory: [[BMKPinAnnotationViewFactory alloc] initWithRegistrar:registrar] withId: @"com.fluttify/BMKPinAnnotationView"];
  [registrar registerViewFactory: [[BMKMapViewFactory alloc] initWithRegistrar:registrar] withId: @"com.fluttify/BMKMapView"];
  [registrar registerViewFactory: [[BMKArclineViewFactory alloc] initWithRegistrar:registrar] withId: @"com.fluttify/BMKArclineView"];
  [registrar registerViewFactory: [[BMKPolygonViewFactory alloc] initWithRegistrar:registrar] withId: @"com.fluttify/BMKPolygonView"];
  [registrar registerViewFactory: [[BMKOverlayViewFactory alloc] initWithRegistrar:registrar] withId: @"com.fluttify/BMKOverlayView"];
  [registrar registerViewFactory: [[BMKGroundOverlayViewFactory alloc] initWithRegistrar:registrar] withId: @"com.fluttify/BMKGroundOverlayView"];
  [registrar registerViewFactory: [[BMKAnnotationViewFactory alloc] initWithRegistrar:registrar] withId: @"com.fluttify/BMKAnnotationView"];
  [registrar registerViewFactory: [[BMKOverlayGLBasicViewFactory alloc] initWithRegistrar:registrar] withId: @"com.fluttify/BMKOverlayGLBasicView"];
}

// Method Handlers
- (void)handleMethodCall:(FlutterMethodCall *)methodCall result:(FlutterResult)methodResult {
  if (_handlerMap[methodCall.method] != nil) {
    _handlerMap[methodCall.method](_registrar, [methodCall arguments], methodResult);
  } else {
    methodResult(FlutterMethodNotImplemented);
  }
}

// 委托方法们
- (void)mapViewDidFinishLoading : (BMKMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidFinishLoading");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidFinishLoading" arguments:@{@"mapView": argmapView}];
  });
  
}

- (void)mapViewDidRenderValidData : (BMKMapView*)mapView withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidRenderValidData_withError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argerror = [NSNull null];
  if (error != nil) {
      argerror = [NSNumber numberWithLong: error.hash];
      HEAP[argerror] = error;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidRenderValidData_withError" arguments:@{@"mapView": argmapView, @"error": argerror}];
  });
  
}

- (void)mapViewDidFinishRendering : (BMKMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidFinishRendering");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidFinishRendering" arguments:@{@"mapView": argmapView}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView onDrawMapFrame: (BMKMapStatus*)status
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_onDrawMapFrame");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argstatus = [NSNull null];
  if (status != nil) {
      argstatus = [NSNumber numberWithLong: status.hash];
      HEAP[argstatus] = status;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_onDrawMapFrame" arguments:@{@"mapView": argmapView, @"status": argstatus}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView regionWillChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_regionWillChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_regionWillChangeAnimated" arguments:@{@"mapView": argmapView, @"animated": arganimated}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView regionWillChangeAnimated: (BOOL)animated reason: (BMKRegionChangeReason)reason
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_regionWillChangeAnimated_reason");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // enum callback arg
  NSNumber* argreason = @((NSInteger) reason);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_regionWillChangeAnimated_reason" arguments:@{@"mapView": argmapView, @"animated": arganimated, @"reason": argreason}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView regionDidChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_regionDidChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_regionDidChangeAnimated" arguments:@{@"mapView": argmapView, @"animated": arganimated}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView regionDidChangeAnimated: (BOOL)animated reason: (BMKRegionChangeReason)reason
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_regionDidChangeAnimated_reason");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // enum callback arg
  NSNumber* argreason = @((NSInteger) reason);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_regionDidChangeAnimated_reason" arguments:@{@"mapView": argmapView, @"animated": arganimated, @"reason": argreason}];
  });
  
}

- (BMKAnnotationView*)mapView : (BMKMapView*)mapView viewForAnnotation: (id<BMKAnnotation>)annotation
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_viewForAnnotation");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argannotation = [NSNull null];
  if (annotation != nil) {
      argannotation = [NSNumber numberWithLong: annotation.hash];
      HEAP[argannotation] = annotation;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_viewForAnnotation"
                  arguments:@{}
                     result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return nil;
}

- (void)mapView : (BMKMapView*)mapView didAddAnnotationViews: (NSArray*)views
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_didAddAnnotationViews");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // list callback arg
  NSMutableArray<NSNumber*>* argviews = [NSMutableArray arrayWithCapacity:views.count];
  for (int __i__ = 0; __i__ < views.count; __i__++) {
      NSObject* item = ((NSObject*) [views objectAtIndex:__i__]);
      // return to dart side data
      argviews[__i__] = [NSNumber numberWithLong: item.hash];
      // add to HEAP
      HEAP[[NSNumber numberWithLong: item.hash]] = item;
  }

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_didAddAnnotationViews" arguments:@{@"mapView": argmapView, @"views": argviews}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView clickAnnotationView: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_clickAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argview = [NSNull null];
  if (view != nil) {
      argview = [NSNumber numberWithLong: view.hash];
      HEAP[argview] = view;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_clickAnnotationView" arguments:@{@"mapView": argmapView, @"view": argview}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView didSelectAnnotationView: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_didSelectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argview = [NSNull null];
  if (view != nil) {
      argview = [NSNumber numberWithLong: view.hash];
      HEAP[argview] = view;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_didSelectAnnotationView" arguments:@{@"mapView": argmapView, @"view": argview}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView didDeselectAnnotationView: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_didDeselectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argview = [NSNull null];
  if (view != nil) {
      argview = [NSNumber numberWithLong: view.hash];
      HEAP[argview] = view;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_didDeselectAnnotationView" arguments:@{@"mapView": argmapView, @"view": argview}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView annotationView: (BMKAnnotationView*)view didChangeDragState: (NSUInteger)newState fromOldState: (NSUInteger)oldState
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_annotationView_didChangeDragState_fromOldState");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argview = [NSNull null];
  if (view != nil) {
      argview = [NSNumber numberWithLong: view.hash];
      HEAP[argview] = view;
  }
  
  // primitive callback arg
  NSNumber* argnewState = @(newState);
  // primitive callback arg
  NSNumber* argoldState = @(oldState);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_annotationView_didChangeDragState_fromOldState" arguments:@{@"mapView": argmapView, @"view": argview, @"newState": argnewState, @"oldState": argoldState}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView annotationViewForBubble: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_annotationViewForBubble");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argview = [NSNull null];
  if (view != nil) {
      argview = [NSNumber numberWithLong: view.hash];
      HEAP[argview] = view;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_annotationViewForBubble" arguments:@{@"mapView": argmapView, @"view": argview}];
  });
  
}

- (BMKOverlayView*)mapView : (BMKMapView*)mapView viewForOverlay: (id<BMKOverlay>)overlay
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_viewForOverlay");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argoverlay = [NSNull null];
  if (overlay != nil) {
      argoverlay = [NSNumber numberWithLong: overlay.hash];
      HEAP[argoverlay] = overlay;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_viewForOverlay"
                  arguments:@{}
                     result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return nil;
}

- (void)mapView : (BMKMapView*)mapView didAddOverlayViews: (NSArray*)overlayViews
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_didAddOverlayViews");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // list callback arg
  NSMutableArray<NSNumber*>* argoverlayViews = [NSMutableArray arrayWithCapacity:overlayViews.count];
  for (int __i__ = 0; __i__ < overlayViews.count; __i__++) {
      NSObject* item = ((NSObject*) [overlayViews objectAtIndex:__i__]);
      // return to dart side data
      argoverlayViews[__i__] = [NSNumber numberWithLong: item.hash];
      // add to HEAP
      HEAP[[NSNumber numberWithLong: item.hash]] = item;
  }

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_didAddOverlayViews" arguments:@{@"mapView": argmapView, @"overlayViews": argoverlayViews}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView onClickedBMKOverlayView: (BMKOverlayView*)overlayView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_onClickedBMKOverlayView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argoverlayView = [NSNull null];
  if (overlayView != nil) {
      argoverlayView = [NSNumber numberWithLong: overlayView.hash];
      HEAP[argoverlayView] = overlayView;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_onClickedBMKOverlayView" arguments:@{@"mapView": argmapView, @"overlayView": argoverlayView}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView onClickedMapPoi: (BMKMapPoi*)mapPoi
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_onClickedMapPoi");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argmapPoi = [NSNull null];
  if (mapPoi != nil) {
      argmapPoi = [NSNumber numberWithLong: mapPoi.hash];
      HEAP[argmapPoi] = mapPoi;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_onClickedMapPoi" arguments:@{@"mapView": argmapView, @"mapPoi": argmapPoi}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView onClickedMapBlank: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_onClickedMapBlank");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = [NSNumber numberWithLong: coordinateValue.hash];
  HEAP[argcoordinate] = coordinateValue;
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_onClickedMapBlank" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate}];
  });
  
}

- (void)mapview : (BMKMapView*)mapView onDoubleClick: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapview_onDoubleClick");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = [NSNumber numberWithLong: coordinateValue.hash];
  HEAP[argcoordinate] = coordinateValue;
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapview_onDoubleClick" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate}];
  });
  
}

- (void)mapview : (BMKMapView*)mapView onLongClick: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapview_onLongClick");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = [NSNumber numberWithLong: coordinateValue.hash];
  HEAP[argcoordinate] = coordinateValue;
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapview_onLongClick" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate}];
  });
  
}

- (void)mapview : (BMKMapView*)mapView onForceTouch: (CLLocationCoordinate2D)coordinate force: (CGFloat)force maximumPossibleForce: (CGFloat)maximumPossibleForce
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapview_onForceTouch_force_maximumPossibleForce");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = [NSNumber numberWithLong: coordinateValue.hash];
  HEAP[argcoordinate] = coordinateValue;
  
  // primitive callback arg
  NSNumber* argforce = @(force);
  // primitive callback arg
  NSNumber* argmaximumPossibleForce = @(maximumPossibleForce);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapview_onForceTouch_force_maximumPossibleForce" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate, @"force": argforce, @"maximumPossibleForce": argmaximumPossibleForce}];
  });
  
}

- (void)mapStatusDidChanged : (BMKMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapStatusDidChanged");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapStatusDidChanged" arguments:@{@"mapView": argmapView}];
  });
  
}

- (void)mapview : (BMKMapView*)mapView baseIndoorMapWithIn: (BOOL)flag baseIndoorMapInfo: (BMKBaseIndoorMapInfo*)info
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapview_baseIndoorMapWithIn_baseIndoorMapInfo");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // primitive callback arg
  NSNumber* argflag = @(flag);
  // ref callback arg
  NSNumber* arginfo = [NSNull null];
  if (info != nil) {
      arginfo = [NSNumber numberWithLong: info.hash];
      HEAP[arginfo] = info;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapview_baseIndoorMapWithIn_baseIndoorMapInfo" arguments:@{@"mapView": argmapView, @"flag": argflag, @"info": arginfo}];
  });
  
}

- (void)onGetOfflineMapState : (int)type withState: (int)state
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKOfflineMapDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKOfflineMapDelegate::onGetOfflineMapState_withState");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argtype = @(type);
  // primitive callback arg
  NSNumber* argstate = @(state);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKOfflineMapDelegate::onGetOfflineMapState_withState" arguments:@{@"type": argtype, @"state": argstate}];
  });
  
}

- (void)BMKLocationManager : (BMKLocationManager*)manager doRequestAlwaysAuthorization: (CLLocationManager*)locationManager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKLocationManagerDelegate::BMKLocationManager_doRequestAlwaysAuthorization");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = [NSNull null];
  if (manager != nil) {
      argmanager = [NSNumber numberWithLong: manager.hash];
      HEAP[argmanager] = manager;
  }
  
  // ref callback arg
  NSNumber* arglocationManager = [NSNull null];
  if (locationManager != nil) {
      arglocationManager = [NSNumber numberWithLong: locationManager.hash];
      HEAP[arglocationManager] = locationManager;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKLocationManagerDelegate::BMKLocationManager_doRequestAlwaysAuthorization" arguments:@{@"manager": argmanager, @"locationManager": arglocationManager}];
  });
  
}

- (void)BMKLocationManager : (BMKLocationManager*)manager didFailWithError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKLocationManagerDelegate::BMKLocationManager_didFailWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = [NSNull null];
  if (manager != nil) {
      argmanager = [NSNumber numberWithLong: manager.hash];
      HEAP[argmanager] = manager;
  }
  
  // ref callback arg
  NSNumber* argerror = [NSNull null];
  if (error != nil) {
      argerror = [NSNumber numberWithLong: error.hash];
      HEAP[argerror] = error;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKLocationManagerDelegate::BMKLocationManager_didFailWithError" arguments:@{@"manager": argmanager, @"error": argerror}];
  });
  
}

- (void)BMKLocationManager : (BMKLocationManager*)manager didUpdateLocation: (BMKLocation*)location orError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKLocationManagerDelegate::BMKLocationManager_didUpdateLocation_orError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = [NSNull null];
  if (manager != nil) {
      argmanager = [NSNumber numberWithLong: manager.hash];
      HEAP[argmanager] = manager;
  }
  
  // ref callback arg
  NSNumber* arglocation = [NSNull null];
  if (location != nil) {
      arglocation = [NSNumber numberWithLong: location.hash];
      HEAP[arglocation] = location;
  }
  
  // ref callback arg
  NSNumber* argerror = [NSNull null];
  if (error != nil) {
      argerror = [NSNumber numberWithLong: error.hash];
      HEAP[argerror] = error;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKLocationManagerDelegate::BMKLocationManager_didUpdateLocation_orError" arguments:@{@"manager": argmanager, @"location": arglocation, @"error": argerror}];
  });
  
}

- (void)BMKLocationManager : (BMKLocationManager*)manager didChangeAuthorizationStatus: (CLAuthorizationStatus)status
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKLocationManagerDelegate::BMKLocationManager_didChangeAuthorizationStatus");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = [NSNull null];
  if (manager != nil) {
      argmanager = [NSNumber numberWithLong: manager.hash];
      HEAP[argmanager] = manager;
  }
  
  // enum callback arg
  NSNumber* argstatus = @((NSInteger) status);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKLocationManagerDelegate::BMKLocationManager_didChangeAuthorizationStatus" arguments:@{@"manager": argmanager, @"status": argstatus}];
  });
  
}

- (BOOL)BMKLocationManagerShouldDisplayHeadingCalibration : (BMKLocationManager*)manager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKLocationManagerDelegate::BMKLocationManagerShouldDisplayHeadingCalibration");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = [NSNull null];
  if (manager != nil) {
      argmanager = [NSNumber numberWithLong: manager.hash];
      HEAP[argmanager] = manager;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKLocationManagerDelegate::BMKLocationManagerShouldDisplayHeadingCalibration"
                  arguments:@{}
                     result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return NO;
}

- (void)BMKLocationManager : (BMKLocationManager*)manager didUpdateHeading: (CLHeading*)heading
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKLocationManagerDelegate::BMKLocationManager_didUpdateHeading");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = [NSNull null];
  if (manager != nil) {
      argmanager = [NSNumber numberWithLong: manager.hash];
      HEAP[argmanager] = manager;
  }
  
  // ref callback arg
  NSNumber* argheading = [NSNull null];
  if (heading != nil) {
      argheading = [NSNumber numberWithLong: heading.hash];
      HEAP[argheading] = heading;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKLocationManagerDelegate::BMKLocationManager_didUpdateHeading" arguments:@{@"manager": argmanager, @"heading": argheading}];
  });
  
}

- (void)BMKLocationManager : (BMKLocationManager*)manager didUpdateNetworkState: (BMKLocationNetworkState)state orError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKLocationManagerDelegate::BMKLocationManager_didUpdateNetworkState_orError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = [NSNull null];
  if (manager != nil) {
      argmanager = [NSNumber numberWithLong: manager.hash];
      HEAP[argmanager] = manager;
  }
  
  // enum callback arg
  NSNumber* argstate = @((NSInteger) state);
  // ref callback arg
  NSNumber* argerror = [NSNull null];
  if (error != nil) {
      argerror = [NSNumber numberWithLong: error.hash];
      HEAP[argerror] = error;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKLocationManagerDelegate::BMKLocationManager_didUpdateNetworkState_orError" arguments:@{@"manager": argmanager, @"state": argstate, @"error": argerror}];
  });
  
}

- (void)onCheckPermissionState : (BMKLocationAuthErrorCode)iError
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKLocationAuthDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKLocationAuthDelegate::onCheckPermissionState");
  }

  // convert to jsonable arg
  // enum callback arg
  NSNumber* argiError = @((NSInteger) iError);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKLocationAuthDelegate::onCheckPermissionState" arguments:@{@"iError": argiError}];
  });
  
}

- (void)BMKGeoFenceManager : (BMKGeoFenceManager*)manager doRequestAlwaysAuthorization: (CLLocationManager*)locationManager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKGeoFenceManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKGeoFenceManagerDelegate::BMKGeoFenceManager_doRequestAlwaysAuthorization");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = [NSNull null];
  if (manager != nil) {
      argmanager = [NSNumber numberWithLong: manager.hash];
      HEAP[argmanager] = manager;
  }
  
  // ref callback arg
  NSNumber* arglocationManager = [NSNull null];
  if (locationManager != nil) {
      arglocationManager = [NSNumber numberWithLong: locationManager.hash];
      HEAP[arglocationManager] = locationManager;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKGeoFenceManagerDelegate::BMKGeoFenceManager_doRequestAlwaysAuthorization" arguments:@{@"manager": argmanager, @"locationManager": arglocationManager}];
  });
  
}

- (void)BMKGeoFenceManager : (BMKGeoFenceManager*)manager didAddRegionForMonitoringFinished: (NSArray<BMKGeoFenceRegion*>*)regions customID: (NSString*)customID error: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKGeoFenceManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKGeoFenceManagerDelegate::BMKGeoFenceManager_didAddRegionForMonitoringFinished_customID_error");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = [NSNull null];
  if (manager != nil) {
      argmanager = [NSNumber numberWithLong: manager.hash];
      HEAP[argmanager] = manager;
  }
  
  // list callback arg
  NSMutableArray<NSNumber*>* argregions = [NSMutableArray arrayWithCapacity:regions.count];
  for (int __i__ = 0; __i__ < regions.count; __i__++) {
      NSObject* item = ((NSObject*) [regions objectAtIndex:__i__]);
      // return to dart side data
      argregions[__i__] = [NSNumber numberWithLong: item.hash];
      // add to HEAP
      HEAP[[NSNumber numberWithLong: item.hash]] = item;
  }
  // jsonable callback arg
  NSString* argcustomID = customID == nil ? [NSNull null] : customID;
  // ref callback arg
  NSNumber* argerror = [NSNull null];
  if (error != nil) {
      argerror = [NSNumber numberWithLong: error.hash];
      HEAP[argerror] = error;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKGeoFenceManagerDelegate::BMKGeoFenceManager_didAddRegionForMonitoringFinished_customID_error" arguments:@{@"manager": argmanager, @"regions": argregions, @"customID": argcustomID, @"error": argerror}];
  });
  
}

- (void)BMKGeoFenceManager : (BMKGeoFenceManager*)manager didGeoFencesStatusChangedForRegion: (BMKGeoFenceRegion*)region customID: (NSString*)customID error: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKGeoFenceManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKGeoFenceManagerDelegate::BMKGeoFenceManager_didGeoFencesStatusChangedForRegion_customID_error");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = [NSNull null];
  if (manager != nil) {
      argmanager = [NSNumber numberWithLong: manager.hash];
      HEAP[argmanager] = manager;
  }
  
  // ref callback arg
  NSNumber* argregion = [NSNull null];
  if (region != nil) {
      argregion = [NSNumber numberWithLong: region.hash];
      HEAP[argregion] = region;
  }
  
  // jsonable callback arg
  NSString* argcustomID = customID == nil ? [NSNull null] : customID;
  // ref callback arg
  NSNumber* argerror = [NSNull null];
  if (error != nil) {
      argerror = [NSNumber numberWithLong: error.hash];
      HEAP[argerror] = error;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::BMKGeoFenceManagerDelegate::BMKGeoFenceManager_didGeoFencesStatusChangedForRegion_customID_error" arguments:@{@"manager": argmanager, @"region": argregion, @"customID": argcustomID, @"error": argerror}];
  });
  
}


@end