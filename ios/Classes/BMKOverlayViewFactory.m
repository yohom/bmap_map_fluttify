//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "BMKOverlayViewFactory.h"
#import "BmapMapFluttifyPlugin.h"
#import <objc/runtime.h>
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation BMKOverlayViewFactory {
}

- (instancetype)initWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
  }

  return self;
}

- (NSObject<FlutterMessageCodec>*)createArgsCodec {
  return [FlutterStandardMessageCodec sharedInstance];
}

- (NSObject <FlutterPlatformView> *)createWithFrame:(CGRect)frame viewIdentifier:(int64_t)viewId arguments:(id _Nullable)args {
  return [[BMKOverlayViewPlatformView alloc] initWithViewId:viewId frame: frame registrar:_registrar arguments: args];
}

@end

@implementation BMKOverlayViewPlatformView {
  int64_t _viewId;
  CGRect _frame;
  NSDictionary<NSString *, Handler>* _handlerMap;
  BMKOverlayView* _view;
  id _args;
}

- (instancetype)initWithViewId:(int64_t)viewId frame:(CGRect)frame registrar:(NSObject <FlutterPluginRegistrar> *)registrar arguments:(id _Nullable)args {
  self = [super init];
  if (self) {
    _viewId = viewId;
    _registrar = registrar;
    _frame = frame;
    _args = args;
  }

  return self;
}

- (UIView *)view {
  __weak __typeof(self)weakSelf = self;
  if (_view == nil) {
    NSDictionary<NSString*, id>* params = (NSDictionary<NSString*, id>*) _args;

    _view = [[BMKOverlayView alloc] initWithFrame:_frame];

    ////////////////////////////////初始化UiKitView////////////////////////////////////////

    ////////////////////////////////初始化UiKitView////////////////////////////////////////

    // 这里用一个magic number调整一下id
    // 同时存放viewId和refId的对象, 供后续viewId转refId使用
    HEAP[[NSString stringWithFormat:@"%@", @(2147483647 - _viewId)]] = _view;
    HEAP[[NSString stringWithFormat:@"%@", @(_view.hash)]] = _view;
  }

  //region method call handler
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"com.fluttify/bmap_map_fluttify/BMKOverlayView"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];

  [channel setMethodCallHandler:^(FlutterMethodCall *methodCall, FlutterResult methodResult) {
    NSDictionary<NSString *, id> *args = (NSDictionary<NSString *, id> *) [methodCall arguments];

    __strong __typeof(weakSelf) strongSelf = weakSelf;
    if (strongSelf != nil && strongSelf->_handlerMap[methodCall.method] != nil) {
      strongSelf->_handlerMap[methodCall.method](strongSelf->_registrar, args, methodResult);
    } else {
      methodResult(FlutterMethodNotImplemented);
    }
  }];
  //endregion

  //region handlers
  _handlerMap = @{
      @"BMKOverlayView::setOverlayGeometryDelegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // id arg
          id delegate;
          // jsonable
          if ([args[@"delegate"] isKindOfClass:[NSNumber class]]
                  || [args[@"delegate"] isKindOfClass:[NSString class]]
                  || [args[@"delegate"] isKindOfClass:[NSArray class]]
                  || [args[@"delegate"] isKindOfClass:[NSDictionary class]]) {
              delegate = args[@"delegate"];
          }
          // non jsonable
          else {
              delegate = HEAP[@([args[@"delegate"] integerValue])];
          }
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::setOverlayGeometryDelegate(%@)", args[@"refId"], args[@"delegate"]);
          }
      
          // invoke native method
          [ref setOverlayGeometryDelegate : delegate];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::initWithOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<BMKOverlay> overlay = (id<BMKOverlay>) args[@"overlay"];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::initWithOverlay(%@)", args[@"refId"], args[@"overlay"]);
          }
      
          // invoke native method
          id result = [ref initWithOverlay: overlay];
      
          // result
          // return a ref
          id __result__ = result;
      
          methodResult(__result__);
      },
      @"BMKOverlayView::pointForMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapPointValue = (NSValue*) args[@"mapPoint"];
          BMKMapPoint mapPoint;
          [mapPointValue getValue:&mapPoint];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::pointForMapPoint(%@)", args[@"refId"], args[@"mapPoint"]);
          }
      
          // invoke native method
          CGPoint result = [ref pointForMapPoint: mapPoint];
      
          // result
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
      
          methodResult(__result__);
      },
      @"BMKOverlayView::mapPointForPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* pointValue = (NSValue*) args[@"point"];
          CGPoint point;
          [pointValue getValue:&point];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::mapPointForPoint(%@)", args[@"refId"], args[@"point"]);
          }
      
          // invoke native method
          BMKMapPoint result = [ref mapPointForPoint: point];
      
          // result
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapPoint)];
      
          methodResult(__result__);
      },
      @"BMKOverlayView::rectForMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
          BMKMapRect mapRect;
          [mapRectValue getValue:&mapRect];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::rectForMapRect(%@)", args[@"refId"], args[@"mapRect"]);
          }
      
          // invoke native method
          CGRect result = [ref rectForMapRect: mapRect];
      
          // result
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGRect)];
      
          methodResult(__result__);
      },
      @"BMKOverlayView::mapRectForRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) args[@"rect"];
          CGRect rect;
          [rectValue getValue:&rect];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::mapRectForRect(%@)", args[@"refId"], args[@"rect"]);
          }
      
          // invoke native method
          BMKMapRect result = [ref mapRectForRect: rect];
      
          // result
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
      
          methodResult(__result__);
      },
      @"BMKOverlayView::canDrawMapRect_zoomScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
          BMKMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // jsonable arg
          CGFloat zoomScale = [args[@"zoomScale"] floatValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::canDrawMapRect(%@, %@)", args[@"refId"], args[@"mapRect"], args[@"zoomScale"]);
          }
      
          // invoke native method
          BOOL result = [ref canDrawMapRect: mapRect zoomScale: zoomScale];
      
          // result
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      @"BMKOverlayView::setNeedsDisplayInMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
          BMKMapRect mapRect;
          [mapRectValue getValue:&mapRect];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::setNeedsDisplayInMapRect(%@)", args[@"refId"], args[@"mapRect"]);
          }
      
          // invoke native method
          [ref setNeedsDisplayInMapRect : mapRect];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::renderLinesWithPoints_pointCount_strokeColor_lineWidth_looped": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg struct
          NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
          BMKMapPoint points[pointsValueList.count];
          for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
              NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[__i__] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // ref arg
          UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // jsonable arg
          BOOL looped = [args[@"looped"] boolValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderLinesWithPoints(%@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"strokeColor"], args[@"lineWidth"], args[@"looped"]);
          }
      
          // invoke native method
          [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::renderTexturedLinesWithPoints_pointCount_lineWidth_textureID_looped": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg struct
          NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
          BMKMapPoint points[pointsValueList.count];
          for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
              NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[__i__] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // jsonable arg
          GLuint textureID = [args[@"textureID"] unsignedIntegerValue];
          // jsonable arg
          BOOL looped = [args[@"looped"] boolValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderTexturedLinesWithPoints(%@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"lineWidth"], args[@"textureID"], args[@"looped"]);
          }
      
          // invoke native method
          [ref renderTexturedLinesWithPoints : points pointCount: pointCount lineWidth: lineWidth textureID: textureID looped: looped];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::renderLinesWithPoints_pointCount_strokeColor_lineWidth_looped_lineDashType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg struct
          NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
          BMKMapPoint points[pointsValueList.count];
          for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
              NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[__i__] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // ref arg
          UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // jsonable arg
          BOOL looped = [args[@"looped"] boolValue];
          // enum arg
          BMKLineDashType lineDashType = (BMKLineDashType) [args[@"lineDashType"] integerValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderLinesWithPoints(%@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"strokeColor"], args[@"lineWidth"], args[@"looped"], args[@"lineDashType"]);
          }
      
          // invoke native method
          [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped lineDashType: lineDashType];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::renderLinesWithPoints_pointCount_strokeColor_lineWidth_looped_lineDash": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg struct
          NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
          BMKMapPoint points[pointsValueList.count];
          for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
              NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[__i__] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // ref arg
          UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // jsonable arg
          BOOL looped = [args[@"looped"] boolValue];
          // jsonable arg
          BOOL lineDash = [args[@"lineDash"] boolValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderLinesWithPoints(%@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"strokeColor"], args[@"lineWidth"], args[@"looped"], args[@"lineDash"]);
          }
      
          // invoke native method
          [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped lineDash: lineDash];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::renderTexturedLinesWithPartPoints_lineWidth_textureIndexs_isFocus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSObject*>* partPt = (NSArray<NSObject*>*) args[@"partPt"];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // list arg
          NSArray<NSObject*>* textureIndexs = (NSArray<NSObject*>*) args[@"textureIndexs"];
          // jsonable arg
          BOOL isFoucs = [args[@"isFoucs"] boolValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderTexturedLinesWithPartPoints(%@, %@, %@, %@)", args[@"refId"], args[@"partPt"], args[@"lineWidth"], args[@"textureIndexs"], args[@"isFoucs"]);
          }
      
          // invoke native method
          [ref renderTexturedLinesWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs isFocus: isFoucs];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::renderTexturedLinesWithPartPoints_lineWidth_textureIndexs_isFocus_tileTexture_keepScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSObject*>* partPt = (NSArray<NSObject*>*) args[@"partPt"];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // list arg
          NSArray<NSObject*>* textureIndexs = (NSArray<NSObject*>*) args[@"textureIndexs"];
          // jsonable arg
          BOOL isFoucs = [args[@"isFoucs"] boolValue];
          // jsonable arg
          BOOL tileTexture = [args[@"tileTexture"] boolValue];
          // jsonable arg
          BOOL keepscale = [args[@"keepscale"] boolValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderTexturedLinesWithPartPoints(%@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"partPt"], args[@"lineWidth"], args[@"textureIndexs"], args[@"isFoucs"], args[@"tileTexture"], args[@"keepscale"]);
          }
      
          // invoke native method
          [ref renderTexturedLinesWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs isFocus: isFoucs tileTexture: tileTexture keepScale: keepscale];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::renderTexturedLinesWithPoints_pointCount_lineWidth_textureID_strokeColor_looped_tileTexture_keepScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg struct
          NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
          BMKMapPoint points[pointsValueList.count];
          for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
              NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[__i__] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // jsonable arg
          GLuint textureID = [args[@"textureID"] unsignedIntegerValue];
          // ref arg
          UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
          // jsonable arg
          BOOL looped = [args[@"looped"] boolValue];
          // jsonable arg
          BOOL tileTexture = [args[@"tileTexture"] boolValue];
          // jsonable arg
          BOOL keepScale = [args[@"keepScale"] boolValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderTexturedLinesWithPoints(%@, %@, %@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"lineWidth"], args[@"textureID"], args[@"strokeColor"], args[@"looped"], args[@"tileTexture"], args[@"keepScale"]);
          }
      
          // invoke native method
          [ref renderTexturedLinesWithPoints : points pointCount: pointCount lineWidth: lineWidth textureID: textureID strokeColor: strokeColor looped: looped tileTexture: tileTexture keepScale: keepScale];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::renderMultiTexturedPolyLineWithPartPoints_lineWidth_textureIndexs_isFoucs_keepScale_lineJoinType_lineCapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSObject*>* partPt = (NSArray<NSObject*>*) args[@"partPt"];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // jsonable arg
          NSArray<NSNumber*>* textureIndexs = (NSArray<NSNumber*>*) args[@"textureIndexs"];
          // jsonable arg
          BOOL isFoucs = [args[@"isFoucs"] boolValue];
          // jsonable arg
          BOOL keepScale = [args[@"keepScale"] boolValue];
          // enum arg
          BMKLineJoinType lineJoinType = (BMKLineJoinType) [args[@"lineJoinType"] integerValue];
          // enum arg
          BMKLineCapType lineCapType = (BMKLineCapType) [args[@"lineCapType"] integerValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderMultiTexturedPolyLineWithPartPoints(%@, %@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"partPt"], args[@"lineWidth"], args[@"textureIndexs"], args[@"isFoucs"], args[@"keepScale"], args[@"lineJoinType"], args[@"lineCapType"]);
          }
      
          // invoke native method
          [ref renderMultiTexturedPolyLineWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs isFoucs: isFoucs keepScale: keepScale lineJoinType: lineJoinType lineCapType: lineCapType];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::renderMultiDashPolyLineWithPartPoints_lineWidth_textureIndexs_lineDashType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSObject*>* partPt = (NSArray<NSObject*>*) args[@"partPt"];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // jsonable arg
          NSArray<NSNumber*>* textureIndexs = (NSArray<NSNumber*>*) args[@"textureIndexs"];
          // enum arg
          BMKLineDashType lineDashType = (BMKLineDashType) [args[@"lineDashType"] integerValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderMultiDashPolyLineWithPartPoints(%@, %@, %@, %@)", args[@"refId"], args[@"partPt"], args[@"lineWidth"], args[@"textureIndexs"], args[@"lineDashType"]);
          }
      
          // invoke native method
          [ref renderMultiDashPolyLineWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs lineDashType: lineDashType];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::renderRegionWithPoints_pointCount_fillColor_usingTriangleFan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg struct
          NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
          BMKMapPoint points[pointsValueList.count];
          for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
              NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[__i__] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // ref arg
          UIColor* fillColor = (UIColor*) args[@"fillColor"];
          // jsonable arg
          BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderRegionWithPoints(%@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"fillColor"], args[@"usingTriangleFan"]);
          }
      
          // invoke native method
          [ref renderRegionWithPoints : points pointCount: pointCount fillColor: fillColor usingTriangleFan: usingTriangleFan];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::renderATRegionWithPoint_pointCount_fillColor_usingTriangleFan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg struct
          NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
          BMKMapPoint points[pointsValueList.count];
          for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
              NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[__i__] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // ref arg
          UIColor* fillColor = (UIColor*) args[@"fillColor"];
          // jsonable arg
          BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderATRegionWithPoint(%@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"fillColor"], args[@"usingTriangleFan"]);
          }
      
          // invoke native method
          [ref renderATRegionWithPoint : points pointCount: pointCount fillColor: fillColor usingTriangleFan: usingTriangleFan];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::rendeCircleWithPoints_pointCount_lineWidth_fillColor_strokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg struct
          NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
          BMKMapPoint points[pointsValueList.count];
          for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
              NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[__i__] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // ref arg
          UIColor* fillColor = (UIColor*) args[@"fillColor"];
          // ref arg
          UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::rendeCircleWithPoints(%@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"lineWidth"], args[@"fillColor"], args[@"strokeColor"]);
          }
      
          // invoke native method
          [ref rendeCircleWithPoints : points pointCount: pointCount lineWidth: lineWidth fillColor: fillColor strokeColor: strokeColor];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::rendePolygonWithPoints_pointCount_lineWidth_fillColor_strokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg struct
          NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
          BMKMapPoint points[pointsValueList.count];
          for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
              NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[__i__] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // ref arg
          UIColor* fillColor = (UIColor*) args[@"fillColor"];
          // ref arg
          UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::rendePolygonWithPoints(%@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"lineWidth"], args[@"fillColor"], args[@"strokeColor"]);
          }
      
          // invoke native method
          [ref rendePolygonWithPoints : points pointCount: pointCount lineWidth: lineWidth fillColor: fillColor strokeColor: strokeColor];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::glRender": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::glRender()", args[@"refId"]);
          }
      
          // invoke native method
          [ref glRender ];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKOverlayView::loadStrokeTextureImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          UIImage* textureImage = (UIImage*) args[@"textureImage"];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::loadStrokeTextureImage(%@)", args[@"refId"], args[@"textureImage"]);
          }
      
          // invoke native method
          GLuint result = [ref loadStrokeTextureImage: textureImage];
      
          // result
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      @"BMKOverlayView::loadStrokeTextureImages": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<UIImage*>* textureImages = (NSArray<UIImage*>*) args[@"textureImages"];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::loadStrokeTextureImages(%@)", args[@"refId"], args[@"textureImages"]);
          }
      
          // invoke native method
          BOOL result = [ref loadStrokeTextureImages: textureImages];
      
          // result
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      @"BMKOverlayView::get_overlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKOverlayView::get_overlay");
          }
      
          // ref object
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // invoke native method
          id<BMKOverlay> result = ref.overlay;
      
          // return a ref
          id __result__ = result;
      
          methodResult(__result__);
      },
      
      @"BMKOverlayView::get_strokeTextureID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKOverlayView::get_strokeTextureID");
          }
      
          // ref object
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // invoke native method
          GLuint result = ref.strokeTextureID;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"BMKOverlayView::get_colors": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKOverlayView::get_colors");
          }
      
          // ref object
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          // invoke native method
          NSArray<UIColor*>* result = ref.colors;
      
          // 返回值: 列表
          NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
          for (int __i__ = 0; __i__ < result.count; __i__++) {
              NSObject* object = [result objectAtIndex:__i__];
              [__result__ addObject: object];
          }
      
          methodResult(__result__);
      },
      
      @"BMKOverlayView::set_colors": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKOverlayView::set_colors");
          }
      
          // args
          // list arg
          NSArray<UIColor*>* colors = (NSArray<UIColor*>*) args[@"colors"];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
      
          ref.colors = colors;
          methodResult(@"success");
      },
      
  };
  //endregion
  return _view;
}

//region delegate
- (void)mapViewDidFinishLoading : (BMKMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidFinishLoading");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidFinishLoading" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapViewDidRenderValidData : (BMKMapView*)mapView withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidRenderValidData_withError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argerror = error;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidRenderValidData_withError" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"error": argerror == nil ? [NSNull null] : argerror}];
  });
  
}

- (void)mapViewDidFinishRendering : (BMKMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidFinishRendering");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidFinishRendering" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView onDrawMapFrame: (BMKMapStatus*)status
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_onDrawMapFrame");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argstatus = status;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_onDrawMapFrame" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"status": argstatus == nil ? [NSNull null] : argstatus}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView regionWillChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_regionWillChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_regionWillChangeAnimated" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView regionWillChangeAnimated: (BOOL)animated reason: (BMKRegionChangeReason)reason
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_regionWillChangeAnimated_reason");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // enum callback arg
  NSNumber* argreason = @((NSInteger) reason);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_regionWillChangeAnimated_reason" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated, @"reason": argreason == nil ? [NSNull null] : argreason}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView regionDidChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_regionDidChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_regionDidChangeAnimated" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView regionDidChangeAnimated: (BOOL)animated reason: (BMKRegionChangeReason)reason
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_regionDidChangeAnimated_reason");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // enum callback arg
  NSNumber* argreason = @((NSInteger) reason);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_regionDidChangeAnimated_reason" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated, @"reason": argreason == nil ? [NSNull null] : argreason}];
  });
  
}

- (BMKAnnotationView*)mapView : (BMKMapView*)mapView viewForAnnotation: (id<BMKAnnotation>)annotation
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_viewForAnnotation");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argannotation = annotation;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_viewForAnnotation"
                arguments:@{}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return (BMKAnnotationView*) nil;
}

- (void)mapView : (BMKMapView*)mapView didAddAnnotationViews: (NSArray*)views
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_didAddAnnotationViews");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // list callback arg
  NSArray<NSObject*>* argviews = views;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_didAddAnnotationViews" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"views": argviews == nil ? [NSNull null] : argviews}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView clickAnnotationView: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_clickAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argview = view;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_clickAnnotationView" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView didSelectAnnotationView: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_didSelectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argview = view;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_didSelectAnnotationView" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView didDeselectAnnotationView: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_didDeselectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argview = view;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_didDeselectAnnotationView" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView annotationView: (BMKAnnotationView*)view didChangeDragState: (NSUInteger)newState fromOldState: (NSUInteger)oldState
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_annotationView_didChangeDragState_fromOldState");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argview = view;
  
  // primitive callback arg
  NSNumber* argnewState = @(newState);
  // primitive callback arg
  NSNumber* argoldState = @(oldState);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_annotationView_didChangeDragState_fromOldState" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview, @"newState": argnewState == nil ? [NSNull null] : argnewState, @"oldState": argoldState == nil ? [NSNull null] : argoldState}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView annotationViewForBubble: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_annotationViewForBubble");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argview = view;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_annotationViewForBubble" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (BMKOverlayView*)mapView : (BMKMapView*)mapView viewForOverlay: (id<BMKOverlay>)overlay
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_viewForOverlay");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argoverlay = overlay;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_viewForOverlay"
                arguments:@{}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return (BMKOverlayView*) nil;
}

- (void)mapView : (BMKMapView*)mapView didAddOverlayViews: (NSArray*)overlayViews
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_didAddOverlayViews");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // list callback arg
  NSArray<NSObject*>* argoverlayViews = overlayViews;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_didAddOverlayViews" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"overlayViews": argoverlayViews == nil ? [NSNull null] : argoverlayViews}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView onClickedBMKOverlayView: (BMKOverlayView*)overlayView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_onClickedBMKOverlayView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argoverlayView = overlayView;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_onClickedBMKOverlayView" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"overlayView": argoverlayView == nil ? [NSNull null] : argoverlayView}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView onClickedMapPoi: (BMKMapPoi*)mapPoi
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_onClickedMapPoi");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argmapPoi = mapPoi;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_onClickedMapPoi" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"mapPoi": argmapPoi == nil ? [NSNull null] : argmapPoi}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView onClickedMapBlank: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_onClickedMapBlank");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // struct callback arg
  NSValue* argcoordinate = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_onClickedMapBlank" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"coordinate": argcoordinate == nil ? [NSNull null] : argcoordinate}];
  });
  
}

- (void)mapview : (BMKMapView*)mapView onDoubleClick: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapview_onDoubleClick");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // struct callback arg
  NSValue* argcoordinate = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapview_onDoubleClick" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"coordinate": argcoordinate == nil ? [NSNull null] : argcoordinate}];
  });
  
}

- (void)mapview : (BMKMapView*)mapView onLongClick: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapview_onLongClick");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // struct callback arg
  NSValue* argcoordinate = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapview_onLongClick" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"coordinate": argcoordinate == nil ? [NSNull null] : argcoordinate}];
  });
  
}

- (void)mapview : (BMKMapView*)mapView onForceTouch: (CLLocationCoordinate2D)coordinate force: (CGFloat)force maximumPossibleForce: (CGFloat)maximumPossibleForce
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapview_onForceTouch_force_maximumPossibleForce");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // struct callback arg
  NSValue* argcoordinate = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  
  // primitive callback arg
  NSNumber* argforce = @(force);
  // primitive callback arg
  NSNumber* argmaximumPossibleForce = @(maximumPossibleForce);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapview_onForceTouch_force_maximumPossibleForce" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"coordinate": argcoordinate == nil ? [NSNull null] : argcoordinate, @"force": argforce == nil ? [NSNull null] : argforce, @"maximumPossibleForce": argmaximumPossibleForce == nil ? [NSNull null] : argmaximumPossibleForce}];
  });
  
}

- (void)mapStatusDidChanged : (BMKMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapStatusDidChanged");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapStatusDidChanged" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapview : (BMKMapView*)mapView baseIndoorMapWithIn: (BOOL)flag baseIndoorMapInfo: (BMKBaseIndoorMapInfo*)info
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapview_baseIndoorMapWithIn_baseIndoorMapInfo");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // primitive callback arg
  NSNumber* argflag = @(flag);
  // ref callback arg
  NSObject* arginfo = info;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapview_baseIndoorMapWithIn_baseIndoorMapInfo" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"flag": argflag == nil ? [NSNull null] : argflag, @"info": arginfo == nil ? [NSNull null] : arginfo}];
  });
  
}

- (void)onGetOfflineMapState : (int)type withState: (int)state
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKOfflineMapDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKOfflineMapDelegate::onGetOfflineMapState_withState");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argtype = @(type);
  // primitive callback arg
  NSNumber* argstate = @(state);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKOfflineMapDelegate::onGetOfflineMapState_withState" arguments:@{@"type": argtype == nil ? [NSNull null] : argtype, @"state": argstate == nil ? [NSNull null] : argstate}];
  });
  
}

//endregion

@end
