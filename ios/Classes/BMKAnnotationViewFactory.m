//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "BMKAnnotationViewFactory.h"
#import "BmapMapFluttifyPlugin.h"
#import <objc/runtime.h>
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation BMKAnnotationViewFactory {
}

- (instancetype)initWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
  }

  return self;
}

- (NSObject<FlutterMessageCodec>*)createArgsCodec {
  return [FlutterStandardMessageCodec sharedInstance];
}

- (NSObject <FlutterPlatformView> *)createWithFrame:(CGRect)frame viewIdentifier:(int64_t)viewId arguments:(id _Nullable)args {
  return [[BMKAnnotationViewPlatformView alloc] initWithViewId:viewId frame: frame registrar:_registrar arguments: args];
}

@end

@implementation BMKAnnotationViewPlatformView {
  int64_t _viewId;
  CGRect _frame;
  NSDictionary<NSString *, Handler>* _handlerMap;
  BMKAnnotationView* _view;
  id _args;
}

- (instancetype)initWithViewId:(int64_t)viewId frame:(CGRect)frame registrar:(NSObject <FlutterPluginRegistrar> *)registrar arguments:(id _Nullable)args {
  self = [super init];
  if (self) {
    _viewId = viewId;
    _registrar = registrar;
    _frame = frame;
    _args = args;
  }

  return self;
}

- (UIView *)view {
  __weak __typeof(self)weakSelf = self;
  if (_view == nil) {
    NSDictionary<NSString*, id>* params = (NSDictionary<NSString*, id>*) _args;

    _view = [[BMKAnnotationView alloc] initWithFrame:_frame];

    ////////////////////////////////初始化UiKitView////////////////////////////////////////

    ////////////////////////////////初始化UiKitView////////////////////////////////////////

    // 这里用一个magic number调整一下id
    // 同时存放viewId和refId的对象, 供后续viewId转refId使用
    HEAP[[NSString stringWithFormat:@"%@", @(2147483647 - _viewId)]] = _view;
    HEAP[[NSString stringWithFormat:@"%@", @(_view.hash)]] = _view;
  }

  //region method call handler
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"com.fluttify/bmap_map_fluttify/BMKAnnotationView"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];

  [channel setMethodCallHandler:^(FlutterMethodCall *methodCall, FlutterResult methodResult) {
    NSDictionary<NSString *, id> *args = (NSDictionary<NSString *, id> *) [methodCall arguments];

    __strong __typeof(weakSelf) strongSelf = weakSelf;
    if (strongSelf != nil && strongSelf->_handlerMap[methodCall.method] != nil) {
      strongSelf->_handlerMap[methodCall.method](strongSelf->_registrar, args, methodResult);
    } else {
      methodResult(FlutterMethodNotImplemented);
    }
  }];
  //endregion

  //region handlers
  _handlerMap = @{
      @"BMKAnnotationView::initWithAnnotation_reuseIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<BMKAnnotation> annotation = (id<BMKAnnotation>) args[@"annotation"];
          // jsonable arg
          NSString* reuseIdentifier = (NSString*) args[@"reuseIdentifier"];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKAnnotationView@%@::initWithAnnotation(%@, %@)", args[@"refId"], args[@"annotation"], args[@"reuseIdentifier"]);
          }
      
          // invoke native method
          id result = [ref initWithAnnotation: annotation reuseIdentifier: reuseIdentifier];
      
          // result
          // return a ref
          id __result__ = result;
      
          methodResult(__result__);
      },
      @"BMKAnnotationView::prepareForReuse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKAnnotationView@%@::prepareForReuse()", args[@"refId"]);
          }
      
          // invoke native method
          [ref prepareForReuse ];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKAnnotationView::setSelected_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL selected = [args[@"selected"] boolValue];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKAnnotationView@%@::setSelected(%@, %@)", args[@"refId"], args[@"selected"], args[@"animated"]);
          }
      
          // invoke native method
          [ref setSelected : selected animated: animated];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"BMKAnnotationView::get_reuseIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_reuseIdentifier");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          NSString* result = ref.reuseIdentifier;
      
          // 返回值: jsonable
          id __result__ = result;
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_paopaoView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_paopaoView");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          BMKActionPaopaoView* result = ref.paopaoView;
      
          // return a ref
          id __result__ = result;
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_annotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_annotation");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          id<BMKAnnotation> result = ref.annotation;
      
          // return a ref
          id __result__ = result;
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_image": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_image");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          UIImage* result = ref.image;
      
          // return a ref
          id __result__ = result;
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_centerOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_centerOffset");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          CGPoint result = ref.centerOffset;
      
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_calloutOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_calloutOffset");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          CGPoint result = ref.calloutOffset;
      
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_enabled3D": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_enabled3D");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.enabled3D;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_isEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_isEnabled");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.enabled;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_isSelected": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_isSelected");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.selected;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_canShowCallout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_canShowCallout");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.canShowCallout;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_leftCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_leftCalloutAccessoryView");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          UIView* result = ref.leftCalloutAccessoryView;
      
          // return a ref
          id __result__ = result;
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_rightCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_rightCalloutAccessoryView");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          UIView* result = ref.rightCalloutAccessoryView;
      
          // return a ref
          id __result__ = result;
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_isDraggable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_isDraggable");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.draggable;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_dragState": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_dragState");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          NSUInteger result = ref.dragState;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_hidePaopaoWhenSingleTapOnMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_hidePaopaoWhenSingleTapOnMap");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.hidePaopaoWhenSingleTapOnMap;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_hidePaopaoWhenDoubleTapOnMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_hidePaopaoWhenDoubleTapOnMap");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.hidePaopaoWhenDoubleTapOnMap;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_hidePaopaoWhenTwoFingersTapOnMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_hidePaopaoWhenTwoFingersTapOnMap");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.hidePaopaoWhenTwoFingersTapOnMap;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_hidePaopaoWhenSelectOthers": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_hidePaopaoWhenSelectOthers");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.hidePaopaoWhenSelectOthers;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_hidePaopaoWhenDrag": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_hidePaopaoWhenDrag");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.hidePaopaoWhenDrag;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_hidePaopaoWhenDragOthers": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_hidePaopaoWhenDragOthers");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.hidePaopaoWhenDragOthers;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::get_displayPriority": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::get_displayPriority");
          }
      
          // ref object
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          // invoke native method
          float result = ref.displayPriority;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"BMKAnnotationView::set_paopaoView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_paopaoView");
          }
      
          // args
          // ref arg
          BMKActionPaopaoView* paopaoView = (BMKActionPaopaoView*) args[@"paopaoView"];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.paopaoView = paopaoView;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_annotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_annotation");
          }
      
          // args
          // ref arg
          id<BMKAnnotation> annotation = (id<BMKAnnotation>) args[@"annotation"];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.annotation = annotation;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_image": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_image");
          }
      
          // args
          // ref arg
          UIImage* image = (UIImage*) args[@"image"];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.image = image;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_centerOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_centerOffset");
          }
      
          // args
          // struct arg
          NSValue* centerOffsetValue = (NSValue*) args[@"centerOffset"];
          CGPoint centerOffset;
          [centerOffsetValue getValue:&centerOffset];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.centerOffset = centerOffset;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_calloutOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_calloutOffset");
          }
      
          // args
          // struct arg
          NSValue* calloutOffsetValue = (NSValue*) args[@"calloutOffset"];
          CGPoint calloutOffset;
          [calloutOffsetValue getValue:&calloutOffset];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.calloutOffset = calloutOffset;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_enabled3D": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_enabled3D");
          }
      
          // args
          // jsonable arg
          BOOL enabled3D = [args[@"enabled3D"] boolValue];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.enabled3D = enabled3D;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_enabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_enabled");
          }
      
          // args
          // jsonable arg
          BOOL enabled = [args[@"enabled"] boolValue];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.enabled = enabled;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_selected": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_selected");
          }
      
          // args
          // jsonable arg
          BOOL selected = [args[@"selected"] boolValue];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.selected = selected;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_canShowCallout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_canShowCallout");
          }
      
          // args
          // jsonable arg
          BOOL canShowCallout = [args[@"canShowCallout"] boolValue];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.canShowCallout = canShowCallout;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_leftCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_leftCalloutAccessoryView");
          }
      
          // args
          // ref arg
          UIView* leftCalloutAccessoryView = (UIView*) args[@"leftCalloutAccessoryView"];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.leftCalloutAccessoryView = leftCalloutAccessoryView;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_rightCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_rightCalloutAccessoryView");
          }
      
          // args
          // ref arg
          UIView* rightCalloutAccessoryView = (UIView*) args[@"rightCalloutAccessoryView"];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.rightCalloutAccessoryView = rightCalloutAccessoryView;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_draggable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_draggable");
          }
      
          // args
          // jsonable arg
          BOOL draggable = [args[@"draggable"] boolValue];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.draggable = draggable;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_dragState": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_dragState");
          }
      
          // args
          // jsonable arg
          NSUInteger dragState = [args[@"dragState"] unsignedIntegerValue];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.dragState = dragState;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_hidePaopaoWhenSingleTapOnMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_hidePaopaoWhenSingleTapOnMap");
          }
      
          // args
          // jsonable arg
          BOOL hidePaopaoWhenSingleTapOnMap = [args[@"hidePaopaoWhenSingleTapOnMap"] boolValue];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.hidePaopaoWhenSingleTapOnMap = hidePaopaoWhenSingleTapOnMap;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_hidePaopaoWhenDoubleTapOnMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_hidePaopaoWhenDoubleTapOnMap");
          }
      
          // args
          // jsonable arg
          BOOL hidePaopaoWhenDoubleTapOnMap = [args[@"hidePaopaoWhenDoubleTapOnMap"] boolValue];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.hidePaopaoWhenDoubleTapOnMap = hidePaopaoWhenDoubleTapOnMap;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_hidePaopaoWhenTwoFingersTapOnMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_hidePaopaoWhenTwoFingersTapOnMap");
          }
      
          // args
          // jsonable arg
          BOOL hidePaopaoWhenTwoFingersTapOnMap = [args[@"hidePaopaoWhenTwoFingersTapOnMap"] boolValue];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.hidePaopaoWhenTwoFingersTapOnMap = hidePaopaoWhenTwoFingersTapOnMap;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_hidePaopaoWhenSelectOthers": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_hidePaopaoWhenSelectOthers");
          }
      
          // args
          // jsonable arg
          BOOL hidePaopaoWhenSelectOthers = [args[@"hidePaopaoWhenSelectOthers"] boolValue];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.hidePaopaoWhenSelectOthers = hidePaopaoWhenSelectOthers;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_hidePaopaoWhenDrag": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_hidePaopaoWhenDrag");
          }
      
          // args
          // jsonable arg
          BOOL hidePaopaoWhenDrag = [args[@"hidePaopaoWhenDrag"] boolValue];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.hidePaopaoWhenDrag = hidePaopaoWhenDrag;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_hidePaopaoWhenDragOthers": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_hidePaopaoWhenDragOthers");
          }
      
          // args
          // jsonable arg
          BOOL hidePaopaoWhenDragOthers = [args[@"hidePaopaoWhenDragOthers"] boolValue];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.hidePaopaoWhenDragOthers = hidePaopaoWhenDragOthers;
          methodResult(@"success");
      },
      
      @"BMKAnnotationView::set_displayPriority": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKAnnotationView::set_displayPriority");
          }
      
          // args
          // jsonable arg
          float displayPriority = [args[@"displayPriority"] floatValue];
      
          // ref
          BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
      
          ref.displayPriority = displayPriority;
          methodResult(@"success");
      },
      
  };
  //endregion
  return _view;
}

//region delegate
- (void)mapViewDidFinishLoading : (BMKMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidFinishLoading");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidFinishLoading" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapViewDidRenderValidData : (BMKMapView*)mapView withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidRenderValidData_withError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argerror = error;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidRenderValidData_withError" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"error": argerror == nil ? [NSNull null] : argerror}];
  });
  
}

- (void)mapViewDidFinishRendering : (BMKMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidFinishRendering");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidFinishRendering" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView onDrawMapFrame: (BMKMapStatus*)status
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_onDrawMapFrame");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argstatus = status;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_onDrawMapFrame" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"status": argstatus == nil ? [NSNull null] : argstatus}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView regionWillChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_regionWillChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_regionWillChangeAnimated" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView regionWillChangeAnimated: (BOOL)animated reason: (BMKRegionChangeReason)reason
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_regionWillChangeAnimated_reason");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // enum callback arg
  NSNumber* argreason = @((NSInteger) reason);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_regionWillChangeAnimated_reason" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated, @"reason": argreason == nil ? [NSNull null] : argreason}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView regionDidChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_regionDidChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_regionDidChangeAnimated" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView regionDidChangeAnimated: (BOOL)animated reason: (BMKRegionChangeReason)reason
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_regionDidChangeAnimated_reason");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // enum callback arg
  NSNumber* argreason = @((NSInteger) reason);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_regionDidChangeAnimated_reason" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated, @"reason": argreason == nil ? [NSNull null] : argreason}];
  });
  
}

- (BMKAnnotationView*)mapView : (BMKMapView*)mapView viewForAnnotation: (id<BMKAnnotation>)annotation
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_viewForAnnotation");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argannotation = annotation;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_viewForAnnotation"
                arguments:@{}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return (BMKAnnotationView*) nil;
}

- (void)mapView : (BMKMapView*)mapView didAddAnnotationViews: (NSArray*)views
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_didAddAnnotationViews");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // list callback arg
  NSArray<NSObject*>* argviews = views;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_didAddAnnotationViews" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"views": argviews == nil ? [NSNull null] : argviews}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView clickAnnotationView: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_clickAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argview = view;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_clickAnnotationView" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView didSelectAnnotationView: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_didSelectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argview = view;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_didSelectAnnotationView" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView didDeselectAnnotationView: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_didDeselectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argview = view;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_didDeselectAnnotationView" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView annotationView: (BMKAnnotationView*)view didChangeDragState: (NSUInteger)newState fromOldState: (NSUInteger)oldState
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_annotationView_didChangeDragState_fromOldState");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argview = view;
  
  // primitive callback arg
  NSNumber* argnewState = @(newState);
  // primitive callback arg
  NSNumber* argoldState = @(oldState);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_annotationView_didChangeDragState_fromOldState" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview, @"newState": argnewState == nil ? [NSNull null] : argnewState, @"oldState": argoldState == nil ? [NSNull null] : argoldState}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView annotationViewForBubble: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_annotationViewForBubble");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argview = view;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_annotationViewForBubble" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (BMKOverlayView*)mapView : (BMKMapView*)mapView viewForOverlay: (id<BMKOverlay>)overlay
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_viewForOverlay");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argoverlay = overlay;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_viewForOverlay"
                arguments:@{}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return (BMKOverlayView*) nil;
}

- (void)mapView : (BMKMapView*)mapView didAddOverlayViews: (NSArray*)overlayViews
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_didAddOverlayViews");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // list callback arg
  NSArray<NSObject*>* argoverlayViews = overlayViews;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_didAddOverlayViews" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"overlayViews": argoverlayViews == nil ? [NSNull null] : argoverlayViews}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView onClickedBMKOverlayView: (BMKOverlayView*)overlayView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_onClickedBMKOverlayView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argoverlayView = overlayView;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_onClickedBMKOverlayView" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"overlayView": argoverlayView == nil ? [NSNull null] : argoverlayView}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView onClickedMapPoi: (BMKMapPoi*)mapPoi
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_onClickedMapPoi");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // ref callback arg
  NSObject* argmapPoi = mapPoi;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_onClickedMapPoi" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"mapPoi": argmapPoi == nil ? [NSNull null] : argmapPoi}];
  });
  
}

- (void)mapView : (BMKMapView*)mapView onClickedMapBlank: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapView_onClickedMapBlank");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // struct callback arg
  NSValue* argcoordinate = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapView_onClickedMapBlank" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"coordinate": argcoordinate == nil ? [NSNull null] : argcoordinate}];
  });
  
}

- (void)mapview : (BMKMapView*)mapView onDoubleClick: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapview_onDoubleClick");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // struct callback arg
  NSValue* argcoordinate = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapview_onDoubleClick" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"coordinate": argcoordinate == nil ? [NSNull null] : argcoordinate}];
  });
  
}

- (void)mapview : (BMKMapView*)mapView onLongClick: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapview_onLongClick");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // struct callback arg
  NSValue* argcoordinate = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapview_onLongClick" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"coordinate": argcoordinate == nil ? [NSNull null] : argcoordinate}];
  });
  
}

- (void)mapview : (BMKMapView*)mapView onForceTouch: (CLLocationCoordinate2D)coordinate force: (CGFloat)force maximumPossibleForce: (CGFloat)maximumPossibleForce
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapview_onForceTouch_force_maximumPossibleForce");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // struct callback arg
  NSValue* argcoordinate = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  
  // primitive callback arg
  NSNumber* argforce = @(force);
  // primitive callback arg
  NSNumber* argmaximumPossibleForce = @(maximumPossibleForce);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapview_onForceTouch_force_maximumPossibleForce" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"coordinate": argcoordinate == nil ? [NSNull null] : argcoordinate, @"force": argforce == nil ? [NSNull null] : argforce, @"maximumPossibleForce": argmaximumPossibleForce == nil ? [NSNull null] : argmaximumPossibleForce}];
  });
  
}

- (void)mapStatusDidChanged : (BMKMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapStatusDidChanged");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapStatusDidChanged" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapview : (BMKMapView*)mapView baseIndoorMapWithIn: (BOOL)flag baseIndoorMapInfo: (BMKBaseIndoorMapInfo*)info
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapview_baseIndoorMapWithIn_baseIndoorMapInfo");
  }

  // convert to jsonable arg
  // ref callback arg
  NSObject* argmapView = mapView;
  
  // primitive callback arg
  NSNumber* argflag = @(flag);
  // ref callback arg
  NSObject* arginfo = info;
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapview_baseIndoorMapWithIn_baseIndoorMapInfo" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"flag": argflag == nil ? [NSNull null] : argflag, @"info": arginfo == nil ? [NSNull null] : arginfo}];
  });
  
}

- (void)onGetOfflineMapState : (int)type withState: (int)state
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"BMKOfflineMapDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"BMKOfflineMapDelegate::onGetOfflineMapState_withState");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argtype = @(type);
  // primitive callback arg
  NSNumber* argstate = @(state);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::BMKOfflineMapDelegate::onGetOfflineMapState_withState" arguments:@{@"type": argtype == nil ? [NSNull null] : argtype, @"state": argstate == nil ? [NSNull null] : argstate}];
  });
  
}

//endregion

@end
