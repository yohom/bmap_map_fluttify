//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler1.h"
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation BmapMapFluttifyPlugin (SubHandler1)
- (NSDictionary<NSString*, Handler>*) getSubHandler1 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"BMKCircle::setCircleWithCenterCoordinate_radius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordValue = (NSValue*) args[@"coord"];
                CLLocationCoordinate2D coord;
                [coordValue getValue:&coord];
                // jsonable arg
                CLLocationDistance radius = [args[@"radius"] doubleValue];
        
                // ref
                BMKCircle* ref = (BMKCircle*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref setCircleWithCenterCoordinate: coord radius: radius];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKCircle::setCircleWithMapRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                BMKMapRect mapRect;
                [mapRectValue getValue:&mapRect];
        
                // ref
                BMKCircle* ref = (BMKCircle*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref setCircleWithMapRect: mapRect];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::customMapStyle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* customMapStyleJsonFilePath = (NSString*) args[@"customMapStyleJsonFilePath"];
        
                // ref
        
        
                // invoke native method
                [BMKMapView customMapStyle: customMapStyleJsonFilePath];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::enableCustomMapStyle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL enable = [args[@"enable"] boolValue];
        
                // ref
        
        
                // invoke native method
                [BMKMapView enableCustomMapStyle: enable];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::setCustomMapStylePath_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* customMapStyleJsonFilePath = (NSString*) args[@"customMapStyleJsonFilePath"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setCustomMapStylePath : customMapStyleJsonFilePath];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::setCustomMapStylePath_mode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* customMapStyleJsonFilePath = (NSString*) args[@"customMapStyleJsonFilePath"];
                // jsonable arg
                int mode = [args[@"mode"] intValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setCustomMapStylePath : customMapStyleJsonFilePath mode: mode];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::setCustomMapStyleEnable_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL enable = [args[@"enable"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setCustomMapStyleEnable : enable];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::setCustomTrafficColorForSmooth_slow_congestion_severeCongestion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* smooth = (UIColor*) args[@"smooth"];
                // ref arg
                UIColor* slow = (UIColor*) args[@"slow"];
                // ref arg
                UIColor* congestion = (UIColor*) args[@"congestion"];
                // ref arg
                UIColor* severeCongestion = (UIColor*) args[@"severeCongestion"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref setCustomTrafficColorForSmooth: smooth slow: slow congestion: congestion severeCongestion: severeCongestion];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::willBackGround_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                [BMKMapView willBackGround];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::didForeGround_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                [BMKMapView didForeGround];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::viewWillAppear_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref viewWillAppear ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::viewWillDisappear_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref viewWillDisappear ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::mapForceRefresh_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref mapForceRefresh ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::zoomIn_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref zoomIn];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::zoomOut_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref zoomOut];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::regionThatFits_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* regionValue = (NSValue*) args[@"region"];
                BMKCoordinateRegion region;
                [regionValue getValue:&region];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BMKCoordinateRegion result = [ref regionThatFits: region];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::setRegion_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* regionValue = (NSValue*) args[@"region"];
                BMKCoordinateRegion region;
                [regionValue getValue:&region];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setRegion : region animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::setCenterCoordinate_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setCenterCoordinate : coordinate animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::takeSnapshot_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                UIImage* result = [ref takeSnapshot];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::takeSnapshot__CGRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* rectValue = (NSValue*) args[@"rect"];
                CGRect rect;
                [rectValue getValue:&rect];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                UIImage* result = [ref takeSnapshot: rect];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::setCompassImage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIImage* image = (UIImage*) args[@"image"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setCompassImage : image];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::setVisibleMapRect_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                BMKMapRect mapRect;
                [mapRectValue getValue:&mapRect];
                // jsonable arg
                BOOL animate = [args[@"animate"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setVisibleMapRect : mapRect animated: animate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::mapRectThatFits_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                BMKMapRect mapRect;
                [mapRectValue getValue:&mapRect];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BMKMapRect result = [ref mapRectThatFits: mapRect];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::setVisibleMapRect_edgePadding_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                BMKMapRect mapRect;
                [mapRectValue getValue:&mapRect];
                // struct arg
                NSValue* insetsValue = (NSValue*) args[@"insets"];
                UIEdgeInsets insets;
                [insetsValue getValue:&insets];
                // jsonable arg
                BOOL animate = [args[@"animate"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setVisibleMapRect : mapRect edgePadding: insets animated: animate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::fitVisibleMapRect_edgePadding_withAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                BMKMapRect mapRect;
                [mapRectValue getValue:&mapRect];
                // struct arg
                NSValue* insetsValue = (NSValue*) args[@"insets"];
                UIEdgeInsets insets;
                [insetsValue getValue:&insets];
                // jsonable arg
                BOOL animate = [args[@"animate"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref fitVisibleMapRect : mapRect edgePadding: insets withAnimated: animate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::mapRectThatFits_edgePadding_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                BMKMapRect mapRect;
                [mapRectValue getValue:&mapRect];
                // struct arg
                NSValue* insetsValue = (NSValue*) args[@"insets"];
                UIEdgeInsets insets;
                [insetsValue getValue:&insets];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BMKMapRect result = [ref mapRectThatFits: mapRect edgePadding: insets];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::convertCoordinate_toPointToView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
                // ref arg
                UIView* view = (UIView*) args[@"view"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                CGPoint result = [ref convertCoordinate: coordinate toPointToView: view];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::convertPoint_toCoordinateFromView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* pointValue = (NSValue*) args[@"point"];
                CGPoint point;
                [pointValue getValue:&point];
                // ref arg
                UIView* view = (UIView*) args[@"view"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                CLLocationCoordinate2D result = [ref convertPoint: point toCoordinateFromView: view];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::convertRegion_toRectToView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* regionValue = (NSValue*) args[@"region"];
                BMKCoordinateRegion region;
                [regionValue getValue:&region];
                // ref arg
                UIView* view = (UIView*) args[@"view"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                CGRect result = [ref convertRegion: region toRectToView: view];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGRect)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::convertRect_toRegionFromView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* rectValue = (NSValue*) args[@"rect"];
                CGRect rect;
                [rectValue getValue:&rect];
                // ref arg
                UIView* view = (UIView*) args[@"view"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BMKCoordinateRegion result = [ref convertRect: rect toRegionFromView: view];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::convertMapRect_toRectToView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                BMKMapRect mapRect;
                [mapRectValue getValue:&mapRect];
                // ref arg
                UIView* view = (UIView*) args[@"view"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                CGRect result = [ref convertMapRect: mapRect toRectToView: view];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGRect)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::convertRect_toMapRectFromView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* rectValue = (NSValue*) args[@"rect"];
                CGRect rect;
                [rectValue getValue:&rect];
                // ref arg
                UIView* view = (UIView*) args[@"view"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BMKMapRect result = [ref convertRect: rect toMapRectFromView: view];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::glPointForMapPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapPointValue = (NSValue*) args[@"mapPoint"];
                BMKMapPoint mapPoint;
                [mapPointValue getValue:&mapPoint];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                CGPoint result = [ref glPointForMapPoint: mapPoint];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::glPointsForMapPoints_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* mapPointsValueList = (NSArray<NSValue*>*) args[@"mapPoints"];
                BMKMapPoint mapPoints[mapPointsValueList.count];
                for (int __i__ = 0; __i__ < mapPointsValueList.count; __i__++) {
                    NSValue* mapPointsValue = (NSValue*) [mapPointsValueList objectAtIndex:__i__];
                    BMKMapPoint mapPointsItem;
                    [mapPointsValue getValue:&mapPointsItem];
                    mapPoints[__i__] = mapPointsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                CGPoint* result = [ref glPointsForMapPoints: mapPoints count: count];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint*)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::setMapCenterToScreenPt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* ptInScreenValue = (NSValue*) args[@"ptInScreen"];
                CGPoint ptInScreen;
                [ptInScreenValue getValue:&ptInScreen];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setMapCenterToScreenPt : ptInScreen];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::getMapStatusFromCoordinateRegion_edgePadding_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* regionValue = (NSValue*) args[@"region"];
                BMKCoordinateRegion region;
                [regionValue getValue:&region];
                // struct arg
                NSValue* insetsValue = (NSValue*) args[@"insets"];
                UIEdgeInsets insets;
                [insetsValue getValue:&insets];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BMKMapStatus* result = [ref getMapStatusFromCoordinateRegion: region edgePadding: insets];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::getMapStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BMKMapStatus* result = [ref getMapStatus];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::setMapStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKMapStatus* mapStatus = (BMKMapStatus*) args[@"mapStatus"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setMapStatus : mapStatus];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::setMapStatus_withAnimation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKMapStatus* mapStatus = (BMKMapStatus*) args[@"mapStatus"];
                // jsonable arg
                BOOL bAnimation = [args[@"bAnimation"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setMapStatus : mapStatus withAnimation: bAnimation];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::setMapStatus_withAnimation_withAnimationTime_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKMapStatus* mapStatus = (BMKMapStatus*) args[@"mapStatus"];
                // jsonable arg
                BOOL bAnimation = [args[@"bAnimation"] boolValue];
                // jsonable arg
                int ulDuration = [args[@"ulDuration"] intValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setMapStatus : mapStatus withAnimation: bAnimation withAnimationTime: ulDuration];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::isSurpportBaiduHeatMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref isSurpportBaiduHeatMap];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::getProjectionMatrix_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                float* result = [ref getProjectionMatrix];
        
                // result
                // return a (value)*
                NSValue* __result__ = [NSValue valueWithPointer:result];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::getViewMatrix_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                float* result = [ref getViewMatrix];
        
                // result
                // return a (value)*
                NSValue* __result__ = [NSValue valueWithPointer:result];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::switchBaseIndoorMapFloor_withID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* strFloor = (NSString*) args[@"strFloor"];
                // jsonable arg
                NSString* strID = (NSString*) args[@"strID"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BMKSwitchIndoorFloorError result = [ref switchBaseIndoorMapFloor: strFloor withID: strID];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::getFocusedBaseIndoorMapInfo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BMKBaseIndoorMapInfo* result = [ref getFocusedBaseIndoorMapInfo];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::updateLocationViewWithParam_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKLocationViewDisplayParam* locationViewDisplayParam = (BMKLocationViewDisplayParam*) args[@"locationViewDisplayParam"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref updateLocationViewWithParam : locationViewDisplayParam];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::updateLocationData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKUserLocation* userLocation = (BMKUserLocation*) args[@"userLocation"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref updateLocationData : userLocation];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::addAnnotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<BMKAnnotation> annotation = (id<BMKAnnotation>) args[@"annotation"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref addAnnotation : annotation];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::addAnnotations_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* annotations = (NSArray<NSObject*>*) args[@"annotations"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref addAnnotations : annotations];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::removeAnnotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<BMKAnnotation> annotation = (id<BMKAnnotation>) args[@"annotation"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref removeAnnotation : annotation];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::removeAnnotations_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* annotations = (NSArray<NSObject*>*) args[@"annotations"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref removeAnnotations : annotations];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::viewForAnnotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<BMKAnnotation> annotation = (id<BMKAnnotation>) args[@"annotation"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BMKAnnotationView* result = [ref viewForAnnotation: annotation];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::dequeueReusableAnnotationViewWithIdentifier_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* identifier = (NSString*) args[@"identifier"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BMKAnnotationView* result = [ref dequeueReusableAnnotationViewWithIdentifier: identifier];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::selectAnnotation_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<BMKAnnotation> annotation = (id<BMKAnnotation>) args[@"annotation"];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref selectAnnotation : annotation animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::deselectAnnotation_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<BMKAnnotation> annotation = (id<BMKAnnotation>) args[@"annotation"];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref deselectAnnotation : annotation animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::showAnnotations_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* annotations = (NSArray<NSObject*>*) args[@"annotations"];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref showAnnotations : annotations animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::annotationsInCoordinateBounds_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* boundsValue = (NSValue*) args[@"bounds"];
                BMKCoordinateBounds bounds;
                [boundsValue getValue:&bounds];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                NSArray* result = [ref annotationsInCoordinateBounds: bounds];
        
                // result
                // 返回值: 列表
                NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [__result__ addObject: object];
                }
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::addOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<BMKOverlay> overlay = (id<BMKOverlay>) args[@"overlay"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref addOverlay : overlay];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::addOverlays_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* overlays = (NSArray<NSObject*>*) args[@"overlays"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref addOverlays : overlays];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::removeOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<BMKOverlay> overlay = (id<BMKOverlay>) args[@"overlay"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref removeOverlay : overlay];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::removeOverlays_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* overlays = (NSArray<NSObject*>*) args[@"overlays"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref removeOverlays : overlays];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::insertOverlay_atIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<BMKOverlay> overlay = (id<BMKOverlay>) args[@"overlay"];
                // jsonable arg
                NSUInteger index = [args[@"index"] unsignedIntegerValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref insertOverlay : overlay atIndex: index];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::exchangeOverlayAtIndex_withOverlayAtIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSUInteger index1 = [args[@"index1"] unsignedIntegerValue];
                // jsonable arg
                NSUInteger index2 = [args[@"index2"] unsignedIntegerValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref exchangeOverlayAtIndex : index1 withOverlayAtIndex: index2];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::insertOverlay_aboveOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<BMKOverlay> overlay = (id<BMKOverlay>) args[@"overlay"];
                // ref arg
                id<BMKOverlay> sibling = (id<BMKOverlay>) args[@"sibling"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref insertOverlay : overlay aboveOverlay: sibling];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::insertOverlay_belowOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<BMKOverlay> overlay = (id<BMKOverlay>) args[@"overlay"];
                // ref arg
                id<BMKOverlay> sibling = (id<BMKOverlay>) args[@"sibling"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref insertOverlay : overlay belowOverlay: sibling];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::viewForOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<BMKOverlay> overlay = (id<BMKOverlay>) args[@"overlay"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                BMKOverlayView* result = [ref viewForOverlay: overlay];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::addHeatMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKHeatMap* heatMap = (BMKHeatMap*) args[@"heatMap"];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref addHeatMap : heatMap];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKMapView::removeHeatMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
                // invoke native method
                [ref removeHeatMap ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKArclineView::initWithArcline_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKArcline* arcline = (BMKArcline*) args[@"arcline"];
        
                // ref
                BMKArclineView* ref = (BMKArclineView*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithArcline: arcline];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKPolygon::polygonWithPoints_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
        
        
                // invoke native method
                BMKPolygon* result = [BMKPolygon polygonWithPoints: points count: count];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKPolygon::polygonWithCoordinates_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsValueList.count];
                for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                    NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[__i__] = coordsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
        
        
                // invoke native method
                BMKPolygon* result = [BMKPolygon polygonWithCoordinates: coords count: count];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKPolygon::setPolygonWithPoints_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSInteger count = [args[@"count"] longValue];
        
                // ref
                BMKPolygon* ref = (BMKPolygon*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref setPolygonWithPoints: points count: count];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKPolygon::setPolygonWithCoordinates_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsValueList.count];
                for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                    NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[__i__] = coordsItem;
                }
                // jsonable arg
                NSInteger count = [args[@"count"] longValue];
        
                // ref
                BMKPolygon* ref = (BMKPolygon*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref setPolygonWithCoordinates: coords count: count];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKPolygonView::initWithPolygon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKPolygon* polygon = (BMKPolygon*) args[@"polygon"];
        
                // ref
                BMKPolygonView* ref = (BMKPolygonView*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithPolygon: polygon];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::setOverlayGeometryDelegate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // id arg
                id delegate;
                // jsonable
                if ([args[@"delegate"] isKindOfClass:[NSNumber class]]
                        || [args[@"delegate"] isKindOfClass:[NSString class]]
                        || [args[@"delegate"] isKindOfClass:[NSArray class]]
                        || [args[@"delegate"] isKindOfClass:[NSDictionary class]]) {
                    delegate = args[@"delegate"];
                }
                // non jsonable
                else {
                    delegate = HEAP[@([args[@"delegate"] integerValue])];
                }
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref setOverlayGeometryDelegate : delegate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::initWithOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<BMKOverlay> overlay = (id<BMKOverlay>) args[@"overlay"];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithOverlay: overlay];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::pointForMapPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapPointValue = (NSValue*) args[@"mapPoint"];
                BMKMapPoint mapPoint;
                [mapPointValue getValue:&mapPoint];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                CGPoint result = [ref pointForMapPoint: mapPoint];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::mapPointForPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* pointValue = (NSValue*) args[@"point"];
                CGPoint point;
                [pointValue getValue:&point];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                BMKMapPoint result = [ref mapPointForPoint: point];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapPoint)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::rectForMapRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                BMKMapRect mapRect;
                [mapRectValue getValue:&mapRect];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                CGRect result = [ref rectForMapRect: mapRect];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGRect)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::mapRectForRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* rectValue = (NSValue*) args[@"rect"];
                CGRect rect;
                [rectValue getValue:&rect];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                BMKMapRect result = [ref mapRectForRect: rect];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::canDrawMapRect_zoomScale_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                BMKMapRect mapRect;
                [mapRectValue getValue:&mapRect];
                // jsonable arg
                CGFloat zoomScale = [args[@"zoomScale"] floatValue];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref canDrawMapRect: mapRect zoomScale: zoomScale];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::setNeedsDisplayInMapRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                BMKMapRect mapRect;
                [mapRectValue getValue:&mapRect];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref setNeedsDisplayInMapRect : mapRect];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::renderLinesWithPoints_pointCount_strokeColor_lineWidth_looped_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
                // ref arg
                UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
                // jsonable arg
                BOOL looped = [args[@"looped"] boolValue];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::renderTexturedLinesWithPoints_pointCount_lineWidth_textureID_looped_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
                // jsonable arg
                GLuint textureID = [args[@"textureID"] unsignedIntegerValue];
                // jsonable arg
                BOOL looped = [args[@"looped"] boolValue];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref renderTexturedLinesWithPoints : points pointCount: pointCount lineWidth: lineWidth textureID: textureID looped: looped];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::renderLinesWithPoints_pointCount_strokeColor_lineWidth_looped_lineDashType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
                // ref arg
                UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
                // jsonable arg
                BOOL looped = [args[@"looped"] boolValue];
                // enum arg
                BMKLineDashType lineDashType = (BMKLineDashType) [args[@"lineDashType"] integerValue];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped lineDashType: lineDashType];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::renderLinesWithPoints_pointCount_strokeColor_lineWidth_looped_lineDash_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
                // ref arg
                UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
                // jsonable arg
                BOOL looped = [args[@"looped"] boolValue];
                // jsonable arg
                BOOL lineDash = [args[@"lineDash"] boolValue];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped lineDash: lineDash];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::renderTexturedLinesWithPartPoints_lineWidth_textureIndexs_isFocus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* partPt = (NSArray<NSObject*>*) args[@"partPt"];
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
                // list arg
                NSArray<NSObject*>* textureIndexs = (NSArray<NSObject*>*) args[@"textureIndexs"];
                // jsonable arg
                BOOL isFoucs = [args[@"isFoucs"] boolValue];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref renderTexturedLinesWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs isFocus: isFoucs];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::renderTexturedLinesWithPartPoints_lineWidth_textureIndexs_isFocus_tileTexture_keepScale_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* partPt = (NSArray<NSObject*>*) args[@"partPt"];
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
                // list arg
                NSArray<NSObject*>* textureIndexs = (NSArray<NSObject*>*) args[@"textureIndexs"];
                // jsonable arg
                BOOL isFoucs = [args[@"isFoucs"] boolValue];
                // jsonable arg
                BOOL tileTexture = [args[@"tileTexture"] boolValue];
                // jsonable arg
                BOOL keepscale = [args[@"keepscale"] boolValue];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref renderTexturedLinesWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs isFocus: isFoucs tileTexture: tileTexture keepScale: keepscale];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::renderTexturedLinesWithPoints_pointCount_lineWidth_textureID_strokeColor_looped_tileTexture_keepScale_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
                // jsonable arg
                GLuint textureID = [args[@"textureID"] unsignedIntegerValue];
                // ref arg
                UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
                // jsonable arg
                BOOL looped = [args[@"looped"] boolValue];
                // jsonable arg
                BOOL tileTexture = [args[@"tileTexture"] boolValue];
                // jsonable arg
                BOOL keepScale = [args[@"keepScale"] boolValue];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref renderTexturedLinesWithPoints : points pointCount: pointCount lineWidth: lineWidth textureID: textureID strokeColor: strokeColor looped: looped tileTexture: tileTexture keepScale: keepScale];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::renderMultiTexturedPolyLineWithPartPoints_lineWidth_textureIndexs_isFoucs_keepScale_lineJoinType_lineCapType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* partPt = (NSArray<NSObject*>*) args[@"partPt"];
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
                // jsonable arg
                NSArray<NSNumber*>* textureIndexs = (NSArray<NSNumber*>*) args[@"textureIndexs"];
                // jsonable arg
                BOOL isFoucs = [args[@"isFoucs"] boolValue];
                // jsonable arg
                BOOL keepScale = [args[@"keepScale"] boolValue];
                // enum arg
                BMKLineJoinType lineJoinType = (BMKLineJoinType) [args[@"lineJoinType"] integerValue];
                // enum arg
                BMKLineCapType lineCapType = (BMKLineCapType) [args[@"lineCapType"] integerValue];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref renderMultiTexturedPolyLineWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs isFoucs: isFoucs keepScale: keepScale lineJoinType: lineJoinType lineCapType: lineCapType];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::renderMultiDashPolyLineWithPartPoints_lineWidth_textureIndexs_lineDashType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* partPt = (NSArray<NSObject*>*) args[@"partPt"];
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
                // jsonable arg
                NSArray<NSNumber*>* textureIndexs = (NSArray<NSNumber*>*) args[@"textureIndexs"];
                // enum arg
                BMKLineDashType lineDashType = (BMKLineDashType) [args[@"lineDashType"] integerValue];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref renderMultiDashPolyLineWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs lineDashType: lineDashType];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::renderRegionWithPoints_pointCount_fillColor_usingTriangleFan_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
                // ref arg
                UIColor* fillColor = (UIColor*) args[@"fillColor"];
                // jsonable arg
                BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref renderRegionWithPoints : points pointCount: pointCount fillColor: fillColor usingTriangleFan: usingTriangleFan];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::renderATRegionWithPoint_pointCount_fillColor_usingTriangleFan_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
                // ref arg
                UIColor* fillColor = (UIColor*) args[@"fillColor"];
                // jsonable arg
                BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref renderATRegionWithPoint : points pointCount: pointCount fillColor: fillColor usingTriangleFan: usingTriangleFan];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::rendeCircleWithPoints_pointCount_lineWidth_fillColor_strokeColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
                // ref arg
                UIColor* fillColor = (UIColor*) args[@"fillColor"];
                // ref arg
                UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref rendeCircleWithPoints : points pointCount: pointCount lineWidth: lineWidth fillColor: fillColor strokeColor: strokeColor];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::rendePolygonWithPoints_pointCount_lineWidth_fillColor_strokeColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
                // ref arg
                UIColor* fillColor = (UIColor*) args[@"fillColor"];
                // ref arg
                UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref rendePolygonWithPoints : points pointCount: pointCount lineWidth: lineWidth fillColor: fillColor strokeColor: strokeColor];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::glRender_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref glRender ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::loadStrokeTextureImage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIImage* textureImage = (UIImage*) args[@"textureImage"];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                GLuint result = [ref loadStrokeTextureImage: textureImage];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayView::loadStrokeTextureImages_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<UIImage*>* textureImages = (NSArray<UIImage*>*) args[@"textureImages"];
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref loadStrokeTextureImages: textureImages];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKGroundOverlayView::initWithGroundOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKGroundOverlay* groundOverlay = (BMKGroundOverlay*) args[@"groundOverlay"];
        
                // ref
                BMKGroundOverlayView* ref = (BMKGroundOverlayView*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithGroundOverlay: groundOverlay];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKAnnotationView::initWithAnnotation_reuseIdentifier_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<BMKAnnotation> annotation = (id<BMKAnnotation>) args[@"annotation"];
                // jsonable arg
                NSString* reuseIdentifier = (NSString*) args[@"reuseIdentifier"];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithAnnotation: annotation reuseIdentifier: reuseIdentifier];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKAnnotationView::prepareForReuse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
        
                // invoke native method
                [ref prepareForReuse ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKAnnotationView::setSelected_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL selected = [args[@"selected"] boolValue];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
        
                // invoke native method
                [ref setSelected : selected animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlay::intersectsMapRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                BMKMapRect mapRect;
                [mapRectValue getValue:&mapRect];
        
                // ref
                id<BMKOverlay> ref = (id<BMKOverlay>) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref intersectsMapRect: mapRect];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOfflineMap::scan_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL deleteFailedr = [args[@"deleteFailedr"] boolValue];
        
                // ref
                BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref scan: deleteFailedr];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOfflineMap::start_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int cityID = [args[@"cityID"] intValue];
        
                // ref
                BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref start: cityID];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOfflineMap::update_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int cityID = [args[@"cityID"] intValue];
        
                // ref
                BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref update: cityID];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOfflineMap::pause_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int cityID = [args[@"cityID"] intValue];
        
                // ref
                BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref pause: cityID];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOfflineMap::remove_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int cityID = [args[@"cityID"] intValue];
        
                // ref
                BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref remove: cityID];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOfflineMap::getHotCityList_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
                // invoke native method
                NSArray* result = [ref getHotCityList];
        
                // result
                // 返回值: 列表
                NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [__result__ addObject: object];
                }
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOfflineMap::getOfflineCityList_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
                // invoke native method
                NSArray* result = [ref getOfflineCityList];
        
                // result
                // 返回值: 列表
                NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [__result__ addObject: object];
                }
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOfflineMap::searchCity_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* cityName = (NSString*) args[@"cityName"];
        
                // ref
                BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
                // invoke native method
                NSArray* result = [ref searchCity: cityName];
        
                // result
                // 返回值: 列表
                NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [__result__ addObject: object];
                }
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOfflineMap::getAllUpdateInfo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
                // invoke native method
                NSArray* result = [ref getAllUpdateInfo];
        
                // result
                // 返回值: 列表
                NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [__result__ addObject: object];
                }
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOfflineMap::getUpdateInfo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int cityID = [args[@"cityID"] intValue];
        
                // ref
                BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
                // invoke native method
                BMKOLUpdateElement* result = [ref getUpdateInfo: cityID];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationReGeocode::initWithReGeocodeString_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                NSData* reGeocodeString = (NSData*) args[@"reGeocodeString"];
        
                // ref
                BMKLocationReGeocode* ref = (BMKLocationReGeocode*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithReGeocodeString: reGeocodeString];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationReGeocode::initWithJsonString_withHighAccuracy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                NSData* jsonString = (NSData*) args[@"jsonString"];
                // jsonable arg
                BOOL highAcc = [args[@"highAcc"] boolValue];
        
                // ref
                BMKLocationReGeocode* ref = (BMKLocationReGeocode*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithJsonString: jsonString withHighAccuracy: highAcc];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationManager::startUpdatingLocation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
        
                // invoke native method
                [ref startUpdatingLocation ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationManager::stopUpdatingLocation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
        
                // invoke native method
                [ref stopUpdatingLocation ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationManager::requestNetworkState_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
        
                // invoke native method
                [ref requestNetworkState ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationManager::headingAvailable_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                BOOL result = [BMKLocationManager headingAvailable];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationManager::startUpdatingHeading_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
        
                // invoke native method
                [ref startUpdatingHeading ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationManager::stopUpdatingHeading_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
        
                // invoke native method
                [ref stopUpdatingHeading ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationManager::tryIndoorLocation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
        
                // invoke native method
                [ref tryIndoorLocation ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationManager::stopIndoorLocation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
        
                // invoke native method
                [ref stopIndoorLocation ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationManager::BMKLocationCoordinateConvert_SrcType_DesType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
                // enum arg
                BMKLocationCoordinateType srctype = (BMKLocationCoordinateType) [args[@"srctype"] integerValue];
                // enum arg
                BMKLocationCoordinateType destype = (BMKLocationCoordinateType) [args[@"destype"] integerValue];
        
                // ref
        
        
                // invoke native method
                CLLocationCoordinate2D result = [BMKLocationManager BMKLocationCoordinateConvert: coordinate SrcType: srctype DesType: destype];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationManager::BMKLocationDataAvailableForCoordinate_withCoorType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
                // enum arg
                BMKLocationCoordinateType coortype = (BMKLocationCoordinateType) [args[@"coortype"] integerValue];
        
                // ref
        
        
                // invoke native method
                BOOL result = [BMKLocationManager BMKLocationDataAvailableForCoordinate: coordinate withCoorType: coortype];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationAuth::sharedInstance_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                BMKLocationAuth* result = [BMKLocationAuth sharedInstance];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationPoiRegion::initWithDictionary_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSDictionary* dictionary = (NSDictionary*) args[@"dictionary"];
        
                // ref
                BMKLocationPoiRegion* ref = (BMKLocationPoiRegion*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithDictionary: dictionary];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationPoi::initWithDictionary_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSDictionary* dictionary = (NSDictionary*) args[@"dictionary"];
        
                // ref
                BMKLocationPoi* ref = (BMKLocationPoi*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithDictionary: dictionary];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKLocationPoi::initWithTwoDictionary_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSDictionary* dictionary = (NSDictionary*) args[@"dictionary"];
        
                // ref
                BMKLocationPoi* ref = (BMKLocationPoi*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithTwoDictionary: dictionary];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKGeoFenceRegion::judgeStatusWithCoor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coorValue = (NSValue*) args[@"coor"];
                CLLocationCoordinate2D coor;
                [coorValue getValue:&coor];
        
                // ref
                BMKGeoFenceRegion* ref = (BMKGeoFenceRegion*) args[@"__this__"];
        
                // invoke native method
                BMKGeoFenceRegionStatus result = [ref judgeStatusWithCoor: coor];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKGeoFenceCircleRegion::initWithCustomID_identityID_center_radius_coor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* customid = (NSString*) args[@"customid"];
                // jsonable arg
                NSString* identityid = (NSString*) args[@"identityid"];
                // struct arg
                NSValue* centerValue = (NSValue*) args[@"center"];
                CLLocationCoordinate2D center;
                [centerValue getValue:&center];
                // jsonable arg
                CLLocationDistance radius = [args[@"radius"] doubleValue];
                // enum arg
                BMKLocationCoordinateType type = (BMKLocationCoordinateType) [args[@"type"] integerValue];
        
                // ref
                BMKGeoFenceCircleRegion* ref = (BMKGeoFenceCircleRegion*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithCustomID: customid identityID: identityid center: center radius: radius coor: type];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKGeoFencePolygonRegion::initWithCustomID_identityID_coor_count_coor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* customid = (NSString*) args[@"customid"];
                // jsonable arg
                NSString* identityid = (NSString*) args[@"identityid"];
                // list arg struct
                NSArray<NSValue*>* coorValueList = (NSArray<NSValue*>*) args[@"coor"];
                CLLocationCoordinate2D coor[coorValueList.count];
                for (int __i__ = 0; __i__ < coorValueList.count; __i__++) {
                    NSValue* coorValue = (NSValue*) [coorValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D coorItem;
                    [coorValue getValue:&coorItem];
                    coor[__i__] = coorItem;
                }
                // jsonable arg
                NSInteger count = [args[@"count"] longValue];
                // enum arg
                BMKLocationCoordinateType type = (BMKLocationCoordinateType) [args[@"type"] integerValue];
        
                // ref
                BMKGeoFencePolygonRegion* ref = (BMKGeoFencePolygonRegion*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithCustomID: customid identityID: identityid coor: coor count: count coor: type];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKGeoFenceManager::addCircleRegionForMonitoringWithCenter_radius_coorType_customID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* centerValue = (NSValue*) args[@"center"];
                CLLocationCoordinate2D center;
                [centerValue getValue:&center];
                // jsonable arg
                CLLocationDistance radius = [args[@"radius"] doubleValue];
                // enum arg
                BMKLocationCoordinateType type = (BMKLocationCoordinateType) [args[@"type"] integerValue];
                // jsonable arg
                NSString* customID = (NSString*) args[@"customID"];
        
                // ref
                BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
        
                // invoke native method
                [ref addCircleRegionForMonitoringWithCenter : center radius: radius coorType: type customID: customID];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKGeoFenceManager::addPolygonRegionForMonitoringWithCoordinates_count_coorType_customID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* coordinatesValueList = (NSArray<NSValue*>*) args[@"coordinates"];
                CLLocationCoordinate2D coordinates[coordinatesValueList.count];
                for (int __i__ = 0; __i__ < coordinatesValueList.count; __i__++) {
                    NSValue* coordinatesValue = (NSValue*) [coordinatesValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D coordinatesItem;
                    [coordinatesValue getValue:&coordinatesItem];
                    coordinates[__i__] = coordinatesItem;
                }
                // jsonable arg
                NSInteger count = [args[@"count"] longValue];
                // enum arg
                BMKLocationCoordinateType type = (BMKLocationCoordinateType) [args[@"type"] integerValue];
                // jsonable arg
                NSString* customID = (NSString*) args[@"customID"];
        
                // ref
                BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
        
                // invoke native method
                [ref addPolygonRegionForMonitoringWithCoordinates : coordinates count: count coorType: type customID: customID];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKGeoFenceManager::geoFenceRegionsWithCustomID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* customID = (NSString*) args[@"customID"];
        
                // ref
                BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
        
                // invoke native method
                NSArray* result = [ref geoFenceRegionsWithCustomID: customID];
        
                // result
                // 返回值: 列表
                NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [__result__ addObject: object];
                }
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKGeoFenceManager::removeTheGeoFenceRegion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKGeoFenceRegion* region = (BMKGeoFenceRegion*) args[@"region"];
        
                // ref
                BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
        
                // invoke native method
                [ref removeTheGeoFenceRegion : region];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKGeoFenceManager::removeGeoFenceRegionsWithCustomID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* customID = (NSString*) args[@"customID"];
        
                // ref
                BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
        
                // invoke native method
                [ref removeGeoFenceRegionsWithCustomID : customID];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKGeoFenceManager::removeAllGeoFenceRegions_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
        
                // invoke native method
                [ref removeAllGeoFenceRegions ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKAnnotation::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotation::get_coordinate");
            }
        
            // ref object
            id<BMKAnnotation> ref = (id<BMKAnnotation>) args[@"__this__"];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.coordinate;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"BMKTileLayerView::get_tileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKTileLayerView::get_tileLayer");
            }
        
            // ref object
            BMKTileLayerView* ref = (BMKTileLayerView*) args[@"__this__"];
        
            // invoke native method
            BMKTileLayer* result = ref.tileLayer;
        
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKOverlayPathView::get_fillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayPathView::get_fillColor");
            }
        
            // ref object
            BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
        
            // invoke native method
            UIColor* result = ref.fillColor;
        
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKOverlayPathView::get_strokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayPathView::get_strokeColor");
            }
        
            // ref object
            BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
        
            // invoke native method
            UIColor* result = ref.strokeColor;
        
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKOverlayPathView::get_lineWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayPathView::get_lineWidth");
            }
        
            // ref object
            BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
        
            // invoke native method
            CGFloat result = ref.lineWidth;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKOverlayPathView::get_miterLimit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayPathView::get_miterLimit");
            }
        
            // ref object
            BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
        
            // invoke native method
            CGFloat result = ref.miterLimit;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKOverlayPathView::get_lineDashPhase": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayPathView::get_lineDashPhase");
            }
        
            // ref object
            BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
        
            // invoke native method
            CGFloat result = ref.lineDashPhase;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKOverlayPathView::get_lineDashPattern": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayPathView::get_lineDashPattern");
            }
        
            // ref object
            BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
        
            // invoke native method
            NSArray* result = ref.lineDashPattern;
        
            // 返回值: 列表
            NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [__result__ addObject: object];
            }
        
            methodResult(__result__);
        },
        
        @"BMKGroundOverlay::get_pt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGroundOverlay::get_pt");
            }
        
            // ref object
            BMKGroundOverlay* ref = (BMKGroundOverlay*) args[@"__this__"];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.pt;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"BMKGroundOverlay::get_anchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGroundOverlay::get_anchor");
            }
        
            // ref object
            BMKGroundOverlay* ref = (BMKGroundOverlay*) args[@"__this__"];
        
            // invoke native method
            CGPoint result = ref.anchor;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
            methodResult(__result__);
        },
        
        @"BMKGroundOverlay::get_bound": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGroundOverlay::get_bound");
            }
        
            // ref object
            BMKGroundOverlay* ref = (BMKGroundOverlay*) args[@"__this__"];
        
            // invoke native method
            BMKCoordinateBounds result = ref.bound;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKCoordinateBounds)];
        
            methodResult(__result__);
        },
        
        @"BMKGroundOverlay::get_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGroundOverlay::get_icon");
            }
        
            // ref object
            BMKGroundOverlay* ref = (BMKGroundOverlay*) args[@"__this__"];
        
            // invoke native method
            UIImage* result = ref.icon;
        
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKPolyline::get_textureIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPolyline::get_textureIndex");
            }
        
            // ref object
            BMKPolyline* ref = (BMKPolyline*) args[@"__this__"];
        
            // invoke native method
            NSArray<NSNumber*>* result = ref.textureIndex;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKCircleView::get_circle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCircleView::get_circle");
            }
        
            // ref object
            BMKCircleView* ref = (BMKCircleView*) args[@"__this__"];
        
            // invoke native method
            BMKCircle* result = ref.circle;
        
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKPointAnnotation::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPointAnnotation::get_coordinate");
            }
        
            // ref object
            BMKPointAnnotation* ref = (BMKPointAnnotation*) args[@"__this__"];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.coordinate;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"BMKPointAnnotation::get_isLockedToScreen": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPointAnnotation::get_isLockedToScreen");
            }
        
            // ref object
            BMKPointAnnotation* ref = (BMKPointAnnotation*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.isLockedToScreen;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKPointAnnotation::get_screenPointToLock": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPointAnnotation::get_screenPointToLock");
            }
        
            // ref object
            BMKPointAnnotation* ref = (BMKPointAnnotation*) args[@"__this__"];
        
            // invoke native method
            CGPoint result = ref.screenPointToLock;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
            methodResult(__result__);
        },
        
        @"BMKGradient::get_mColors": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGradient::get_mColors");
            }
        
            // ref object
            BMKGradient* ref = (BMKGradient*) args[@"__this__"];
        
            // invoke native method
            NSArray* result = ref.mColors;
        
            // 返回值: 列表
            NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [__result__ addObject: object];
            }
        
            methodResult(__result__);
        },
        
        @"BMKGradient::get_mStartPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGradient::get_mStartPoints");
            }
        
            // ref object
            BMKGradient* ref = (BMKGradient*) args[@"__this__"];
        
            // invoke native method
            NSArray* result = ref.mStartPoints;
        
            // 返回值: 列表
            NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [__result__ addObject: object];
            }
        
            methodResult(__result__);
        },
        
        @"BMKMultiPoint::get_points": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMultiPoint::get_points");
            }
        
            // ref object
            BMKMultiPoint* ref = (BMKMultiPoint*) args[@"__this__"];
        
            // invoke native method
            BMKMapPoint* result = ref.points;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapPoint*)];
        
            methodResult(__result__);
        },
        
        @"BMKMultiPoint::get_pointCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMultiPoint::get_pointCount");
            }
        
            // ref object
            BMKMultiPoint* ref = (BMKMultiPoint*) args[@"__this__"];
        
            // invoke native method
            NSUInteger result = ref.pointCount;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKBaseIndoorMapInfo::get_strID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKBaseIndoorMapInfo::get_strID");
            }
        
            // ref object
            BMKBaseIndoorMapInfo* ref = (BMKBaseIndoorMapInfo*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.strID;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKBaseIndoorMapInfo::get_strFloor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKBaseIndoorMapInfo::get_strFloor");
            }
        
            // ref object
            BMKBaseIndoorMapInfo* ref = (BMKBaseIndoorMapInfo*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.strFloor;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKBaseIndoorMapInfo::get_arrStrFloors": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKBaseIndoorMapInfo::get_arrStrFloors");
            }
        
            // ref object
            BMKBaseIndoorMapInfo* ref = (BMKBaseIndoorMapInfo*) args[@"__this__"];
        
            // invoke native method
            NSMutableArray* result = ref.arrStrFloors;
        
            // 返回值: 列表
            NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [__result__ addObject: object];
            }
        
            methodResult(__result__);
        },
        
        @"BMKTileLayer::get_minZoom": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKTileLayer::get_minZoom");
            }
        
            // ref object
            BMKTileLayer* ref = (BMKTileLayer*) args[@"__this__"];
        
            // invoke native method
            NSInteger result = ref.minZoom;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKTileLayer::get_maxZoom": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKTileLayer::get_maxZoom");
            }
        
            // ref object
            BMKTileLayer* ref = (BMKTileLayer*) args[@"__this__"];
        
            // invoke native method
            NSInteger result = ref.maxZoom;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKTileLayer::get_visibleMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKTileLayer::get_visibleMapRect");
            }
        
            // ref object
            BMKTileLayer* ref = (BMKTileLayer*) args[@"__this__"];
        
            // invoke native method
            BMKMapRect result = ref.visibleMapRect;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        
        @"BMKURLTileLayer::get_URLTemplate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKURLTileLayer::get_URLTemplate");
            }
        
            // ref object
            BMKURLTileLayer* ref = (BMKURLTileLayer*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.URLTemplate;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKPolylineView::get_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPolylineView::get_polyline");
            }
        
            // ref object
            BMKPolylineView* ref = (BMKPolylineView*) args[@"__this__"];
        
            // invoke native method
            BMKPolyline* result = ref.polyline;
        
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKPolylineView::get_isFocus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPolylineView::get_isFocus");
            }
        
            // ref object
            BMKPolylineView* ref = (BMKPolylineView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.isFocus;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKPinAnnotationView::get_pinColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPinAnnotationView::get_pinColor");
            }
        
            // ref object
            BMKPinAnnotationView* ref = (BMKPinAnnotationView*) args[@"__this__"];
        
            // invoke native method
            NSUInteger result = ref.pinColor;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKPinAnnotationView::get_animatesDrop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPinAnnotationView::get_animatesDrop");
            }
        
            // ref object
            BMKPinAnnotationView* ref = (BMKPinAnnotationView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.animatesDrop;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKCircle::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCircle::get_coordinate");
            }
        
            // ref object
            BMKCircle* ref = (BMKCircle*) args[@"__this__"];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.coordinate;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"BMKCircle::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCircle::get_radius");
            }
        
            // ref object
            BMKCircle* ref = (BMKCircle*) args[@"__this__"];
        
            // invoke native method
            CLLocationDistance result = ref.radius;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKCircle::get_boundingMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCircle::get_boundingMapRect");
            }
        
            // ref object
            BMKCircle* ref = (BMKCircle*) args[@"__this__"];
        
            // invoke native method
            BMKMapRect result = ref.boundingMapRect;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        
        @"BMKMapPoi::get_text": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapPoi::get_text");
            }
        
            // ref object
            BMKMapPoi* ref = (BMKMapPoi*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.text;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKMapPoi::get_pt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapPoi::get_pt");
            }
        
            // ref object
            BMKMapPoi* ref = (BMKMapPoi*) args[@"__this__"];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.pt;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"BMKMapPoi::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapPoi::get_uid");
            }
        
            // ref object
            BMKMapPoi* ref = (BMKMapPoi*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.uid;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_mapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_mapType");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            BMKMapType result = ref.mapType;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_region": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_region");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            BMKCoordinateRegion result = ref.region;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_limitMapRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_limitMapRegion");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            BMKCoordinateRegion result = ref.limitMapRegion;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_compassPosition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_compassPosition");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            CGPoint result = ref.compassPosition;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_compassSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_compassSize");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            CGSize result = ref.compassSize;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGSize)];
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_centerCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_centerCoordinate");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.centerCoordinate;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_zoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_zoomLevel");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            float result = ref.zoomLevel;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_minZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_minZoomLevel");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            float result = ref.minZoomLevel;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_maxZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_maxZoomLevel");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            float result = ref.maxZoomLevel;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_rotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_rotation");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            int result = ref.rotation;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_overlooking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_overlooking");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            int result = ref.overlooking;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_minOverlooking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_minOverlooking");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            int result = ref.minOverlooking;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_isBuildingsEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_isBuildingsEnabled");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.buildingsEnabled;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_showMapPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_showMapPoi");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.showMapPoi;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_isTrafficEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_isTrafficEnabled");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.trafficEnabled;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_isBaiduHeatMapEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_isBaiduHeatMapEnabled");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.baiduHeatMapEnabled;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_gesturesEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_gesturesEnabled");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.gesturesEnabled;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_isZoomEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_isZoomEnabled");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.zoomEnabled;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_isZoomEnabledWithTap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_isZoomEnabledWithTap");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.zoomEnabledWithTap;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_isScrollEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_isScrollEnabled");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.scrollEnabled;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_isOverlookEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_isOverlookEnabled");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.overlookEnabled;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_isRotateEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_isRotateEnabled");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.rotateEnabled;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_forceTouchEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_forceTouchEnabled");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.forceTouchEnabled;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKMapView::get_showMapScaleBar": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::get_showMapScaleBar");
            }
        
            // ref object
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.showMapScaleBar;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
    };
}

@end
