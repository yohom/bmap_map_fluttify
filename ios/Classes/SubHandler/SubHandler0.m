//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler0.h"
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation BmapMapFluttifyPlugin (SubHandler0)
- (NSDictionary<NSString*, Handler>*) getSubHandler0 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"BMKActionPaopaoView::initWithCustomView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            UIView* customView = (UIView*) args[@"customView"];
        
            // ref
            BMKActionPaopaoView* ref = (BMKActionPaopaoView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKActionPaopaoView@%@::initWithCustomView(%@)", args[@"refId"], args[@"customView"]);
            }
        
            // invoke native method
            id result = [ref initWithCustomView: customView];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKAnnotation::title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            id<BMKAnnotation> ref = (id<BMKAnnotation>) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKAnnotation@%@::title()", args[@"refId"]);
            }
        
            // invoke native method
            NSString* result = [ref title];
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKAnnotation::subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            id<BMKAnnotation> ref = (id<BMKAnnotation>) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKAnnotation@%@::subtitle()", args[@"refId"]);
            }
        
            // invoke native method
            NSString* result = [ref subtitle];
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKAnnotation::setCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* newCoordinateValue = (NSValue*) args[@"newCoordinate"];
            CLLocationCoordinate2D newCoordinate;
            [newCoordinateValue getValue:&newCoordinate];
        
            // ref
            id<BMKAnnotation> ref = (id<BMKAnnotation>) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKAnnotation@%@::setCoordinate(%@)", args[@"refId"], args[@"newCoordinate"]);
            }
        
            // invoke native method
            [ref setCoordinate : newCoordinate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKTileLayerView::initWithTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKTileLayer* tileLayer = (BMKTileLayer*) args[@"tileLayer"];
        
            // ref
            BMKTileLayerView* ref = (BMKTileLayerView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKTileLayerView@%@::initWithTileLayer(%@)", args[@"refId"], args[@"tileLayer"]);
            }
        
            // invoke native method
            id result = [ref initWithTileLayer: tileLayer];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKOverlayPathView::createPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayPathView@%@::createPath()", args[@"refId"]);
            }
        
            // invoke native method
            [ref createPath ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayPathView::invalidatePath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayPathView@%@::invalidatePath()", args[@"refId"]);
            }
        
            // invoke native method
            [ref invalidatePath ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKGroundOverlay::groundOverlayWithPosition_zoomLevel_anchor_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* positionValue = (NSValue*) args[@"position"];
            CLLocationCoordinate2D position;
            [positionValue getValue:&position];
            // jsonable arg
            CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
            // struct arg
            NSValue* anchorValue = (NSValue*) args[@"anchor"];
            CGPoint anchor;
            [anchorValue getValue:&anchor];
            // ref arg
            UIImage* icon = (UIImage*) args[@"icon"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGroundOverlay::groundOverlayWithPosition(%@, %@, %@, %@)", args[@"position"], args[@"zoomLevel"], args[@"anchor"], args[@"icon"]);
            }
        
            // invoke native method
            BMKGroundOverlay* result = [BMKGroundOverlay groundOverlayWithPosition: position zoomLevel: zoomLevel anchor: anchor icon: icon];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKGroundOverlay::groundOverlayWithBounds_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* boundsValue = (NSValue*) args[@"bounds"];
            BMKCoordinateBounds bounds;
            [boundsValue getValue:&bounds];
            // ref arg
            UIImage* icon = (UIImage*) args[@"icon"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGroundOverlay::groundOverlayWithBounds(%@, %@)", args[@"bounds"], args[@"icon"]);
            }
        
            // invoke native method
            BMKGroundOverlay* result = [BMKGroundOverlay groundOverlayWithBounds: bounds icon: icon];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKPolyline::polylineWithPoints_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolyline::polylineWithPoints(%@, %@)", args[@"points"], args[@"count"]);
            }
        
            // invoke native method
            BMKPolyline* result = [BMKPolyline polylineWithPoints: points count: count];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKPolyline::polylineWithCoordinates_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsValueList.count];
            for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolyline::polylineWithCoordinates(%@, %@)", args[@"coords"], args[@"count"]);
            }
        
            // invoke native method
            BMKPolyline* result = [BMKPolyline polylineWithCoordinates: coords count: count];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKPolyline::setPolylineWithPoints_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            BMKPolyline* ref = (BMKPolyline*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolyline@%@::setPolylineWithPoints(%@, %@)", args[@"refId"], args[@"points"], args[@"count"]);
            }
        
            // invoke native method
            BOOL result = [ref setPolylineWithPoints: points count: count];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKPolyline::setPolylineWithCoordinates_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsValueList.count];
            for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            BMKPolyline* ref = (BMKPolyline*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolyline@%@::setPolylineWithCoordinates(%@, %@)", args[@"refId"], args[@"coords"], args[@"count"]);
            }
        
            // invoke native method
            BOOL result = [ref setPolylineWithCoordinates: coords count: count];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKPolyline::polylineWithPoints_count_textureIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
            // jsonable arg
            NSArray<NSNumber*>* textureIndex = (NSArray<NSNumber*>*) args[@"textureIndex"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolyline::polylineWithPoints(%@, %@, %@)", args[@"points"], args[@"count"], args[@"textureIndex"]);
            }
        
            // invoke native method
            BMKPolyline* result = [BMKPolyline polylineWithPoints: points count: count textureIndex: textureIndex];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKPolyline::polylineWithCoordinates_count_textureIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsValueList.count];
            for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
            // jsonable arg
            NSArray<NSNumber*>* textureIndex = (NSArray<NSNumber*>*) args[@"textureIndex"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolyline::polylineWithCoordinates(%@, %@, %@)", args[@"coords"], args[@"count"], args[@"textureIndex"]);
            }
        
            // invoke native method
            BMKPolyline* result = [BMKPolyline polylineWithCoordinates: coords count: count textureIndex: textureIndex];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKPolyline::setPolylineWithPoints_count_textureIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
            // jsonable arg
            NSArray<NSNumber*>* textureIndex = (NSArray<NSNumber*>*) args[@"textureIndex"];
        
            // ref
            BMKPolyline* ref = (BMKPolyline*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolyline@%@::setPolylineWithPoints(%@, %@, %@)", args[@"refId"], args[@"points"], args[@"count"], args[@"textureIndex"]);
            }
        
            // invoke native method
            BOOL result = [ref setPolylineWithPoints: points count: count textureIndex: textureIndex];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKPolyline::setPolylineWithCoordinates_count_textureIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsValueList.count];
            for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
            // jsonable arg
            NSArray<NSNumber*>* textureIndex = (NSArray<NSNumber*>*) args[@"textureIndex"];
        
            // ref
            BMKPolyline* ref = (BMKPolyline*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolyline@%@::setPolylineWithCoordinates(%@, %@, %@)", args[@"refId"], args[@"coords"], args[@"count"], args[@"textureIndex"]);
            }
        
            // invoke native method
            BOOL result = [ref setPolylineWithCoordinates: coords count: count textureIndex: textureIndex];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKCircleView::initWithCircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKCircle* circle = (BMKCircle*) args[@"circle"];
        
            // ref
            BMKCircleView* ref = (BMKCircleView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCircleView@%@::initWithCircle(%@)", args[@"refId"], args[@"circle"]);
            }
        
            // invoke native method
            id result = [ref initWithCircle: circle];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKGradient::initWithColors_startPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSObject*>* colors = (NSArray<NSObject*>*) args[@"colors"];
            // list arg
            NSArray<NSObject*>* startPoints = (NSArray<NSObject*>*) args[@"startPoints"];
        
            // ref
            BMKGradient* ref = (BMKGradient*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGradient@%@::initWithColors(%@, %@)", args[@"refId"], args[@"colors"], args[@"startPoints"]);
            }
        
            // invoke native method
            id result = [ref initWithColors: colors startPoints: startPoints];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKArcline::arclineWithPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKArcline::arclineWithPoints(%@)", args[@"points"]);
            }
        
            // invoke native method
            BMKArcline* result = [BMKArcline arclineWithPoints: points];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKArcline::arclineWithCoordinates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsValueList.count];
            for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKArcline::arclineWithCoordinates(%@)", args[@"coords"]);
            }
        
            // invoke native method
            BMKArcline* result = [BMKArcline arclineWithCoordinates: coords];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKArcline::setArclineWithPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
        
            // ref
            BMKArcline* ref = (BMKArcline*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKArcline@%@::setArclineWithPoints(%@)", args[@"refId"], args[@"points"]);
            }
        
            // invoke native method
            BOOL result = [ref setArclineWithPoints: points];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKArcline::setArclineWithCoordinates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsValueList.count];
            for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
        
            // ref
            BMKArcline* ref = (BMKArcline*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKArcline@%@::setArclineWithCoordinates(%@)", args[@"refId"], args[@"coords"]);
            }
        
            // invoke native method
            BOOL result = [ref setArclineWithCoordinates: coords];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKURLTileLayer::initWithURLTemplate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* URLTemplate = (NSString*) args[@"URLTemplate"];
        
            // ref
            BMKURLTileLayer* ref = (BMKURLTileLayer*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKURLTileLayer@%@::initWithURLTemplate(%@)", args[@"refId"], args[@"URLTemplate"]);
            }
        
            // invoke native method
            id result = [ref initWithURLTemplate: URLTemplate];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKURLTileLayer::cleanTileDataCache": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKURLTileLayer* ref = (BMKURLTileLayer*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKURLTileLayer@%@::cleanTileDataCache()", args[@"refId"]);
            }
        
            // invoke native method
            BOOL result = [ref cleanTileDataCache];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKSyncTileLayer::tileForX_y_zoom": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSInteger x = [args[@"x"] longValue];
            // jsonable arg
            NSInteger y = [args[@"y"] longValue];
            // jsonable arg
            NSInteger zoom = [args[@"zoom"] longValue];
        
            // ref
            BMKSyncTileLayer* ref = (BMKSyncTileLayer*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKSyncTileLayer@%@::tileForX(%@, %@, %@)", args[@"refId"], args[@"x"], args[@"y"], args[@"zoom"]);
            }
        
            // invoke native method
            UIImage* result = [ref tileForX: x y: y zoom: zoom];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKAsyncTileLayer::loadTileForX_y_zoom_result": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSInteger x = [args[@"x"] longValue];
            // jsonable arg
            NSInteger y = [args[@"y"] longValue];
            // jsonable arg
            NSInteger zoom = [args[@"zoom"] longValue];
        
        
            // ref
            BMKAsyncTileLayer* ref = (BMKAsyncTileLayer*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKAsyncTileLayer@%@::loadTileForX(%@, %@, %@, %@)", args[@"refId"], args[@"x"], args[@"y"], args[@"zoom"], args[@"result"]);
            }
        
            // invoke native method
            [ref loadTileForX : x y: y zoom: zoom result: ^(UIImage* tileImage, NSError* error) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:[NSString stringWithFormat:@"void|UIImage*#tileImage,NSError*#error::Callback@%@", @(ref.hash)]
                            binaryMessenger:[[weakSelf registrar] messenger]
                                      codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // ref callback arg
                UIImage* argtileImage = tileImage;
                // ref callback arg
                NSError* argerror = error;
        
                dispatch_async(dispatch_get_main_queue(), ^{
                  [channel invokeMethod:@"Callback::void|UIImage*#tileImage,NSError*#error::void|UIImage*#tileImage,NSError*#error" arguments:@{@"tileImage": argtileImage == nil ? [NSNull null] : argtileImage, @"error": argerror == nil ? [NSNull null] : argerror}];
                });
        
            }];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKPolylineView::initWithPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKPolyline* polyline = (BMKPolyline*) args[@"polyline"];
        
            // ref
            BMKPolylineView* ref = (BMKPolylineView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolylineView@%@::initWithPolyline(%@)", args[@"refId"], args[@"polyline"]);
            }
        
            // invoke native method
            id result = [ref initWithPolyline: polyline];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKCircle::circleWithCenterCoordinate_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordValue = (NSValue*) args[@"coord"];
            CLLocationCoordinate2D coord;
            [coordValue getValue:&coord];
            // jsonable arg
            CLLocationDistance radius = [args[@"radius"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCircle::circleWithCenterCoordinate(%@, %@)", args[@"coord"], args[@"radius"]);
            }
        
            // invoke native method
            BMKCircle* result = [BMKCircle circleWithCenterCoordinate: coord radius: radius];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKCircle::circleWithMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            BMKMapRect mapRect;
            [mapRectValue getValue:&mapRect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCircle::circleWithMapRect(%@)", args[@"mapRect"]);
            }
        
            // invoke native method
            BMKCircle* result = [BMKCircle circleWithMapRect: mapRect];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKCircle::setCircleWithCenterCoordinate_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordValue = (NSValue*) args[@"coord"];
            CLLocationCoordinate2D coord;
            [coordValue getValue:&coord];
            // jsonable arg
            CLLocationDistance radius = [args[@"radius"] doubleValue];
        
            // ref
            BMKCircle* ref = (BMKCircle*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCircle@%@::setCircleWithCenterCoordinate(%@, %@)", args[@"refId"], args[@"coord"], args[@"radius"]);
            }
        
            // invoke native method
            BOOL result = [ref setCircleWithCenterCoordinate: coord radius: radius];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKCircle::setCircleWithMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            BMKMapRect mapRect;
            [mapRectValue getValue:&mapRect];
        
            // ref
            BMKCircle* ref = (BMKCircle*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCircle@%@::setCircleWithMapRect(%@)", args[@"refId"], args[@"mapRect"]);
            }
        
            // invoke native method
            BOOL result = [ref setCircleWithMapRect: mapRect];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapView::customMapStyle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* customMapStyleJsonFilePath = (NSString*) args[@"customMapStyleJsonFilePath"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView::customMapStyle(%@)", args[@"customMapStyleJsonFilePath"]);
            }
        
            // invoke native method
            [BMKMapView customMapStyle: customMapStyleJsonFilePath];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::enableCustomMapStyle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            BOOL enable = [args[@"enable"] boolValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView::enableCustomMapStyle(%@)", args[@"enable"]);
            }
        
            // invoke native method
            [BMKMapView enableCustomMapStyle: enable];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::setCustomMapStylePath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* customMapStyleJsonFilePath = (NSString*) args[@"customMapStyleJsonFilePath"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::setCustomMapStylePath(%@)", args[@"refId"], args[@"customMapStyleJsonFilePath"]);
            }
        
            // invoke native method
            [ref setCustomMapStylePath : customMapStyleJsonFilePath];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::setCustomMapStylePath_mode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* customMapStyleJsonFilePath = (NSString*) args[@"customMapStyleJsonFilePath"];
            // jsonable arg
            int mode = [args[@"mode"] intValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::setCustomMapStylePath(%@, %@)", args[@"refId"], args[@"customMapStyleJsonFilePath"], args[@"mode"]);
            }
        
            // invoke native method
            [ref setCustomMapStylePath : customMapStyleJsonFilePath mode: mode];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::setCustomMapStyleEnable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            BOOL enable = [args[@"enable"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::setCustomMapStyleEnable(%@)", args[@"refId"], args[@"enable"]);
            }
        
            // invoke native method
            [ref setCustomMapStyleEnable : enable];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::setCustomMapStyleWithOption_preLoad_success_failure": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKCustomMapStyleOption* option = (BMKCustomMapStyleOption*) args[@"option"];
        
        
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::setCustomMapStyleWithOption(%@, %@, %@, %@)", args[@"refId"], args[@"option"], args[@"preLoad"], args[@"success"], args[@"failure"]);
            }
        
            // invoke native method
            [ref setCustomMapStyleWithOption : option preLoad: ^(NSString* path) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:[NSString stringWithFormat:@"void|NSString*#path::Callback@%@", @(ref.hash)]
                            binaryMessenger:[[weakSelf registrar] messenger]
                                      codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // ref callback arg
                NSString* argpath = path;
        
                dispatch_async(dispatch_get_main_queue(), ^{
                  [channel invokeMethod:@"Callback::void|NSString*#path::void|NSString*#path" arguments:@{@"path": argpath == nil ? [NSNull null] : argpath}];
                });
        
            } success: ^(NSString* path) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:[NSString stringWithFormat:@"void|NSString*#path::Callback@%@", @(ref.hash)]
                            binaryMessenger:[[weakSelf registrar] messenger]
                                      codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // ref callback arg
                NSString* argpath = path;
        
                dispatch_async(dispatch_get_main_queue(), ^{
                  [channel invokeMethod:@"Callback::void|NSString*#path::void|NSString*#path" arguments:@{@"path": argpath == nil ? [NSNull null] : argpath}];
                });
        
            } failure: ^(NSError* error, NSString* path) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:[NSString stringWithFormat:@"void|NSError*#error,NSString*#path::Callback@%@", @(ref.hash)]
                            binaryMessenger:[[weakSelf registrar] messenger]
                                      codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // ref callback arg
                NSError* argerror = error;
                // ref callback arg
                NSString* argpath = path;
        
                dispatch_async(dispatch_get_main_queue(), ^{
                  [channel invokeMethod:@"Callback::void|NSError*#error,NSString*#path::void|NSError*#error,NSString*#path" arguments:@{@"error": argerror == nil ? [NSNull null] : argerror, @"path": argpath == nil ? [NSNull null] : argpath}];
                });
        
            }];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::setCustomTrafficColorForSmooth_slow_congestion_severeCongestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            UIColor* smooth = (UIColor*) args[@"smooth"];
            // ref arg
            UIColor* slow = (UIColor*) args[@"slow"];
            // ref arg
            UIColor* congestion = (UIColor*) args[@"congestion"];
            // ref arg
            UIColor* severeCongestion = (UIColor*) args[@"severeCongestion"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::setCustomTrafficColorForSmooth(%@, %@, %@, %@)", args[@"refId"], args[@"smooth"], args[@"slow"], args[@"congestion"], args[@"severeCongestion"]);
            }
        
            // invoke native method
            BOOL result = [ref setCustomTrafficColorForSmooth: smooth slow: slow congestion: congestion severeCongestion: severeCongestion];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapView::willBackGround": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView::willBackGround()");
            }
        
            // invoke native method
            [BMKMapView willBackGround];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::didForeGround": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView::didForeGround()");
            }
        
            // invoke native method
            [BMKMapView didForeGround];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::viewWillAppear": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::viewWillAppear()", args[@"refId"]);
            }
        
            // invoke native method
            [ref viewWillAppear ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::viewWillDisappear": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::viewWillDisappear()", args[@"refId"]);
            }
        
            // invoke native method
            [ref viewWillDisappear ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::mapForceRefresh": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::mapForceRefresh()", args[@"refId"]);
            }
        
            // invoke native method
            [ref mapForceRefresh ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::zoomIn": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::zoomIn()", args[@"refId"]);
            }
        
            // invoke native method
            BOOL result = [ref zoomIn];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapView::zoomOut": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::zoomOut()", args[@"refId"]);
            }
        
            // invoke native method
            BOOL result = [ref zoomOut];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapView::regionThatFits": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* regionValue = (NSValue*) args[@"region"];
            BMKCoordinateRegion region;
            [regionValue getValue:&region];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::regionThatFits(%@)", args[@"refId"], args[@"region"]);
            }
        
            // invoke native method
            BMKCoordinateRegion result = [ref regionThatFits: region];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
        
            methodResult(__result__);
        },
        @"BMKMapView::setRegion_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* regionValue = (NSValue*) args[@"region"];
            BMKCoordinateRegion region;
            [regionValue getValue:&region];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::setRegion(%@, %@)", args[@"refId"], args[@"region"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setRegion : region animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::setCenterCoordinate_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::setCenterCoordinate(%@, %@)", args[@"refId"], args[@"coordinate"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setCenterCoordinate : coordinate animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::takeSnapshot": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::takeSnapshot()", args[@"refId"]);
            }
        
            // invoke native method
            UIImage* result = [ref takeSnapshot];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKMapView::takeSnapshot__CGRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            CGRect rect;
            [rectValue getValue:&rect];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::takeSnapshot(%@)", args[@"refId"], args[@"rect"]);
            }
        
            // invoke native method
            UIImage* result = [ref takeSnapshot: rect];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKMapView::setCompassImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            UIImage* image = (UIImage*) args[@"image"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::setCompassImage(%@)", args[@"refId"], args[@"image"]);
            }
        
            // invoke native method
            [ref setCompassImage : image];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::setVisibleMapRect_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            BMKMapRect mapRect;
            [mapRectValue getValue:&mapRect];
            // jsonable arg
            BOOL animate = [args[@"animate"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::setVisibleMapRect(%@, %@)", args[@"refId"], args[@"mapRect"], args[@"animate"]);
            }
        
            // invoke native method
            [ref setVisibleMapRect : mapRect animated: animate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::mapRectThatFits": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            BMKMapRect mapRect;
            [mapRectValue getValue:&mapRect];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::mapRectThatFits(%@)", args[@"refId"], args[@"mapRect"]);
            }
        
            // invoke native method
            BMKMapRect result = [ref mapRectThatFits: mapRect];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        @"BMKMapView::setVisibleMapRect_edgePadding_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            BMKMapRect mapRect;
            [mapRectValue getValue:&mapRect];
            // struct arg
            NSValue* insetsValue = (NSValue*) args[@"insets"];
            UIEdgeInsets insets;
            [insetsValue getValue:&insets];
            // jsonable arg
            BOOL animate = [args[@"animate"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::setVisibleMapRect(%@, %@, %@)", args[@"refId"], args[@"mapRect"], args[@"insets"], args[@"animate"]);
            }
        
            // invoke native method
            [ref setVisibleMapRect : mapRect edgePadding: insets animated: animate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::fitVisibleMapRect_edgePadding_withAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            BMKMapRect mapRect;
            [mapRectValue getValue:&mapRect];
            // struct arg
            NSValue* insetsValue = (NSValue*) args[@"insets"];
            UIEdgeInsets insets;
            [insetsValue getValue:&insets];
            // jsonable arg
            BOOL animate = [args[@"animate"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::fitVisibleMapRect(%@, %@, %@)", args[@"refId"], args[@"mapRect"], args[@"insets"], args[@"animate"]);
            }
        
            // invoke native method
            [ref fitVisibleMapRect : mapRect edgePadding: insets withAnimated: animate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::mapRectThatFits_edgePadding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            BMKMapRect mapRect;
            [mapRectValue getValue:&mapRect];
            // struct arg
            NSValue* insetsValue = (NSValue*) args[@"insets"];
            UIEdgeInsets insets;
            [insetsValue getValue:&insets];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::mapRectThatFits(%@, %@)", args[@"refId"], args[@"mapRect"], args[@"insets"]);
            }
        
            // invoke native method
            BMKMapRect result = [ref mapRectThatFits: mapRect edgePadding: insets];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        @"BMKMapView::convertCoordinate_toPointToView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // ref arg
            UIView* view = (UIView*) args[@"view"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::convertCoordinate(%@, %@)", args[@"refId"], args[@"coordinate"], args[@"view"]);
            }
        
            // invoke native method
            CGPoint result = [ref convertCoordinate: coordinate toPointToView: view];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
            methodResult(__result__);
        },
        @"BMKMapView::convertPoint_toCoordinateFromView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            CGPoint point;
            [pointValue getValue:&point];
            // ref arg
            UIView* view = (UIView*) args[@"view"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::convertPoint(%@, %@)", args[@"refId"], args[@"point"], args[@"view"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = [ref convertPoint: point toCoordinateFromView: view];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        @"BMKMapView::convertRegion_toRectToView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* regionValue = (NSValue*) args[@"region"];
            BMKCoordinateRegion region;
            [regionValue getValue:&region];
            // ref arg
            UIView* view = (UIView*) args[@"view"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::convertRegion(%@, %@)", args[@"refId"], args[@"region"], args[@"view"]);
            }
        
            // invoke native method
            CGRect result = [ref convertRegion: region toRectToView: view];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGRect)];
        
            methodResult(__result__);
        },
        @"BMKMapView::convertRect_toRegionFromView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            CGRect rect;
            [rectValue getValue:&rect];
            // ref arg
            UIView* view = (UIView*) args[@"view"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::convertRect(%@, %@)", args[@"refId"], args[@"rect"], args[@"view"]);
            }
        
            // invoke native method
            BMKCoordinateRegion result = [ref convertRect: rect toRegionFromView: view];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
        
            methodResult(__result__);
        },
        @"BMKMapView::convertMapRect_toRectToView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            BMKMapRect mapRect;
            [mapRectValue getValue:&mapRect];
            // ref arg
            UIView* view = (UIView*) args[@"view"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::convertMapRect(%@, %@)", args[@"refId"], args[@"mapRect"], args[@"view"]);
            }
        
            // invoke native method
            CGRect result = [ref convertMapRect: mapRect toRectToView: view];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGRect)];
        
            methodResult(__result__);
        },
        @"BMKMapView::convertRect_toMapRectFromView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            CGRect rect;
            [rectValue getValue:&rect];
            // ref arg
            UIView* view = (UIView*) args[@"view"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::convertRect(%@, %@)", args[@"refId"], args[@"rect"], args[@"view"]);
            }
        
            // invoke native method
            BMKMapRect result = [ref convertRect: rect toMapRectFromView: view];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        @"BMKMapView::glPointForMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapPointValue = (NSValue*) args[@"mapPoint"];
            BMKMapPoint mapPoint;
            [mapPointValue getValue:&mapPoint];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::glPointForMapPoint(%@)", args[@"refId"], args[@"mapPoint"]);
            }
        
            // invoke native method
            CGPoint result = [ref glPointForMapPoint: mapPoint];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
            methodResult(__result__);
        },
        @"BMKMapView::glPointsForMapPoints_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* mapPointsValueList = (NSArray<NSValue*>*) args[@"mapPoints"];
            BMKMapPoint mapPoints[mapPointsValueList.count];
            for (int __i__ = 0; __i__ < mapPointsValueList.count; __i__++) {
                NSValue* mapPointsValue = (NSValue*) [mapPointsValueList objectAtIndex:__i__];
                BMKMapPoint mapPointsItem;
                [mapPointsValue getValue:&mapPointsItem];
                mapPoints[__i__] = mapPointsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::glPointsForMapPoints(%@, %@)", args[@"refId"], args[@"mapPoints"], args[@"count"]);
            }
        
            // invoke native method
            CGPoint* result = [ref glPointsForMapPoints: mapPoints count: count];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint*)];
        
            methodResult(__result__);
        },
        @"BMKMapView::setMapCenterToScreenPt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* ptInScreenValue = (NSValue*) args[@"ptInScreen"];
            CGPoint ptInScreen;
            [ptInScreenValue getValue:&ptInScreen];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::setMapCenterToScreenPt(%@)", args[@"refId"], args[@"ptInScreen"]);
            }
        
            // invoke native method
            [ref setMapCenterToScreenPt : ptInScreen];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::getMapStatusFromCoordinateRegion_edgePadding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* regionValue = (NSValue*) args[@"region"];
            BMKCoordinateRegion region;
            [regionValue getValue:&region];
            // struct arg
            NSValue* insetsValue = (NSValue*) args[@"insets"];
            UIEdgeInsets insets;
            [insetsValue getValue:&insets];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::getMapStatusFromCoordinateRegion(%@, %@)", args[@"refId"], args[@"region"], args[@"insets"]);
            }
        
            // invoke native method
            BMKMapStatus* result = [ref getMapStatusFromCoordinateRegion: region edgePadding: insets];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKMapView::getMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::getMapStatus()", args[@"refId"]);
            }
        
            // invoke native method
            BMKMapStatus* result = [ref getMapStatus];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKMapView::setMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKMapStatus* mapStatus = (BMKMapStatus*) args[@"mapStatus"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::setMapStatus(%@)", args[@"refId"], args[@"mapStatus"]);
            }
        
            // invoke native method
            [ref setMapStatus : mapStatus];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::setMapStatus_withAnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKMapStatus* mapStatus = (BMKMapStatus*) args[@"mapStatus"];
            // jsonable arg
            BOOL bAnimation = [args[@"bAnimation"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::setMapStatus(%@, %@)", args[@"refId"], args[@"mapStatus"], args[@"bAnimation"]);
            }
        
            // invoke native method
            [ref setMapStatus : mapStatus withAnimation: bAnimation];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::setMapStatus_withAnimation_withAnimationTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKMapStatus* mapStatus = (BMKMapStatus*) args[@"mapStatus"];
            // jsonable arg
            BOOL bAnimation = [args[@"bAnimation"] boolValue];
            // jsonable arg
            int ulDuration = [args[@"ulDuration"] intValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::setMapStatus(%@, %@, %@)", args[@"refId"], args[@"mapStatus"], args[@"bAnimation"], args[@"ulDuration"]);
            }
        
            // invoke native method
            [ref setMapStatus : mapStatus withAnimation: bAnimation withAnimationTime: ulDuration];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::isSurpportBaiduHeatMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::isSurpportBaiduHeatMap()", args[@"refId"]);
            }
        
            // invoke native method
            BOOL result = [ref isSurpportBaiduHeatMap];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapView::getProjectionMatrix": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::getProjectionMatrix()", args[@"refId"]);
            }
        
            // invoke native method
            float* result = [ref getProjectionMatrix];
        
            // result
            // return a (value)*
            NSValue* __result__ = [NSValue valueWithPointer:result];
        
            methodResult(__result__);
        },
        @"BMKMapView::getViewMatrix": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::getViewMatrix()", args[@"refId"]);
            }
        
            // invoke native method
            float* result = [ref getViewMatrix];
        
            // result
            // return a (value)*
            NSValue* __result__ = [NSValue valueWithPointer:result];
        
            methodResult(__result__);
        },
        @"BMKMapView::switchBaseIndoorMapFloor_withID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* strFloor = (NSString*) args[@"strFloor"];
            // jsonable arg
            NSString* strID = (NSString*) args[@"strID"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::switchBaseIndoorMapFloor(%@, %@)", args[@"refId"], args[@"strFloor"], args[@"strID"]);
            }
        
            // invoke native method
            BMKSwitchIndoorFloorError result = [ref switchBaseIndoorMapFloor: strFloor withID: strID];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapView::getFocusedBaseIndoorMapInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::getFocusedBaseIndoorMapInfo()", args[@"refId"]);
            }
        
            // invoke native method
            BMKBaseIndoorMapInfo* result = [ref getFocusedBaseIndoorMapInfo];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKMapView::updateLocationViewWithParam": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKLocationViewDisplayParam* locationViewDisplayParam = (BMKLocationViewDisplayParam*) args[@"locationViewDisplayParam"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::updateLocationViewWithParam(%@)", args[@"refId"], args[@"locationViewDisplayParam"]);
            }
        
            // invoke native method
            [ref updateLocationViewWithParam : locationViewDisplayParam];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::updateLocationData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKUserLocation* userLocation = (BMKUserLocation*) args[@"userLocation"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::updateLocationData(%@)", args[@"refId"], args[@"userLocation"]);
            }
        
            // invoke native method
            [ref updateLocationData : userLocation];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::addAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<BMKAnnotation> annotation = (id<BMKAnnotation>) args[@"annotation"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::addAnnotation(%@)", args[@"refId"], args[@"annotation"]);
            }
        
            // invoke native method
            [ref addAnnotation : annotation];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::addAnnotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSObject*>* annotations = (NSArray<NSObject*>*) args[@"annotations"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::addAnnotations(%@)", args[@"refId"], args[@"annotations"]);
            }
        
            // invoke native method
            [ref addAnnotations : annotations];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::removeAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<BMKAnnotation> annotation = (id<BMKAnnotation>) args[@"annotation"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::removeAnnotation(%@)", args[@"refId"], args[@"annotation"]);
            }
        
            // invoke native method
            [ref removeAnnotation : annotation];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::removeAnnotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSObject*>* annotations = (NSArray<NSObject*>*) args[@"annotations"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::removeAnnotations(%@)", args[@"refId"], args[@"annotations"]);
            }
        
            // invoke native method
            [ref removeAnnotations : annotations];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::viewForAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<BMKAnnotation> annotation = (id<BMKAnnotation>) args[@"annotation"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::viewForAnnotation(%@)", args[@"refId"], args[@"annotation"]);
            }
        
            // invoke native method
            BMKAnnotationView* result = [ref viewForAnnotation: annotation];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKMapView::dequeueReusableAnnotationViewWithIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* identifier = (NSString*) args[@"identifier"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::dequeueReusableAnnotationViewWithIdentifier(%@)", args[@"refId"], args[@"identifier"]);
            }
        
            // invoke native method
            BMKAnnotationView* result = [ref dequeueReusableAnnotationViewWithIdentifier: identifier];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKMapView::selectAnnotation_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<BMKAnnotation> annotation = (id<BMKAnnotation>) args[@"annotation"];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::selectAnnotation(%@, %@)", args[@"refId"], args[@"annotation"], args[@"animated"]);
            }
        
            // invoke native method
            [ref selectAnnotation : annotation animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::deselectAnnotation_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<BMKAnnotation> annotation = (id<BMKAnnotation>) args[@"annotation"];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::deselectAnnotation(%@, %@)", args[@"refId"], args[@"annotation"], args[@"animated"]);
            }
        
            // invoke native method
            [ref deselectAnnotation : annotation animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::showAnnotations_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSObject*>* annotations = (NSArray<NSObject*>*) args[@"annotations"];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::showAnnotations(%@, %@)", args[@"refId"], args[@"annotations"], args[@"animated"]);
            }
        
            // invoke native method
            [ref showAnnotations : annotations animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::annotationsInCoordinateBounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* boundsValue = (NSValue*) args[@"bounds"];
            BMKCoordinateBounds bounds;
            [boundsValue getValue:&bounds];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::annotationsInCoordinateBounds(%@)", args[@"refId"], args[@"bounds"]);
            }
        
            // invoke native method
            NSArray* result = [ref annotationsInCoordinateBounds: bounds];
        
            // result
            // 返回值: 列表
            NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [__result__ addObject: object];
            }
        
            methodResult(__result__);
        },
        @"BMKMapView::addOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<BMKOverlay> overlay = (id<BMKOverlay>) args[@"overlay"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::addOverlay(%@)", args[@"refId"], args[@"overlay"]);
            }
        
            // invoke native method
            [ref addOverlay : overlay];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::addOverlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSObject*>* overlays = (NSArray<NSObject*>*) args[@"overlays"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::addOverlays(%@)", args[@"refId"], args[@"overlays"]);
            }
        
            // invoke native method
            [ref addOverlays : overlays];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::removeOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<BMKOverlay> overlay = (id<BMKOverlay>) args[@"overlay"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::removeOverlay(%@)", args[@"refId"], args[@"overlay"]);
            }
        
            // invoke native method
            [ref removeOverlay : overlay];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::removeOverlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSObject*>* overlays = (NSArray<NSObject*>*) args[@"overlays"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::removeOverlays(%@)", args[@"refId"], args[@"overlays"]);
            }
        
            // invoke native method
            [ref removeOverlays : overlays];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::insertOverlay_atIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<BMKOverlay> overlay = (id<BMKOverlay>) args[@"overlay"];
            // jsonable arg
            NSUInteger index = [args[@"index"] unsignedIntegerValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::insertOverlay(%@, %@)", args[@"refId"], args[@"overlay"], args[@"index"]);
            }
        
            // invoke native method
            [ref insertOverlay : overlay atIndex: index];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::exchangeOverlayAtIndex_withOverlayAtIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSUInteger index1 = [args[@"index1"] unsignedIntegerValue];
            // jsonable arg
            NSUInteger index2 = [args[@"index2"] unsignedIntegerValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::exchangeOverlayAtIndex(%@, %@)", args[@"refId"], args[@"index1"], args[@"index2"]);
            }
        
            // invoke native method
            [ref exchangeOverlayAtIndex : index1 withOverlayAtIndex: index2];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::insertOverlay_aboveOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<BMKOverlay> overlay = (id<BMKOverlay>) args[@"overlay"];
            // ref arg
            id<BMKOverlay> sibling = (id<BMKOverlay>) args[@"sibling"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::insertOverlay(%@, %@)", args[@"refId"], args[@"overlay"], args[@"sibling"]);
            }
        
            // invoke native method
            [ref insertOverlay : overlay aboveOverlay: sibling];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::insertOverlay_belowOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<BMKOverlay> overlay = (id<BMKOverlay>) args[@"overlay"];
            // ref arg
            id<BMKOverlay> sibling = (id<BMKOverlay>) args[@"sibling"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::insertOverlay(%@, %@)", args[@"refId"], args[@"overlay"], args[@"sibling"]);
            }
        
            // invoke native method
            [ref insertOverlay : overlay belowOverlay: sibling];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::viewForOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<BMKOverlay> overlay = (id<BMKOverlay>) args[@"overlay"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::viewForOverlay(%@)", args[@"refId"], args[@"overlay"]);
            }
        
            // invoke native method
            BMKOverlayView* result = [ref viewForOverlay: overlay];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKMapView::addHeatMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKHeatMap* heatMap = (BMKHeatMap*) args[@"heatMap"];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::addHeatMap(%@)", args[@"refId"], args[@"heatMap"]);
            }
        
            // invoke native method
            [ref addHeatMap : heatMap];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKMapView::removeHeatMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapView@%@::removeHeatMap()", args[@"refId"]);
            }
        
            // invoke native method
            [ref removeHeatMap ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKArclineView::initWithArcline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKArcline* arcline = (BMKArcline*) args[@"arcline"];
        
            // ref
            BMKArclineView* ref = (BMKArclineView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKArclineView@%@::initWithArcline(%@)", args[@"refId"], args[@"arcline"]);
            }
        
            // invoke native method
            id result = [ref initWithArcline: arcline];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKPolygon::polygonWithPoints_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolygon::polygonWithPoints(%@, %@)", args[@"points"], args[@"count"]);
            }
        
            // invoke native method
            BMKPolygon* result = [BMKPolygon polygonWithPoints: points count: count];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKPolygon::polygonWithCoordinates_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsValueList.count];
            for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolygon::polygonWithCoordinates(%@, %@)", args[@"coords"], args[@"count"]);
            }
        
            // invoke native method
            BMKPolygon* result = [BMKPolygon polygonWithCoordinates: coords count: count];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKPolygon::setPolygonWithPoints_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            BMKPolygon* ref = (BMKPolygon*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolygon@%@::setPolygonWithPoints(%@, %@)", args[@"refId"], args[@"points"], args[@"count"]);
            }
        
            // invoke native method
            BOOL result = [ref setPolygonWithPoints: points count: count];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKPolygon::setPolygonWithCoordinates_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsValueList.count];
            for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            BMKPolygon* ref = (BMKPolygon*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolygon@%@::setPolygonWithCoordinates(%@, %@)", args[@"refId"], args[@"coords"], args[@"count"]);
            }
        
            // invoke native method
            BOOL result = [ref setPolygonWithCoordinates: coords count: count];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKPolygonView::initWithPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKPolygon* polygon = (BMKPolygon*) args[@"polygon"];
        
            // ref
            BMKPolygonView* ref = (BMKPolygonView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolygonView@%@::initWithPolygon(%@)", args[@"refId"], args[@"polygon"]);
            }
        
            // invoke native method
            id result = [ref initWithPolygon: polygon];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKOverlayView::setOverlayGeometryDelegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // id arg
            id delegate;
            // jsonable
            if ([args[@"delegate"] isKindOfClass:[NSNumber class]]
                    || [args[@"delegate"] isKindOfClass:[NSString class]]
                    || [args[@"delegate"] isKindOfClass:[NSArray class]]
                    || [args[@"delegate"] isKindOfClass:[NSDictionary class]]) {
                delegate = args[@"delegate"];
            }
            // non jsonable
            else {
                delegate = HEAP[@([args[@"delegate"] integerValue])];
            }
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::setOverlayGeometryDelegate(%@)", args[@"refId"], args[@"delegate"]);
            }
        
            // invoke native method
            [ref setOverlayGeometryDelegate : delegate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::initWithOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<BMKOverlay> overlay = (id<BMKOverlay>) args[@"overlay"];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::initWithOverlay(%@)", args[@"refId"], args[@"overlay"]);
            }
        
            // invoke native method
            id result = [ref initWithOverlay: overlay];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKOverlayView::pointForMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapPointValue = (NSValue*) args[@"mapPoint"];
            BMKMapPoint mapPoint;
            [mapPointValue getValue:&mapPoint];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::pointForMapPoint(%@)", args[@"refId"], args[@"mapPoint"]);
            }
        
            // invoke native method
            CGPoint result = [ref pointForMapPoint: mapPoint];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
            methodResult(__result__);
        },
        @"BMKOverlayView::mapPointForPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            CGPoint point;
            [pointValue getValue:&point];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::mapPointForPoint(%@)", args[@"refId"], args[@"point"]);
            }
        
            // invoke native method
            BMKMapPoint result = [ref mapPointForPoint: point];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapPoint)];
        
            methodResult(__result__);
        },
        @"BMKOverlayView::rectForMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            BMKMapRect mapRect;
            [mapRectValue getValue:&mapRect];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::rectForMapRect(%@)", args[@"refId"], args[@"mapRect"]);
            }
        
            // invoke native method
            CGRect result = [ref rectForMapRect: mapRect];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGRect)];
        
            methodResult(__result__);
        },
        @"BMKOverlayView::mapRectForRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            CGRect rect;
            [rectValue getValue:&rect];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::mapRectForRect(%@)", args[@"refId"], args[@"rect"]);
            }
        
            // invoke native method
            BMKMapRect result = [ref mapRectForRect: rect];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        @"BMKOverlayView::canDrawMapRect_zoomScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            BMKMapRect mapRect;
            [mapRectValue getValue:&mapRect];
            // jsonable arg
            CGFloat zoomScale = [args[@"zoomScale"] floatValue];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::canDrawMapRect(%@, %@)", args[@"refId"], args[@"mapRect"], args[@"zoomScale"]);
            }
        
            // invoke native method
            BOOL result = [ref canDrawMapRect: mapRect zoomScale: zoomScale];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKOverlayView::setNeedsDisplayInMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            BMKMapRect mapRect;
            [mapRectValue getValue:&mapRect];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::setNeedsDisplayInMapRect(%@)", args[@"refId"], args[@"mapRect"]);
            }
        
            // invoke native method
            [ref setNeedsDisplayInMapRect : mapRect];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::renderLinesWithPoints_pointCount_strokeColor_lineWidth_looped": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // ref arg
            UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // jsonable arg
            BOOL looped = [args[@"looped"] boolValue];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::renderLinesWithPoints(%@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"strokeColor"], args[@"lineWidth"], args[@"looped"]);
            }
        
            // invoke native method
            [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::renderTexturedLinesWithPoints_pointCount_lineWidth_textureID_looped": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // jsonable arg
            GLuint textureID = [args[@"textureID"] unsignedIntegerValue];
            // jsonable arg
            BOOL looped = [args[@"looped"] boolValue];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::renderTexturedLinesWithPoints(%@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"lineWidth"], args[@"textureID"], args[@"looped"]);
            }
        
            // invoke native method
            [ref renderTexturedLinesWithPoints : points pointCount: pointCount lineWidth: lineWidth textureID: textureID looped: looped];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::renderLinesWithPoints_pointCount_strokeColor_lineWidth_looped_lineDashType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // ref arg
            UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // jsonable arg
            BOOL looped = [args[@"looped"] boolValue];
            // enum arg
            BMKLineDashType lineDashType = (BMKLineDashType) [args[@"lineDashType"] integerValue];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::renderLinesWithPoints(%@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"strokeColor"], args[@"lineWidth"], args[@"looped"], args[@"lineDashType"]);
            }
        
            // invoke native method
            [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped lineDashType: lineDashType];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::renderLinesWithPoints_pointCount_strokeColor_lineWidth_looped_lineDash": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // ref arg
            UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // jsonable arg
            BOOL looped = [args[@"looped"] boolValue];
            // jsonable arg
            BOOL lineDash = [args[@"lineDash"] boolValue];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::renderLinesWithPoints(%@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"strokeColor"], args[@"lineWidth"], args[@"looped"], args[@"lineDash"]);
            }
        
            // invoke native method
            [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped lineDash: lineDash];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::renderTexturedLinesWithPartPoints_lineWidth_textureIndexs_isFocus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSObject*>* partPt = (NSArray<NSObject*>*) args[@"partPt"];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // list arg
            NSArray<NSObject*>* textureIndexs = (NSArray<NSObject*>*) args[@"textureIndexs"];
            // jsonable arg
            BOOL isFoucs = [args[@"isFoucs"] boolValue];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::renderTexturedLinesWithPartPoints(%@, %@, %@, %@)", args[@"refId"], args[@"partPt"], args[@"lineWidth"], args[@"textureIndexs"], args[@"isFoucs"]);
            }
        
            // invoke native method
            [ref renderTexturedLinesWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs isFocus: isFoucs];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::renderTexturedLinesWithPartPoints_lineWidth_textureIndexs_isFocus_tileTexture_keepScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSObject*>* partPt = (NSArray<NSObject*>*) args[@"partPt"];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // list arg
            NSArray<NSObject*>* textureIndexs = (NSArray<NSObject*>*) args[@"textureIndexs"];
            // jsonable arg
            BOOL isFoucs = [args[@"isFoucs"] boolValue];
            // jsonable arg
            BOOL tileTexture = [args[@"tileTexture"] boolValue];
            // jsonable arg
            BOOL keepscale = [args[@"keepscale"] boolValue];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::renderTexturedLinesWithPartPoints(%@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"partPt"], args[@"lineWidth"], args[@"textureIndexs"], args[@"isFoucs"], args[@"tileTexture"], args[@"keepscale"]);
            }
        
            // invoke native method
            [ref renderTexturedLinesWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs isFocus: isFoucs tileTexture: tileTexture keepScale: keepscale];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::renderTexturedLinesWithPoints_pointCount_lineWidth_textureID_strokeColor_looped_tileTexture_keepScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // jsonable arg
            GLuint textureID = [args[@"textureID"] unsignedIntegerValue];
            // ref arg
            UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
            // jsonable arg
            BOOL looped = [args[@"looped"] boolValue];
            // jsonable arg
            BOOL tileTexture = [args[@"tileTexture"] boolValue];
            // jsonable arg
            BOOL keepScale = [args[@"keepScale"] boolValue];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::renderTexturedLinesWithPoints(%@, %@, %@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"lineWidth"], args[@"textureID"], args[@"strokeColor"], args[@"looped"], args[@"tileTexture"], args[@"keepScale"]);
            }
        
            // invoke native method
            [ref renderTexturedLinesWithPoints : points pointCount: pointCount lineWidth: lineWidth textureID: textureID strokeColor: strokeColor looped: looped tileTexture: tileTexture keepScale: keepScale];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::renderMultiTexturedPolyLineWithPartPoints_lineWidth_textureIndexs_isFoucs_keepScale_lineJoinType_lineCapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSObject*>* partPt = (NSArray<NSObject*>*) args[@"partPt"];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // jsonable arg
            NSArray<NSNumber*>* textureIndexs = (NSArray<NSNumber*>*) args[@"textureIndexs"];
            // jsonable arg
            BOOL isFoucs = [args[@"isFoucs"] boolValue];
            // jsonable arg
            BOOL keepScale = [args[@"keepScale"] boolValue];
            // enum arg
            BMKLineJoinType lineJoinType = (BMKLineJoinType) [args[@"lineJoinType"] integerValue];
            // enum arg
            BMKLineCapType lineCapType = (BMKLineCapType) [args[@"lineCapType"] integerValue];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::renderMultiTexturedPolyLineWithPartPoints(%@, %@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"partPt"], args[@"lineWidth"], args[@"textureIndexs"], args[@"isFoucs"], args[@"keepScale"], args[@"lineJoinType"], args[@"lineCapType"]);
            }
        
            // invoke native method
            [ref renderMultiTexturedPolyLineWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs isFoucs: isFoucs keepScale: keepScale lineJoinType: lineJoinType lineCapType: lineCapType];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::renderMultiDashPolyLineWithPartPoints_lineWidth_textureIndexs_lineDashType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSObject*>* partPt = (NSArray<NSObject*>*) args[@"partPt"];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // jsonable arg
            NSArray<NSNumber*>* textureIndexs = (NSArray<NSNumber*>*) args[@"textureIndexs"];
            // enum arg
            BMKLineDashType lineDashType = (BMKLineDashType) [args[@"lineDashType"] integerValue];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::renderMultiDashPolyLineWithPartPoints(%@, %@, %@, %@)", args[@"refId"], args[@"partPt"], args[@"lineWidth"], args[@"textureIndexs"], args[@"lineDashType"]);
            }
        
            // invoke native method
            [ref renderMultiDashPolyLineWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs lineDashType: lineDashType];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::renderRegionWithPoints_pointCount_fillColor_usingTriangleFan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // ref arg
            UIColor* fillColor = (UIColor*) args[@"fillColor"];
            // jsonable arg
            BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::renderRegionWithPoints(%@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"fillColor"], args[@"usingTriangleFan"]);
            }
        
            // invoke native method
            [ref renderRegionWithPoints : points pointCount: pointCount fillColor: fillColor usingTriangleFan: usingTriangleFan];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::renderATRegionWithPoint_pointCount_fillColor_usingTriangleFan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // ref arg
            UIColor* fillColor = (UIColor*) args[@"fillColor"];
            // jsonable arg
            BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::renderATRegionWithPoint(%@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"fillColor"], args[@"usingTriangleFan"]);
            }
        
            // invoke native method
            [ref renderATRegionWithPoint : points pointCount: pointCount fillColor: fillColor usingTriangleFan: usingTriangleFan];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::rendeCircleWithPoints_pointCount_lineWidth_fillColor_strokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // ref arg
            UIColor* fillColor = (UIColor*) args[@"fillColor"];
            // ref arg
            UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::rendeCircleWithPoints(%@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"lineWidth"], args[@"fillColor"], args[@"strokeColor"]);
            }
        
            // invoke native method
            [ref rendeCircleWithPoints : points pointCount: pointCount lineWidth: lineWidth fillColor: fillColor strokeColor: strokeColor];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::rendePolygonWithPoints_pointCount_lineWidth_fillColor_strokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            BMKMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                BMKMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // ref arg
            UIColor* fillColor = (UIColor*) args[@"fillColor"];
            // ref arg
            UIColor* strokeColor = (UIColor*) args[@"strokeColor"];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::rendePolygonWithPoints(%@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"lineWidth"], args[@"fillColor"], args[@"strokeColor"]);
            }
        
            // invoke native method
            [ref rendePolygonWithPoints : points pointCount: pointCount lineWidth: lineWidth fillColor: fillColor strokeColor: strokeColor];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::glRender": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::glRender()", args[@"refId"]);
            }
        
            // invoke native method
            [ref glRender ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlayView::loadStrokeTextureImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            UIImage* textureImage = (UIImage*) args[@"textureImage"];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::loadStrokeTextureImage(%@)", args[@"refId"], args[@"textureImage"]);
            }
        
            // invoke native method
            GLuint result = [ref loadStrokeTextureImage: textureImage];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKOverlayView::loadStrokeTextureImages": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<UIImage*>* textureImages = (NSArray<UIImage*>*) args[@"textureImages"];
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlayView@%@::loadStrokeTextureImages(%@)", args[@"refId"], args[@"textureImages"]);
            }
        
            // invoke native method
            BOOL result = [ref loadStrokeTextureImages: textureImages];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKGroundOverlayView::initWithGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKGroundOverlay* groundOverlay = (BMKGroundOverlay*) args[@"groundOverlay"];
        
            // ref
            BMKGroundOverlayView* ref = (BMKGroundOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGroundOverlayView@%@::initWithGroundOverlay(%@)", args[@"refId"], args[@"groundOverlay"]);
            }
        
            // invoke native method
            id result = [ref initWithGroundOverlay: groundOverlay];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKAnnotationView::initWithAnnotation_reuseIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<BMKAnnotation> annotation = (id<BMKAnnotation>) args[@"annotation"];
            // jsonable arg
            NSString* reuseIdentifier = (NSString*) args[@"reuseIdentifier"];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKAnnotationView@%@::initWithAnnotation(%@, %@)", args[@"refId"], args[@"annotation"], args[@"reuseIdentifier"]);
            }
        
            // invoke native method
            id result = [ref initWithAnnotation: annotation reuseIdentifier: reuseIdentifier];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKAnnotationView::prepareForReuse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKAnnotationView@%@::prepareForReuse()", args[@"refId"]);
            }
        
            // invoke native method
            [ref prepareForReuse ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKAnnotationView::setSelected_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            BOOL selected = [args[@"selected"] boolValue];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKAnnotationView@%@::setSelected(%@, %@)", args[@"refId"], args[@"selected"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setSelected : selected animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKOverlay::intersectsMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            BMKMapRect mapRect;
            [mapRectValue getValue:&mapRect];
        
            // ref
            id<BMKOverlay> ref = (id<BMKOverlay>) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOverlay@%@::intersectsMapRect(%@)", args[@"refId"], args[@"mapRect"]);
            }
        
            // invoke native method
            BOOL result = [ref intersectsMapRect: mapRect];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKOfflineMap::scan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            BOOL deleteFailedr = [args[@"deleteFailedr"] boolValue];
        
            // ref
            BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOfflineMap@%@::scan(%@)", args[@"refId"], args[@"deleteFailedr"]);
            }
        
            // invoke native method
            BOOL result = [ref scan: deleteFailedr];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKOfflineMap::start": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int cityID = [args[@"cityID"] intValue];
        
            // ref
            BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOfflineMap@%@::start(%@)", args[@"refId"], args[@"cityID"]);
            }
        
            // invoke native method
            BOOL result = [ref start: cityID];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKOfflineMap::update": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int cityID = [args[@"cityID"] intValue];
        
            // ref
            BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOfflineMap@%@::update(%@)", args[@"refId"], args[@"cityID"]);
            }
        
            // invoke native method
            BOOL result = [ref update: cityID];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKOfflineMap::pause": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int cityID = [args[@"cityID"] intValue];
        
            // ref
            BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOfflineMap@%@::pause(%@)", args[@"refId"], args[@"cityID"]);
            }
        
            // invoke native method
            BOOL result = [ref pause: cityID];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKOfflineMap::remove": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int cityID = [args[@"cityID"] intValue];
        
            // ref
            BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOfflineMap@%@::remove(%@)", args[@"refId"], args[@"cityID"]);
            }
        
            // invoke native method
            BOOL result = [ref remove: cityID];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKOfflineMap::getHotCityList": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOfflineMap@%@::getHotCityList()", args[@"refId"]);
            }
        
            // invoke native method
            NSArray* result = [ref getHotCityList];
        
            // result
            // 返回值: 列表
            NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [__result__ addObject: object];
            }
        
            methodResult(__result__);
        },
        @"BMKOfflineMap::getOfflineCityList": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOfflineMap@%@::getOfflineCityList()", args[@"refId"]);
            }
        
            // invoke native method
            NSArray* result = [ref getOfflineCityList];
        
            // result
            // 返回值: 列表
            NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [__result__ addObject: object];
            }
        
            methodResult(__result__);
        },
        @"BMKOfflineMap::searchCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* cityName = (NSString*) args[@"cityName"];
        
            // ref
            BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOfflineMap@%@::searchCity(%@)", args[@"refId"], args[@"cityName"]);
            }
        
            // invoke native method
            NSArray* result = [ref searchCity: cityName];
        
            // result
            // 返回值: 列表
            NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [__result__ addObject: object];
            }
        
            methodResult(__result__);
        },
        @"BMKOfflineMap::getAllUpdateInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOfflineMap@%@::getAllUpdateInfo()", args[@"refId"]);
            }
        
            // invoke native method
            NSArray* result = [ref getAllUpdateInfo];
        
            // result
            // 返回值: 列表
            NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [__result__ addObject: object];
            }
        
            methodResult(__result__);
        },
        @"BMKOfflineMap::getUpdateInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int cityID = [args[@"cityID"] intValue];
        
            // ref
            BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOfflineMap@%@::getUpdateInfo(%@)", args[@"refId"], args[@"cityID"]);
            }
        
            // invoke native method
            BMKOLUpdateElement* result = [ref getUpdateInfo: cityID];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKLocationReGeocode::initWithReGeocodeString": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSData* reGeocodeString = (NSData*) args[@"reGeocodeString"];
        
            // ref
            BMKLocationReGeocode* ref = (BMKLocationReGeocode*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationReGeocode@%@::initWithReGeocodeString(%@)", args[@"refId"], args[@"reGeocodeString"]);
            }
        
            // invoke native method
            id result = [ref initWithReGeocodeString: reGeocodeString];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKLocationReGeocode::initWithJsonString_withHighAccuracy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSData* jsonString = (NSData*) args[@"jsonString"];
            // jsonable arg
            BOOL highAcc = [args[@"highAcc"] boolValue];
        
            // ref
            BMKLocationReGeocode* ref = (BMKLocationReGeocode*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationReGeocode@%@::initWithJsonString(%@, %@)", args[@"refId"], args[@"jsonString"], args[@"highAcc"]);
            }
        
            // invoke native method
            id result = [ref initWithJsonString: jsonString withHighAccuracy: highAcc];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKLocationManager::requestLocationWithReGeocode_withNetworkState_completionBlock": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            BOOL withReGeocode = [args[@"withReGeocode"] boolValue];
            // jsonable arg
            BOOL withNetWorkState = [args[@"withNetWorkState"] boolValue];
        
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationManager@%@::requestLocationWithReGeocode(%@, %@, %@)", args[@"refId"], args[@"withReGeocode"], args[@"withNetWorkState"], args[@"completionBlock"]);
            }
        
            // invoke native method
            BOOL result = [ref requestLocationWithReGeocode: withReGeocode withNetworkState: withNetWorkState completionBlock: ^(BMKLocation* location, BMKLocationNetworkState state, NSError* error) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:[NSString stringWithFormat:@"BMKLocatingCompletionBlock::Callback@%@", @(ref.hash)]
                            binaryMessenger:[[weakSelf registrar] messenger]
                                      codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // ref callback arg
                BMKLocation* arglocation = location;
                // enum callback arg
                NSNumber* argstate = @((NSInteger) state);
                // ref callback arg
                NSError* argerror = error;
        
                dispatch_async(dispatch_get_main_queue(), ^{
                  [channel invokeMethod:@"Callback::BMKLocatingCompletionBlock::BMKLocatingCompletionBlock" arguments:@{@"location": arglocation == nil ? [NSNull null] : arglocation, @"state": argstate == nil ? [NSNull null] : argstate, @"error": argerror == nil ? [NSNull null] : argerror}];
                });
        
            }];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKLocationManager::startUpdatingLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationManager@%@::startUpdatingLocation()", args[@"refId"]);
            }
        
            // invoke native method
            [ref startUpdatingLocation ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKLocationManager::stopUpdatingLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationManager@%@::stopUpdatingLocation()", args[@"refId"]);
            }
        
            // invoke native method
            [ref stopUpdatingLocation ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKLocationManager::requestNetworkState": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationManager@%@::requestNetworkState()", args[@"refId"]);
            }
        
            // invoke native method
            [ref requestNetworkState ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKLocationManager::headingAvailable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationManager::headingAvailable()");
            }
        
            // invoke native method
            BOOL result = [BMKLocationManager headingAvailable];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKLocationManager::startUpdatingHeading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationManager@%@::startUpdatingHeading()", args[@"refId"]);
            }
        
            // invoke native method
            [ref startUpdatingHeading ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKLocationManager::stopUpdatingHeading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationManager@%@::stopUpdatingHeading()", args[@"refId"]);
            }
        
            // invoke native method
            [ref stopUpdatingHeading ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKLocationManager::tryIndoorLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationManager@%@::tryIndoorLocation()", args[@"refId"]);
            }
        
            // invoke native method
            [ref tryIndoorLocation ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKLocationManager::stopIndoorLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationManager@%@::stopIndoorLocation()", args[@"refId"]);
            }
        
            // invoke native method
            [ref stopIndoorLocation ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKLocationManager::BMKLocationCoordinateConvert_SrcType_DesType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // enum arg
            BMKLocationCoordinateType srctype = (BMKLocationCoordinateType) [args[@"srctype"] integerValue];
            // enum arg
            BMKLocationCoordinateType destype = (BMKLocationCoordinateType) [args[@"destype"] integerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationManager::BMKLocationCoordinateConvert(%@, %@, %@)", args[@"coordinate"], args[@"srctype"], args[@"destype"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = [BMKLocationManager BMKLocationCoordinateConvert: coordinate SrcType: srctype DesType: destype];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        @"BMKLocationManager::BMKLocationDataAvailableForCoordinate_withCoorType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // enum arg
            BMKLocationCoordinateType coortype = (BMKLocationCoordinateType) [args[@"coortype"] integerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationManager::BMKLocationDataAvailableForCoordinate(%@, %@)", args[@"coordinate"], args[@"coortype"]);
            }
        
            // invoke native method
            BOOL result = [BMKLocationManager BMKLocationDataAvailableForCoordinate: coordinate withCoorType: coortype];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKLocationAuth::sharedInstance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationAuth::sharedInstance()");
            }
        
            // invoke native method
            BMKLocationAuth* result = [BMKLocationAuth sharedInstance];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKLocationAuth::checkPermisionWithKey_authDelegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* key = (NSString*) args[@"key"];
            // ref arg
            id<BMKLocationAuthDelegate> delegate = (id<BMKLocationAuthDelegate>) args[@"delegate"];
        
            // ref
            BMKLocationAuth* ref = (BMKLocationAuth*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationAuth@%@::checkPermisionWithKey(%@, %@)", args[@"refId"], args[@"key"], args[@"delegate"]);
            }
        
            // invoke native method
            [ref checkPermisionWithKey : key authDelegate: self];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKLocationPoiRegion::initWithDictionary": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSDictionary* dictionary = (NSDictionary*) args[@"dictionary"];
        
            // ref
            BMKLocationPoiRegion* ref = (BMKLocationPoiRegion*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationPoiRegion@%@::initWithDictionary(%@)", args[@"refId"], args[@"dictionary"]);
            }
        
            // invoke native method
            id result = [ref initWithDictionary: dictionary];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKLocationPoi::initWithDictionary": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSDictionary* dictionary = (NSDictionary*) args[@"dictionary"];
        
            // ref
            BMKLocationPoi* ref = (BMKLocationPoi*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationPoi@%@::initWithDictionary(%@)", args[@"refId"], args[@"dictionary"]);
            }
        
            // invoke native method
            id result = [ref initWithDictionary: dictionary];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKLocationPoi::initWithTwoDictionary": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSDictionary* dictionary = (NSDictionary*) args[@"dictionary"];
        
            // ref
            BMKLocationPoi* ref = (BMKLocationPoi*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocationPoi@%@::initWithTwoDictionary(%@)", args[@"refId"], args[@"dictionary"]);
            }
        
            // invoke native method
            id result = [ref initWithTwoDictionary: dictionary];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKLocation::initWithLocation_withRgcData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            CLLocation* loc = (CLLocation*) args[@"loc"];
            // ref arg
            BMKLocationReGeocode* rgc = (BMKLocationReGeocode*) args[@"rgc"];
        
            // ref
            BMKLocation* ref = (BMKLocation*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocation@%@::initWithLocation(%@, %@)", args[@"refId"], args[@"loc"], args[@"rgc"]);
            }
        
            // invoke native method
            id result = [ref initWithLocation: loc withRgcData: rgc];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKLocation::initWithLocation_floorString_buildingID_buildingName_extraInfo_withRgcData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            CLLocation* location = (CLLocation*) args[@"location"];
            // jsonable arg
            NSString* floorString = (NSString*) args[@"floorString"];
            // jsonable arg
            NSString* buildingID = (NSString*) args[@"buildingID"];
            // jsonable arg
            NSString* buildingName = (NSString*) args[@"buildingName"];
            // jsonable arg
            NSDictionary* info = (NSDictionary*) args[@"info"];
            // ref arg
            BMKLocationReGeocode* rgc = (BMKLocationReGeocode*) args[@"rgc"];
        
            // ref
            BMKLocation* ref = (BMKLocation*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKLocation@%@::initWithLocation(%@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"location"], args[@"floorString"], args[@"buildingID"], args[@"buildingName"], args[@"info"], args[@"rgc"]);
            }
        
            // invoke native method
            id result = [ref initWithLocation: location floorString: floorString buildingID: buildingID buildingName: buildingName extraInfo: info withRgcData: rgc];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKGeoFenceRegion::judgeStatusWithCoor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coorValue = (NSValue*) args[@"coor"];
            CLLocationCoordinate2D coor;
            [coorValue getValue:&coor];
        
            // ref
            BMKGeoFenceRegion* ref = (BMKGeoFenceRegion*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGeoFenceRegion@%@::judgeStatusWithCoor(%@)", args[@"refId"], args[@"coor"]);
            }
        
            // invoke native method
            BMKGeoFenceRegionStatus result = [ref judgeStatusWithCoor: coor];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKGeoFenceCircleRegion::initWithCustomID_identityID_center_radius_coor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* customid = (NSString*) args[@"customid"];
            // jsonable arg
            NSString* identityid = (NSString*) args[@"identityid"];
            // struct arg
            NSValue* centerValue = (NSValue*) args[@"center"];
            CLLocationCoordinate2D center;
            [centerValue getValue:&center];
            // jsonable arg
            CLLocationDistance radius = [args[@"radius"] doubleValue];
            // enum arg
            BMKLocationCoordinateType type = (BMKLocationCoordinateType) [args[@"type"] integerValue];
        
            // ref
            BMKGeoFenceCircleRegion* ref = (BMKGeoFenceCircleRegion*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGeoFenceCircleRegion@%@::initWithCustomID(%@, %@, %@, %@, %@)", args[@"refId"], args[@"customid"], args[@"identityid"], args[@"center"], args[@"radius"], args[@"type"]);
            }
        
            // invoke native method
            id result = [ref initWithCustomID: customid identityID: identityid center: center radius: radius coor: type];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKGeoFencePolygonRegion::initWithCustomID_identityID_coor_count_coor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* customid = (NSString*) args[@"customid"];
            // jsonable arg
            NSString* identityid = (NSString*) args[@"identityid"];
            // list arg struct
            NSArray<NSValue*>* coorValueList = (NSArray<NSValue*>*) args[@"coor"];
            CLLocationCoordinate2D coor[coorValueList.count];
            for (int __i__ = 0; __i__ < coorValueList.count; __i__++) {
                NSValue* coorValue = (NSValue*) [coorValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coorItem;
                [coorValue getValue:&coorItem];
                coor[__i__] = coorItem;
            }
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
            // enum arg
            BMKLocationCoordinateType type = (BMKLocationCoordinateType) [args[@"type"] integerValue];
        
            // ref
            BMKGeoFencePolygonRegion* ref = (BMKGeoFencePolygonRegion*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGeoFencePolygonRegion@%@::initWithCustomID(%@, %@, %@, %@, %@)", args[@"refId"], args[@"customid"], args[@"identityid"], args[@"coor"], args[@"count"], args[@"type"]);
            }
        
            // invoke native method
            id result = [ref initWithCustomID: customid identityID: identityid coor: coor count: count coor: type];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKGeoFenceManager::addCircleRegionForMonitoringWithCenter_radius_coorType_customID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* centerValue = (NSValue*) args[@"center"];
            CLLocationCoordinate2D center;
            [centerValue getValue:&center];
            // jsonable arg
            CLLocationDistance radius = [args[@"radius"] doubleValue];
            // enum arg
            BMKLocationCoordinateType type = (BMKLocationCoordinateType) [args[@"type"] integerValue];
            // jsonable arg
            NSString* customID = (NSString*) args[@"customID"];
        
            // ref
            BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGeoFenceManager@%@::addCircleRegionForMonitoringWithCenter(%@, %@, %@, %@)", args[@"refId"], args[@"center"], args[@"radius"], args[@"type"], args[@"customID"]);
            }
        
            // invoke native method
            [ref addCircleRegionForMonitoringWithCenter : center radius: radius coorType: type customID: customID];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKGeoFenceManager::addPolygonRegionForMonitoringWithCoordinates_count_coorType_customID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordinatesValueList = (NSArray<NSValue*>*) args[@"coordinates"];
            CLLocationCoordinate2D coordinates[coordinatesValueList.count];
            for (int __i__ = 0; __i__ < coordinatesValueList.count; __i__++) {
                NSValue* coordinatesValue = (NSValue*) [coordinatesValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordinatesItem;
                [coordinatesValue getValue:&coordinatesItem];
                coordinates[__i__] = coordinatesItem;
            }
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
            // enum arg
            BMKLocationCoordinateType type = (BMKLocationCoordinateType) [args[@"type"] integerValue];
            // jsonable arg
            NSString* customID = (NSString*) args[@"customID"];
        
            // ref
            BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGeoFenceManager@%@::addPolygonRegionForMonitoringWithCoordinates(%@, %@, %@, %@)", args[@"refId"], args[@"coordinates"], args[@"count"], args[@"type"], args[@"customID"]);
            }
        
            // invoke native method
            [ref addPolygonRegionForMonitoringWithCoordinates : coordinates count: count coorType: type customID: customID];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKGeoFenceManager::geoFenceRegionsWithCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* customID = (NSString*) args[@"customID"];
        
            // ref
            BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGeoFenceManager@%@::geoFenceRegionsWithCustomID(%@)", args[@"refId"], args[@"customID"]);
            }
        
            // invoke native method
            NSArray* result = [ref geoFenceRegionsWithCustomID: customID];
        
            // result
            // 返回值: 列表
            NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [__result__ addObject: object];
            }
        
            methodResult(__result__);
        },
        @"BMKGeoFenceManager::removeTheGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKGeoFenceRegion* region = (BMKGeoFenceRegion*) args[@"region"];
        
            // ref
            BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGeoFenceManager@%@::removeTheGeoFenceRegion(%@)", args[@"refId"], args[@"region"]);
            }
        
            // invoke native method
            [ref removeTheGeoFenceRegion : region];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKGeoFenceManager::removeGeoFenceRegionsWithCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* customID = (NSString*) args[@"customID"];
        
            // ref
            BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGeoFenceManager@%@::removeGeoFenceRegionsWithCustomID(%@)", args[@"refId"], args[@"customID"]);
            }
        
            // invoke native method
            [ref removeGeoFenceRegionsWithCustomID : customID];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKGeoFenceManager::removeAllGeoFenceRegions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGeoFenceManager@%@::removeAllGeoFenceRegions()", args[@"refId"]);
            }
        
            // invoke native method
            [ref removeAllGeoFenceRegions ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKActionPaopaoView::initWithCustomView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIView* customView = (UIView*) args[@"customView"];
        
                // ref
                BMKActionPaopaoView* ref = (BMKActionPaopaoView*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithCustomView: customView];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKAnnotation::title_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                id<BMKAnnotation> ref = (id<BMKAnnotation>) args[@"__this__"];
        
                // invoke native method
                NSString* result = [ref title];
        
                // result
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKAnnotation::subtitle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                id<BMKAnnotation> ref = (id<BMKAnnotation>) args[@"__this__"];
        
                // invoke native method
                NSString* result = [ref subtitle];
        
                // result
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKAnnotation::setCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* newCoordinateValue = (NSValue*) args[@"newCoordinate"];
                CLLocationCoordinate2D newCoordinate;
                [newCoordinateValue getValue:&newCoordinate];
        
                // ref
                id<BMKAnnotation> ref = (id<BMKAnnotation>) args[@"__this__"];
        
                // invoke native method
                [ref setCoordinate : newCoordinate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKTileLayerView::initWithTileLayer_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKTileLayer* tileLayer = (BMKTileLayer*) args[@"tileLayer"];
        
                // ref
                BMKTileLayerView* ref = (BMKTileLayerView*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithTileLayer: tileLayer];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayPathView::createPath_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
        
                // invoke native method
                [ref createPath ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOverlayPathView::invalidatePath_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
        
                // invoke native method
                [ref invalidatePath ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKGroundOverlay::groundOverlayWithPosition_zoomLevel_anchor_icon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* positionValue = (NSValue*) args[@"position"];
                CLLocationCoordinate2D position;
                [positionValue getValue:&position];
                // jsonable arg
                CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
                // struct arg
                NSValue* anchorValue = (NSValue*) args[@"anchor"];
                CGPoint anchor;
                [anchorValue getValue:&anchor];
                // ref arg
                UIImage* icon = (UIImage*) args[@"icon"];
        
                // ref
        
        
                // invoke native method
                BMKGroundOverlay* result = [BMKGroundOverlay groundOverlayWithPosition: position zoomLevel: zoomLevel anchor: anchor icon: icon];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKGroundOverlay::groundOverlayWithBounds_icon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* boundsValue = (NSValue*) args[@"bounds"];
                BMKCoordinateBounds bounds;
                [boundsValue getValue:&bounds];
                // ref arg
                UIImage* icon = (UIImage*) args[@"icon"];
        
                // ref
        
        
                // invoke native method
                BMKGroundOverlay* result = [BMKGroundOverlay groundOverlayWithBounds: bounds icon: icon];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKPolyline::polylineWithPoints_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
        
        
                // invoke native method
                BMKPolyline* result = [BMKPolyline polylineWithPoints: points count: count];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKPolyline::polylineWithCoordinates_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsValueList.count];
                for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                    NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[__i__] = coordsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
        
        
                // invoke native method
                BMKPolyline* result = [BMKPolyline polylineWithCoordinates: coords count: count];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKPolyline::setPolylineWithPoints_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSInteger count = [args[@"count"] longValue];
        
                // ref
                BMKPolyline* ref = (BMKPolyline*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref setPolylineWithPoints: points count: count];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKPolyline::setPolylineWithCoordinates_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsValueList.count];
                for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                    NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[__i__] = coordsItem;
                }
                // jsonable arg
                NSInteger count = [args[@"count"] longValue];
        
                // ref
                BMKPolyline* ref = (BMKPolyline*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref setPolylineWithCoordinates: coords count: count];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKPolyline::polylineWithPoints_count_textureIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
                // jsonable arg
                NSArray<NSNumber*>* textureIndex = (NSArray<NSNumber*>*) args[@"textureIndex"];
        
                // ref
        
        
                // invoke native method
                BMKPolyline* result = [BMKPolyline polylineWithPoints: points count: count textureIndex: textureIndex];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKPolyline::polylineWithCoordinates_count_textureIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsValueList.count];
                for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                    NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[__i__] = coordsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
                // jsonable arg
                NSArray<NSNumber*>* textureIndex = (NSArray<NSNumber*>*) args[@"textureIndex"];
        
                // ref
        
        
                // invoke native method
                BMKPolyline* result = [BMKPolyline polylineWithCoordinates: coords count: count textureIndex: textureIndex];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKPolyline::setPolylineWithPoints_count_textureIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSInteger count = [args[@"count"] longValue];
                // jsonable arg
                NSArray<NSNumber*>* textureIndex = (NSArray<NSNumber*>*) args[@"textureIndex"];
        
                // ref
                BMKPolyline* ref = (BMKPolyline*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref setPolylineWithPoints: points count: count textureIndex: textureIndex];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKPolyline::setPolylineWithCoordinates_count_textureIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsValueList.count];
                for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                    NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[__i__] = coordsItem;
                }
                // jsonable arg
                NSInteger count = [args[@"count"] longValue];
                // jsonable arg
                NSArray<NSNumber*>* textureIndex = (NSArray<NSNumber*>*) args[@"textureIndex"];
        
                // ref
                BMKPolyline* ref = (BMKPolyline*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref setPolylineWithCoordinates: coords count: count textureIndex: textureIndex];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKCircleView::initWithCircle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKCircle* circle = (BMKCircle*) args[@"circle"];
        
                // ref
                BMKCircleView* ref = (BMKCircleView*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithCircle: circle];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKGradient::initWithColors_startPoints_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* colors = (NSArray<NSObject*>*) args[@"colors"];
                // list arg
                NSArray<NSObject*>* startPoints = (NSArray<NSObject*>*) args[@"startPoints"];
        
                // ref
                BMKGradient* ref = (BMKGradient*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithColors: colors startPoints: startPoints];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKArcline::arclineWithPoints_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
        
                // ref
        
        
                // invoke native method
                BMKArcline* result = [BMKArcline arclineWithPoints: points];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKArcline::arclineWithCoordinates_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsValueList.count];
                for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                    NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[__i__] = coordsItem;
                }
        
                // ref
        
        
                // invoke native method
                BMKArcline* result = [BMKArcline arclineWithCoordinates: coords];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKArcline::setArclineWithPoints_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                BMKMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    BMKMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
        
                // ref
                BMKArcline* ref = (BMKArcline*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref setArclineWithPoints: points];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKArcline::setArclineWithCoordinates_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsValueList.count];
                for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                    NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[__i__] = coordsItem;
                }
        
                // ref
                BMKArcline* ref = (BMKArcline*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref setArclineWithCoordinates: coords];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKURLTileLayer::initWithURLTemplate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* URLTemplate = (NSString*) args[@"URLTemplate"];
        
                // ref
                BMKURLTileLayer* ref = (BMKURLTileLayer*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithURLTemplate: URLTemplate];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKURLTileLayer::cleanTileDataCache_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKURLTileLayer* ref = (BMKURLTileLayer*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref cleanTileDataCache];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKSyncTileLayer::tileForX_y_zoom_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSInteger x = [args[@"x"] longValue];
                // jsonable arg
                NSInteger y = [args[@"y"] longValue];
                // jsonable arg
                NSInteger zoom = [args[@"zoom"] longValue];
        
                // ref
                BMKSyncTileLayer* ref = (BMKSyncTileLayer*) args[@"__this__"];
        
                // invoke native method
                UIImage* result = [ref tileForX: x y: y zoom: zoom];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKPolylineView::initWithPolyline_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKPolyline* polyline = (BMKPolyline*) args[@"polyline"];
        
                // ref
                BMKPolylineView* ref = (BMKPolylineView*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithPolyline: polyline];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
    };
}

@end
