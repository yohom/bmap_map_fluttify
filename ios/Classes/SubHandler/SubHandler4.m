//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler4.h"
#import "FluttifyMessageCodec.h"
#import <BaiduMapAPI_Map/BMKMapComponent.h>
#import <BMKLocationKit/BMKLocationComponent.h>

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSString*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation BmapMapFluttifyPlugin (SubHandler4)
- (NSDictionary<NSString*, Handler>*) getSubHandler4 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"BMKMapView::set_trafficEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_trafficEnabled");
            }
        
            // args
            // jsonable arg
            BOOL trafficEnabled = [args[@"trafficEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.trafficEnabled = trafficEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_baiduHeatMapEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_baiduHeatMapEnabled");
            }
        
            // args
            // jsonable arg
            BOOL baiduHeatMapEnabled = [args[@"baiduHeatMapEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.baiduHeatMapEnabled = baiduHeatMapEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_gesturesEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_gesturesEnabled");
            }
        
            // args
            // jsonable arg
            BOOL gesturesEnabled = [args[@"gesturesEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.gesturesEnabled = gesturesEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_zoomEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_zoomEnabled");
            }
        
            // args
            // jsonable arg
            BOOL zoomEnabled = [args[@"zoomEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.zoomEnabled = zoomEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_zoomEnabledWithTap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_zoomEnabledWithTap");
            }
        
            // args
            // jsonable arg
            BOOL zoomEnabledWithTap = [args[@"zoomEnabledWithTap"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.zoomEnabledWithTap = zoomEnabledWithTap;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_scrollEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_scrollEnabled");
            }
        
            // args
            // jsonable arg
            BOOL scrollEnabled = [args[@"scrollEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.scrollEnabled = scrollEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_overlookEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_overlookEnabled");
            }
        
            // args
            // jsonable arg
            BOOL overlookEnabled = [args[@"overlookEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.overlookEnabled = overlookEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_rotateEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_rotateEnabled");
            }
        
            // args
            // jsonable arg
            BOOL rotateEnabled = [args[@"rotateEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.rotateEnabled = rotateEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_forceTouchEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_forceTouchEnabled");
            }
        
            // args
            // jsonable arg
            BOOL forceTouchEnabled = [args[@"forceTouchEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.forceTouchEnabled = forceTouchEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_showMapScaleBar": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_showMapScaleBar");
            }
        
            // args
            // jsonable arg
            BOOL showMapScaleBar = [args[@"showMapScaleBar"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.showMapScaleBar = showMapScaleBar;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_mapScaleBarPosition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_mapScaleBarPosition");
            }
        
            // args
            // struct arg
            NSValue* mapScaleBarPositionValue = (NSValue*) args[@"mapScaleBarPosition"];
            CGPoint mapScaleBarPosition;
            if (mapScaleBarPositionValue != nil && (NSNull*) mapScaleBarPositionValue != [NSNull null]) {
              [mapScaleBarPositionValue getValue:&mapScaleBarPosition];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"mapScaleBarPosition不能为null"]);
              return;
            }
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.mapScaleBarPosition = mapScaleBarPosition;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_logoPosition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_logoPosition");
            }
        
            // args
            // enum arg
            BMKLogoPosition logoPosition = (BMKLogoPosition) [args[@"logoPosition"] integerValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.logoPosition = logoPosition;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_visibleMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_visibleMapRect");
            }
        
            // args
            // struct arg
            NSValue* visibleMapRectValue = (NSValue*) args[@"visibleMapRect"];
            BMKMapRect visibleMapRect;
            if (visibleMapRectValue != nil && (NSNull*) visibleMapRectValue != [NSNull null]) {
              [visibleMapRectValue getValue:&visibleMapRect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"visibleMapRect不能为null"]);
              return;
            }
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.visibleMapRect = visibleMapRect;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_mapPadding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_mapPadding");
            }
        
            // args
            // struct arg
            NSValue* mapPaddingValue = (NSValue*) args[@"mapPadding"];
            UIEdgeInsets mapPadding;
            if (mapPaddingValue != nil && (NSNull*) mapPaddingValue != [NSNull null]) {
              [mapPaddingValue getValue:&mapPadding];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"mapPadding不能为null"]);
              return;
            }
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.mapPadding = mapPadding;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_updateTargetScreenPtWhenMapPaddingChanged": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_updateTargetScreenPtWhenMapPaddingChanged");
            }
        
            // args
            // jsonable arg
            BOOL updateTargetScreenPtWhenMapPaddingChanged = [args[@"updateTargetScreenPtWhenMapPaddingChanged"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.updateTargetScreenPtWhenMapPaddingChanged = updateTargetScreenPtWhenMapPaddingChanged;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_ChangeWithTouchPointCenterEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_ChangeWithTouchPointCenterEnabled");
            }
        
            // args
            // jsonable arg
            BOOL ChangeWithTouchPointCenterEnabled = [args[@"ChangeWithTouchPointCenterEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.ChangeWithTouchPointCenterEnabled = ChangeWithTouchPointCenterEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_ChangeCenterWithDoubleTouchPointEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_ChangeCenterWithDoubleTouchPointEnabled");
            }
        
            // args
            // jsonable arg
            BOOL ChangeCenterWithDoubleTouchPointEnabled = [args[@"ChangeCenterWithDoubleTouchPointEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.ChangeCenterWithDoubleTouchPointEnabled = ChangeCenterWithDoubleTouchPointEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_baseIndoorMapEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_baseIndoorMapEnabled");
            }
        
            // args
            // jsonable arg
            BOOL baseIndoorMapEnabled = [args[@"baseIndoorMapEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.baseIndoorMapEnabled = baseIndoorMapEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_showIndoorMapPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_showIndoorMapPoi");
            }
        
            // args
            // jsonable arg
            BOOL showIndoorMapPoi = [args[@"showIndoorMapPoi"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.showIndoorMapPoi = showIndoorMapPoi;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_showsUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_showsUserLocation");
            }
        
            // args
            // jsonable arg
            BOOL showsUserLocation = [args[@"showsUserLocation"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.showsUserLocation = showsUserLocation;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_userTrackingMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_userTrackingMode");
            }
        
            // args
            // enum arg
            BMKUserTrackingMode userTrackingMode = (BMKUserTrackingMode) [args[@"userTrackingMode"] integerValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.userTrackingMode = userTrackingMode;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_isSelectedAnnotationViewFront": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_isSelectedAnnotationViewFront");
            }
        
            // args
            // jsonable arg
            BOOL isSelectedAnnotationViewFront = [args[@"isSelectedAnnotationViewFront"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.isSelectedAnnotationViewFront = isSelectedAnnotationViewFront;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewOffsetX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_locationViewOffsetX");
            }
        
            // args
            // jsonable arg
            CGFloat locationViewOffsetX = [args[@"locationViewOffsetX"] floatValue];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.locationViewOffsetX = locationViewOffsetX;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewOffsetY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_locationViewOffsetY");
            }
        
            // args
            // jsonable arg
            CGFloat locationViewOffsetY = [args[@"locationViewOffsetY"] floatValue];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.locationViewOffsetY = locationViewOffsetY;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_isAccuracyCircleShow": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_isAccuracyCircleShow");
            }
        
            // args
            // jsonable arg
            BOOL isAccuracyCircleShow = [args[@"isAccuracyCircleShow"] boolValue];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.isAccuracyCircleShow = isAccuracyCircleShow;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_accuracyCircleFillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_accuracyCircleFillColor");
            }
        
            // args
            // ref arg
            UIColor* accuracyCircleFillColor = (UIColor*) (args[@"accuracyCircleFillColor"] == [NSNull null] ? nil : args[@"accuracyCircleFillColor"]);
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.accuracyCircleFillColor = accuracyCircleFillColor;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_accuracyCircleStrokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_accuracyCircleStrokeColor");
            }
        
            // args
            // ref arg
            UIColor* accuracyCircleStrokeColor = (UIColor*) (args[@"accuracyCircleStrokeColor"] == [NSNull null] ? nil : args[@"accuracyCircleStrokeColor"]);
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.accuracyCircleStrokeColor = accuracyCircleStrokeColor;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_isRotateAngleValid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_isRotateAngleValid");
            }
        
            // args
            // jsonable arg
            BOOL isRotateAngleValid = [args[@"isRotateAngleValid"] boolValue];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.isRotateAngleValid = isRotateAngleValid;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewImgName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_locationViewImgName");
            }
        
            // args
            // jsonable arg
            NSString* locationViewImgName = (NSString*) args[@"locationViewImgName"];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.locationViewImgName = locationViewImgName;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_locationViewImage");
            }
        
            // args
            // ref arg
            UIImage* locationViewImage = (UIImage*) (args[@"locationViewImage"] == [NSNull null] ? nil : args[@"locationViewImage"]);
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.locationViewImage = locationViewImage;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_canShowCallOut": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_canShowCallOut");
            }
        
            // args
            // jsonable arg
            BOOL canShowCallOut = [args[@"canShowCallOut"] boolValue];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.canShowCallOut = canShowCallOut;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewHierarchy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_locationViewHierarchy");
            }
        
            // args
            // enum arg
            LocationViewHierarchy locationViewHierarchy = (LocationViewHierarchy) [args[@"locationViewHierarchy"] integerValue];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.locationViewHierarchy = locationViewHierarchy;
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_fLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapStatus::set_fLevel");
            }
        
            // args
            // jsonable arg
            float fLevel = [args[@"fLevel"] floatValue];
        
            // ref
            BMKMapStatus* ref = (BMKMapStatus*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.fLevel = fLevel;
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_fRotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapStatus::set_fRotation");
            }
        
            // args
            // jsonable arg
            float fRotation = [args[@"fRotation"] floatValue];
        
            // ref
            BMKMapStatus* ref = (BMKMapStatus*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.fRotation = fRotation;
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_fOverlooking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapStatus::set_fOverlooking");
            }
        
            // args
            // jsonable arg
            float fOverlooking = [args[@"fOverlooking"] floatValue];
        
            // ref
            BMKMapStatus* ref = (BMKMapStatus*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.fOverlooking = fOverlooking;
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_targetScreenPt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapStatus::set_targetScreenPt");
            }
        
            // args
            // struct arg
            NSValue* targetScreenPtValue = (NSValue*) args[@"targetScreenPt"];
            CGPoint targetScreenPt;
            if (targetScreenPtValue != nil && (NSNull*) targetScreenPtValue != [NSNull null]) {
              [targetScreenPtValue getValue:&targetScreenPt];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"targetScreenPt不能为null"]);
              return;
            }
        
        
            // ref
            BMKMapStatus* ref = (BMKMapStatus*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.targetScreenPt = targetScreenPt;
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_targetGeoPt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapStatus::set_targetGeoPt");
            }
        
            // args
            // struct arg
            NSValue* targetGeoPtValue = (NSValue*) args[@"targetGeoPt"];
            CLLocationCoordinate2D targetGeoPt;
            if (targetGeoPtValue != nil && (NSNull*) targetGeoPtValue != [NSNull null]) {
              [targetGeoPtValue getValue:&targetGeoPt];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"targetGeoPt不能为null"]);
              return;
            }
        
        
            // ref
            BMKMapStatus* ref = (BMKMapStatus*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.targetGeoPt = targetGeoPt;
            methodResult(@"success");
        },
        
        @"BMKHeatMapNode::set_intensity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKHeatMapNode::set_intensity");
            }
        
            // args
            // jsonable arg
            double intensity = [args[@"intensity"] doubleValue];
        
            // ref
            BMKHeatMapNode* ref = (BMKHeatMapNode*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.intensity = intensity;
            methodResult(@"success");
        },
        
        @"BMKHeatMapNode::set_pt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKHeatMapNode::set_pt");
            }
        
            // args
            // struct arg
            NSValue* ptValue = (NSValue*) args[@"pt"];
            CLLocationCoordinate2D pt;
            if (ptValue != nil && (NSNull*) ptValue != [NSNull null]) {
              [ptValue getValue:&pt];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"pt不能为null"]);
              return;
            }
        
        
            // ref
            BMKHeatMapNode* ref = (BMKHeatMapNode*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.pt = pt;
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mRadius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKHeatMap::set_mRadius");
            }
        
            // args
            // jsonable arg
            int mRadius = [args[@"mRadius"] intValue];
        
            // ref
            BMKHeatMap* ref = (BMKHeatMap*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.mRadius = mRadius;
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKHeatMap::set_mGradient");
            }
        
            // args
            // ref arg
            BMKGradient* mGradient = (BMKGradient*) (args[@"mGradient"] == [NSNull null] ? nil : args[@"mGradient"]);
        
            // ref
            BMKHeatMap* ref = (BMKHeatMap*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.mGradient = mGradient;
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mOpacity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKHeatMap::set_mOpacity");
            }
        
            // args
            // jsonable arg
            double mOpacity = [args[@"mOpacity"] doubleValue];
        
            // ref
            BMKHeatMap* ref = (BMKHeatMap*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.mOpacity = mOpacity;
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKHeatMap::set_mData");
            }
        
            // args
            // list arg
            NSArray<NSObject*>* mData = (NSArray<NSObject*>*) args[@"mData"];
        
            // ref
            BMKHeatMap* ref = (BMKHeatMap*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.mData = mData;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_paopaoView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_paopaoView");
            }
        
            // args
            // ref arg
            BMKActionPaopaoView* paopaoView = (BMKActionPaopaoView*) (args[@"paopaoView"] == [NSNull null] ? nil : args[@"paopaoView"]);
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.paopaoView = paopaoView;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_annotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_annotation");
            }
        
            // args
            // ref arg
            id<BMKAnnotation> annotation = (id<BMKAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.annotation = annotation;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_image": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_image");
            }
        
            // args
            // ref arg
            UIImage* image = (UIImage*) (args[@"image"] == [NSNull null] ? nil : args[@"image"]);
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.image = image;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_centerOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_centerOffset");
            }
        
            // args
            // struct arg
            NSValue* centerOffsetValue = (NSValue*) args[@"centerOffset"];
            CGPoint centerOffset;
            if (centerOffsetValue != nil && (NSNull*) centerOffsetValue != [NSNull null]) {
              [centerOffsetValue getValue:&centerOffset];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"centerOffset不能为null"]);
              return;
            }
        
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.centerOffset = centerOffset;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_calloutOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_calloutOffset");
            }
        
            // args
            // struct arg
            NSValue* calloutOffsetValue = (NSValue*) args[@"calloutOffset"];
            CGPoint calloutOffset;
            if (calloutOffsetValue != nil && (NSNull*) calloutOffsetValue != [NSNull null]) {
              [calloutOffsetValue getValue:&calloutOffset];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"calloutOffset不能为null"]);
              return;
            }
        
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.calloutOffset = calloutOffset;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_enabled3D": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_enabled3D");
            }
        
            // args
            // jsonable arg
            BOOL enabled3D = [args[@"enabled3D"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.enabled3D = enabled3D;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_enabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_enabled");
            }
        
            // args
            // jsonable arg
            BOOL enabled = [args[@"enabled"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.enabled = enabled;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_selected": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_selected");
            }
        
            // args
            // jsonable arg
            BOOL selected = [args[@"selected"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.selected = selected;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_canShowCallout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_canShowCallout");
            }
        
            // args
            // jsonable arg
            BOOL canShowCallout = [args[@"canShowCallout"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.canShowCallout = canShowCallout;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_leftCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_leftCalloutAccessoryView");
            }
        
            // args
            // ref arg
            UIView* leftCalloutAccessoryView = (UIView*) (args[@"leftCalloutAccessoryView"] == [NSNull null] ? nil : args[@"leftCalloutAccessoryView"]);
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.leftCalloutAccessoryView = leftCalloutAccessoryView;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_rightCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_rightCalloutAccessoryView");
            }
        
            // args
            // ref arg
            UIView* rightCalloutAccessoryView = (UIView*) (args[@"rightCalloutAccessoryView"] == [NSNull null] ? nil : args[@"rightCalloutAccessoryView"]);
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.rightCalloutAccessoryView = rightCalloutAccessoryView;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_draggable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_draggable");
            }
        
            // args
            // jsonable arg
            BOOL draggable = [args[@"draggable"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.draggable = draggable;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_dragState": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_dragState");
            }
        
            // args
            // jsonable arg
            NSUInteger dragState = [args[@"dragState"] unsignedIntegerValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.dragState = dragState;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenSingleTapOnMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_hidePaopaoWhenSingleTapOnMap");
            }
        
            // args
            // jsonable arg
            BOOL hidePaopaoWhenSingleTapOnMap = [args[@"hidePaopaoWhenSingleTapOnMap"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.hidePaopaoWhenSingleTapOnMap = hidePaopaoWhenSingleTapOnMap;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenDoubleTapOnMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_hidePaopaoWhenDoubleTapOnMap");
            }
        
            // args
            // jsonable arg
            BOOL hidePaopaoWhenDoubleTapOnMap = [args[@"hidePaopaoWhenDoubleTapOnMap"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.hidePaopaoWhenDoubleTapOnMap = hidePaopaoWhenDoubleTapOnMap;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenTwoFingersTapOnMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_hidePaopaoWhenTwoFingersTapOnMap");
            }
        
            // args
            // jsonable arg
            BOOL hidePaopaoWhenTwoFingersTapOnMap = [args[@"hidePaopaoWhenTwoFingersTapOnMap"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.hidePaopaoWhenTwoFingersTapOnMap = hidePaopaoWhenTwoFingersTapOnMap;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenSelectOthers": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_hidePaopaoWhenSelectOthers");
            }
        
            // args
            // jsonable arg
            BOOL hidePaopaoWhenSelectOthers = [args[@"hidePaopaoWhenSelectOthers"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.hidePaopaoWhenSelectOthers = hidePaopaoWhenSelectOthers;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenDrag": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_hidePaopaoWhenDrag");
            }
        
            // args
            // jsonable arg
            BOOL hidePaopaoWhenDrag = [args[@"hidePaopaoWhenDrag"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.hidePaopaoWhenDrag = hidePaopaoWhenDrag;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenDragOthers": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_hidePaopaoWhenDragOthers");
            }
        
            // args
            // jsonable arg
            BOOL hidePaopaoWhenDragOthers = [args[@"hidePaopaoWhenDragOthers"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.hidePaopaoWhenDragOthers = hidePaopaoWhenDragOthers;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_displayPriority": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_displayPriority");
            }
        
            // args
            // jsonable arg
            float displayPriority = [args[@"displayPriority"] floatValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.displayPriority = displayPriority;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_fillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_fillColor");
            }
        
            // args
            // ref arg
            UIColor* fillColor = (UIColor*) (args[@"fillColor"] == [NSNull null] ? nil : args[@"fillColor"]);
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.fillColor = fillColor;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_strokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_strokeColor");
            }
        
            // args
            // ref arg
            UIColor* strokeColor = (UIColor*) (args[@"strokeColor"] == [NSNull null] ? nil : args[@"strokeColor"]);
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.strokeColor = strokeColor;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_lineWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_lineWidth");
            }
        
            // args
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.lineWidth = lineWidth;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_lineDash": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_lineDash");
            }
        
            // args
            // jsonable arg
            BOOL lineDash = [args[@"lineDash"] boolValue];
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.lineDash = lineDash;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_tileTexture": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_tileTexture");
            }
        
            // args
            // jsonable arg
            BOOL tileTexture = [args[@"tileTexture"] boolValue];
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.tileTexture = tileTexture;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_keepScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_keepScale");
            }
        
            // args
            // jsonable arg
            BOOL keepScale = [args[@"keepScale"] boolValue];
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.keepScale = keepScale;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_lineDashType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_lineDashType");
            }
        
            // args
            // enum arg
            BMKLineDashType lineDashType = (BMKLineDashType) [args[@"lineDashType"] integerValue];
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.lineDashType = lineDashType;
            methodResult(@"success");
        },
        
        @"BMKShape::set_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKShape::set_title");
            }
        
            // args
            // jsonable arg
            NSString* title = (NSString*) args[@"title"];
        
            // ref
            BMKShape* ref = (BMKShape*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.title = title;
            methodResult(@"success");
        },
        
        @"BMKShape::set_subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKShape::set_subtitle");
            }
        
            // args
            // jsonable arg
            NSString* subtitle = (NSString*) args[@"subtitle"];
        
            // ref
            BMKShape* ref = (BMKShape*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.subtitle = subtitle;
            methodResult(@"success");
        },
        
        @"BMKOLSearchRecord::set_cityName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLSearchRecord::set_cityName");
            }
        
            // args
            // jsonable arg
            NSString* cityName = (NSString*) args[@"cityName"];
        
            // ref
            BMKOLSearchRecord* ref = (BMKOLSearchRecord*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.cityName = cityName;
            methodResult(@"success");
        },
        
        @"BMKOLSearchRecord::set_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLSearchRecord::set_size");
            }
        
            // args
            // jsonable arg
            int64_t size = [args[@"size"] longLongValue];
        
            // ref
            BMKOLSearchRecord* ref = (BMKOLSearchRecord*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.size = size;
            methodResult(@"success");
        },
        
        @"BMKOLSearchRecord::set_cityID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLSearchRecord::set_cityID");
            }
        
            // args
            // jsonable arg
            int cityID = [args[@"cityID"] intValue];
        
            // ref
            BMKOLSearchRecord* ref = (BMKOLSearchRecord*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.cityID = cityID;
            methodResult(@"success");
        },
        
        @"BMKOLSearchRecord::set_cityType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLSearchRecord::set_cityType");
            }
        
            // args
            // jsonable arg
            int cityType = [args[@"cityType"] intValue];
        
            // ref
            BMKOLSearchRecord* ref = (BMKOLSearchRecord*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.cityType = cityType;
            methodResult(@"success");
        },
        
        @"BMKOLSearchRecord::set_childCities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLSearchRecord::set_childCities");
            }
        
            // args
            // list arg
            NSArray<NSObject*>* childCities = (NSArray<NSObject*>*) args[@"childCities"];
        
            // ref
            BMKOLSearchRecord* ref = (BMKOLSearchRecord*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.childCities = childCities;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_cityName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_cityName");
            }
        
            // args
            // jsonable arg
            NSString* cityName = (NSString*) args[@"cityName"];
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.cityName = cityName;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_cityID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_cityID");
            }
        
            // args
            // jsonable arg
            int cityID = [args[@"cityID"] intValue];
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.cityID = cityID;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_size");
            }
        
            // args
            // jsonable arg
            int64_t size = [args[@"size"] longLongValue];
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.size = size;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_serversize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_serversize");
            }
        
            // args
            // jsonable arg
            int64_t serversize = [args[@"serversize"] longLongValue];
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.serversize = serversize;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_ratio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_ratio");
            }
        
            // args
            // jsonable arg
            int ratio = [args[@"ratio"] intValue];
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.ratio = ratio;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_status": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_status");
            }
        
            // args
            // jsonable arg
            int status = [args[@"status"] intValue];
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.status = status;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_update": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_update");
            }
        
            // args
            // jsonable arg
            BOOL update = [args[@"update"] boolValue];
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.update = update;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_pt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_pt");
            }
        
            // args
            // struct arg
            NSValue* ptValue = (NSValue*) args[@"pt"];
            CLLocationCoordinate2D pt;
            if (ptValue != nil && (NSNull*) ptValue != [NSNull null]) {
              [ptValue getValue:&pt];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"pt不能为null"]);
              return;
            }
        
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.pt = pt;
            methodResult(@"success");
        },
        
        @"BMKCustomMapStyleOption::set_customMapStyleID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCustomMapStyleOption::set_customMapStyleID");
            }
        
            // args
            // jsonable arg
            NSString* customMapStyleID = (NSString*) args[@"customMapStyleID"];
        
            // ref
            BMKCustomMapStyleOption* ref = (BMKCustomMapStyleOption*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.customMapStyleID = customMapStyleID;
            methodResult(@"success");
        },
        
        @"BMKCustomMapStyleOption::set_customMapStyleFilePath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCustomMapStyleOption::set_customMapStyleFilePath");
            }
        
            // args
            // jsonable arg
            NSString* customMapStyleFilePath = (NSString*) args[@"customMapStyleFilePath"];
        
            // ref
            BMKCustomMapStyleOption* ref = (BMKCustomMapStyleOption*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.customMapStyleFilePath = customMapStyleFilePath;
            methodResult(@"success");
        },
        
        @"BMKOfflineMap::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOfflineMap::set_delegate");
            }
        
            // args
        
        
            // ref
            BMKOfflineMap* ref = (BMKOfflineMap*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.delegate = weakSelf;
            methodResult(@"success");
        },
        
        @"BMKLocationManager::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationManager::set_delegate");
            }
        
            // args
        
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.delegate = weakSelf;
            methodResult(@"success");
        },
        
        @"BMKLocationManager::set_distanceFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationManager::set_distanceFilter");
            }
        
            // args
            // jsonable arg
            CLLocationDistance distanceFilter = [args[@"distanceFilter"] doubleValue];
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.distanceFilter = distanceFilter;
            methodResult(@"success");
        },
        
        @"BMKLocationManager::set_desiredAccuracy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationManager::set_desiredAccuracy");
            }
        
            // args
            // jsonable arg
            CLLocationAccuracy desiredAccuracy = [args[@"desiredAccuracy"] doubleValue];
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.desiredAccuracy = desiredAccuracy;
            methodResult(@"success");
        },
        
        @"BMKLocationManager::set_coordinateType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationManager::set_coordinateType");
            }
        
            // args
            // enum arg
            BMKLocationCoordinateType coordinateType = (BMKLocationCoordinateType) [args[@"coordinateType"] integerValue];
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.coordinateType = coordinateType;
            methodResult(@"success");
        },
        
        @"BMKLocationManager::set_pausesLocationUpdatesAutomatically": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationManager::set_pausesLocationUpdatesAutomatically");
            }
        
            // args
            // jsonable arg
            BOOL pausesLocationUpdatesAutomatically = [args[@"pausesLocationUpdatesAutomatically"] boolValue];
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.pausesLocationUpdatesAutomatically = pausesLocationUpdatesAutomatically;
            methodResult(@"success");
        },
        
        @"BMKLocationManager::set_allowsBackgroundLocationUpdates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationManager::set_allowsBackgroundLocationUpdates");
            }
        
            // args
            // jsonable arg
            BOOL allowsBackgroundLocationUpdates = [args[@"allowsBackgroundLocationUpdates"] boolValue];
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.allowsBackgroundLocationUpdates = allowsBackgroundLocationUpdates;
            methodResult(@"success");
        },
        
        @"BMKLocationManager::set_locationTimeout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationManager::set_locationTimeout");
            }
        
            // args
            // jsonable arg
            NSInteger locationTimeout = [args[@"locationTimeout"] longValue];
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.locationTimeout = locationTimeout;
            methodResult(@"success");
        },
        
        @"BMKLocationManager::set_reGeocodeTimeout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationManager::set_reGeocodeTimeout");
            }
        
            // args
            // jsonable arg
            NSInteger reGeocodeTimeout = [args[@"reGeocodeTimeout"] longValue];
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.reGeocodeTimeout = reGeocodeTimeout;
            methodResult(@"success");
        },
        
        @"BMKLocationManager::set_locatingWithReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationManager::set_locatingWithReGeocode");
            }
        
            // args
            // jsonable arg
            BOOL locatingWithReGeocode = [args[@"locatingWithReGeocode"] boolValue];
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.locatingWithReGeocode = locatingWithReGeocode;
            methodResult(@"success");
        },
        
        @"BMKLocationManager::set_isNeedNewVersionReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationManager::set_isNeedNewVersionReGeocode");
            }
        
            // args
            // jsonable arg
            BOOL isNeedNewVersionReGeocode = [args[@"isNeedNewVersionReGeocode"] boolValue];
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.isNeedNewVersionReGeocode = isNeedNewVersionReGeocode;
            methodResult(@"success");
        },
        
        @"BMKLocationManager::set_userID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationManager::set_userID");
            }
        
            // args
            // jsonable arg
            NSString* userID = (NSString*) args[@"userID"];
        
            // ref
            BMKLocationManager* ref = (BMKLocationManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.userID = userID;
            methodResult(@"success");
        },
        
        @"BMKLocation::set_rgcData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocation::set_rgcData");
            }
        
            // args
            // ref arg
            BMKLocationReGeocode* rgcData = (BMKLocationReGeocode*) (args[@"rgcData"] == [NSNull null] ? nil : args[@"rgcData"]);
        
            // ref
            BMKLocation* ref = (BMKLocation*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.rgcData = rgcData;
            methodResult(@"success");
        },
        
        @"BMKLocation::set_provider": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocation::set_provider");
            }
        
            // args
            // enum arg
            BMKLocationProvider provider = (BMKLocationProvider) [args[@"provider"] integerValue];
        
            // ref
            BMKLocation* ref = (BMKLocation*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.provider = provider;
            methodResult(@"success");
        },
        
        @"BMKLocation::set_locationID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocation::set_locationID");
            }
        
            // args
            // jsonable arg
            NSString* locationID = (NSString*) args[@"locationID"];
        
            // ref
            BMKLocation* ref = (BMKLocation*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.locationID = locationID;
            methodResult(@"success");
        },
        
        @"BMKGeoFenceRegion::set_fenceStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGeoFenceRegion::set_fenceStatus");
            }
        
            // args
            // enum arg
            BMKGeoFenceRegionStatus fenceStatus = (BMKGeoFenceRegionStatus) [args[@"fenceStatus"] integerValue];
        
            // ref
            BMKGeoFenceRegion* ref = (BMKGeoFenceRegion*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.fenceStatus = fenceStatus;
            methodResult(@"success");
        },
        
        @"BMKGeoFenceRegion::set_lastEventTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGeoFenceRegion::set_lastEventTime");
            }
        
            // args
            // jsonable arg
            NSTimeInterval lastEventTime = [args[@"lastEventTime"] doubleValue];
        
            // ref
            BMKGeoFenceRegion* ref = (BMKGeoFenceRegion*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.lastEventTime = lastEventTime;
            methodResult(@"success");
        },
        
        @"BMKGeoFenceManager::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGeoFenceManager::set_delegate");
            }
        
            // args
        
        
            // ref
            BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.delegate = weakSelf;
            methodResult(@"success");
        },
        
        @"BMKGeoFenceManager::set_activeAction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGeoFenceManager::set_activeAction");
            }
        
            // args
            // enum arg
            BMKGeoFenceActiveAction activeAction = (BMKGeoFenceActiveAction) [args[@"activeAction"] integerValue];
        
            // ref
            BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.activeAction = activeAction;
            methodResult(@"success");
        },
        
        @"BMKGeoFenceManager::set_pausesLocationUpdatesAutomatically": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGeoFenceManager::set_pausesLocationUpdatesAutomatically");
            }
        
            // args
            // jsonable arg
            BOOL pausesLocationUpdatesAutomatically = [args[@"pausesLocationUpdatesAutomatically"] boolValue];
        
            // ref
            BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.pausesLocationUpdatesAutomatically = pausesLocationUpdatesAutomatically;
            methodResult(@"success");
        },
        
        @"BMKGeoFenceManager::set_allowsBackgroundLocationUpdates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGeoFenceManager::set_allowsBackgroundLocationUpdates");
            }
        
            // args
            // jsonable arg
            BOOL allowsBackgroundLocationUpdates = [args[@"allowsBackgroundLocationUpdates"] boolValue];
        
            // ref
            BMKGeoFenceManager* ref = (BMKGeoFenceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.allowsBackgroundLocationUpdates = allowsBackgroundLocationUpdates;
            methodResult(@"success");
        },
        
        @"BMKOverlayPathView::set_fillColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* fillColor = (UIColor*) (args[@"fillColor"] == [NSNull null] ? nil : args[@"fillColor"]);
        
                // ref
                BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.fillColor = fillColor;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayPathView::set_strokeColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* strokeColor = (UIColor*) (args[@"strokeColor"] == [NSNull null] ? nil : args[@"strokeColor"]);
        
                // ref
                BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.strokeColor = strokeColor;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayPathView::set_lineWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
        
                // ref
                BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.lineWidth = lineWidth;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayPathView::set_miterLimit_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat miterLimit = [args[@"miterLimit"] floatValue];
        
                // ref
                BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.miterLimit = miterLimit;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayPathView::set_lineDashPhase_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat lineDashPhase = [args[@"lineDashPhase"] floatValue];
        
                // ref
                BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.lineDashPhase = lineDashPhase;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayPathView::set_lineDashPattern_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* lineDashPattern = (NSArray<NSObject*>*) args[@"lineDashPattern"];
        
                // ref
                BMKOverlayPathView* ref = (BMKOverlayPathView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.lineDashPattern = lineDashPattern;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKGroundOverlay::set_pt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* ptValue = (NSValue*) args[@"pt"];
                CLLocationCoordinate2D pt;
                if (ptValue != nil && (NSNull*) ptValue != [NSNull null]) {
                  [ptValue getValue:&pt];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"pt不能为null"]);
                  return;
                }
        
        
                // ref
                BMKGroundOverlay* ref = (BMKGroundOverlay*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.pt = pt;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKGroundOverlay::set_anchor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* anchorValue = (NSValue*) args[@"anchor"];
                CGPoint anchor;
                if (anchorValue != nil && (NSNull*) anchorValue != [NSNull null]) {
                  [anchorValue getValue:&anchor];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"anchor不能为null"]);
                  return;
                }
        
        
                // ref
                BMKGroundOverlay* ref = (BMKGroundOverlay*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.anchor = anchor;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKGroundOverlay::set_bound_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* boundValue = (NSValue*) args[@"bound"];
                BMKCoordinateBounds bound;
                if (boundValue != nil && (NSNull*) boundValue != [NSNull null]) {
                  [boundValue getValue:&bound];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"bound不能为null"]);
                  return;
                }
        
        
                // ref
                BMKGroundOverlay* ref = (BMKGroundOverlay*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.bound = bound;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKGroundOverlay::set_icon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIImage* icon = (UIImage*) (args[@"icon"] == [NSNull null] ? nil : args[@"icon"]);
        
                // ref
                BMKGroundOverlay* ref = (BMKGroundOverlay*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.icon = icon;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPolyline::set_textureIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSArray<NSNumber*>* textureIndex = (NSArray<NSNumber*>*) args[@"textureIndex"];
        
                // ref
                BMKPolyline* ref = (BMKPolyline*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.textureIndex = textureIndex;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPointAnnotation::set_coordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                if (coordinateValue != nil && (NSNull*) coordinateValue != [NSNull null]) {
                  [coordinateValue getValue:&coordinate];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"coordinate不能为null"]);
                  return;
                }
        
        
                // ref
                BMKPointAnnotation* ref = (BMKPointAnnotation*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.coordinate = coordinate;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPointAnnotation::set_isLockedToScreen_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isLockedToScreen = [args[@"isLockedToScreen"] boolValue];
        
                // ref
                BMKPointAnnotation* ref = (BMKPointAnnotation*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.isLockedToScreen = isLockedToScreen;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPointAnnotation::set_screenPointToLock_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* screenPointToLockValue = (NSValue*) args[@"screenPointToLock"];
                CGPoint screenPointToLock;
                if (screenPointToLockValue != nil && (NSNull*) screenPointToLockValue != [NSNull null]) {
                  [screenPointToLockValue getValue:&screenPointToLock];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"screenPointToLock不能为null"]);
                  return;
                }
        
        
                // ref
                BMKPointAnnotation* ref = (BMKPointAnnotation*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.screenPointToLock = screenPointToLock;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKGradient::set_mColors_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* mColors = (NSArray<NSObject*>*) args[@"mColors"];
        
                // ref
                BMKGradient* ref = (BMKGradient*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.mColors = mColors;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKGradient::set_mStartPoints_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* mStartPoints = (NSArray<NSObject*>*) args[@"mStartPoints"];
        
                // ref
                BMKGradient* ref = (BMKGradient*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.mStartPoints = mStartPoints;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKBaseIndoorMapInfo::set_strID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* strID = (NSString*) args[@"strID"];
        
                // ref
                BMKBaseIndoorMapInfo* ref = (BMKBaseIndoorMapInfo*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.strID = strID;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKBaseIndoorMapInfo::set_strFloor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* strFloor = (NSString*) args[@"strFloor"];
        
                // ref
                BMKBaseIndoorMapInfo* ref = (BMKBaseIndoorMapInfo*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.strFloor = strFloor;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKBaseIndoorMapInfo::set_arrStrFloors_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* arrStrFloors = (NSArray<NSObject*>*) args[@"arrStrFloors"];
        
                // ref
                BMKBaseIndoorMapInfo* ref = (BMKBaseIndoorMapInfo*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.arrStrFloors = arrStrFloors;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKTileLayer::set_minZoom_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSInteger minZoom = [args[@"minZoom"] longValue];
        
                // ref
                BMKTileLayer* ref = (BMKTileLayer*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.minZoom = minZoom;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKTileLayer::set_maxZoom_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSInteger maxZoom = [args[@"maxZoom"] longValue];
        
                // ref
                BMKTileLayer* ref = (BMKTileLayer*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.maxZoom = maxZoom;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKTileLayer::set_visibleMapRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* visibleMapRectValue = (NSValue*) args[@"visibleMapRect"];
                BMKMapRect visibleMapRect;
                if (visibleMapRectValue != nil && (NSNull*) visibleMapRectValue != [NSNull null]) {
                  [visibleMapRectValue getValue:&visibleMapRect];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"visibleMapRect不能为null"]);
                  return;
                }
        
        
                // ref
                BMKTileLayer* ref = (BMKTileLayer*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.visibleMapRect = visibleMapRect;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPolylineView::set_isFocus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isFocus = [args[@"isFocus"] boolValue];
        
                // ref
                BMKPolylineView* ref = (BMKPolylineView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.isFocus = isFocus;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPinAnnotationView::set_pinColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSUInteger pinColor = [args[@"pinColor"] unsignedIntegerValue];
        
                // ref
                BMKPinAnnotationView* ref = (BMKPinAnnotationView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.pinColor = pinColor;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPinAnnotationView::set_animatesDrop_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL animatesDrop = [args[@"animatesDrop"] boolValue];
        
                // ref
                BMKPinAnnotationView* ref = (BMKPinAnnotationView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.animatesDrop = animatesDrop;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKCircle::set_coordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                if (coordinateValue != nil && (NSNull*) coordinateValue != [NSNull null]) {
                  [coordinateValue getValue:&coordinate];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"coordinate不能为null"]);
                  return;
                }
        
        
                // ref
                BMKCircle* ref = (BMKCircle*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.coordinate = coordinate;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKCircle::set_radius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CLLocationDistance radius = [args[@"radius"] doubleValue];
        
                // ref
                BMKCircle* ref = (BMKCircle*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.radius = radius;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapPoi::set_text_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* text = (NSString*) args[@"text"];
        
                // ref
                BMKMapPoi* ref = (BMKMapPoi*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.text = text;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapPoi::set_pt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* ptValue = (NSValue*) args[@"pt"];
                CLLocationCoordinate2D pt;
                if (ptValue != nil && (NSNull*) ptValue != [NSNull null]) {
                  [ptValue getValue:&pt];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"pt不能为null"]);
                  return;
                }
        
        
                // ref
                BMKMapPoi* ref = (BMKMapPoi*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.pt = pt;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapPoi::set_uid_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* uid = (NSString*) args[@"uid"];
        
                // ref
                BMKMapPoi* ref = (BMKMapPoi*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.uid = uid;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_mapType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                BMKMapType mapType = (BMKMapType) [args[@"mapType"] integerValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.mapType = mapType;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_region_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* regionValue = (NSValue*) args[@"region"];
                BMKCoordinateRegion region;
                if (regionValue != nil && (NSNull*) regionValue != [NSNull null]) {
                  [regionValue getValue:&region];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"region不能为null"]);
                  return;
                }
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.region = region;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_limitMapRegion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* limitMapRegionValue = (NSValue*) args[@"limitMapRegion"];
                BMKCoordinateRegion limitMapRegion;
                if (limitMapRegionValue != nil && (NSNull*) limitMapRegionValue != [NSNull null]) {
                  [limitMapRegionValue getValue:&limitMapRegion];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"limitMapRegion不能为null"]);
                  return;
                }
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.limitMapRegion = limitMapRegion;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_compassPosition_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* compassPositionValue = (NSValue*) args[@"compassPosition"];
                CGPoint compassPosition;
                if (compassPositionValue != nil && (NSNull*) compassPositionValue != [NSNull null]) {
                  [compassPositionValue getValue:&compassPosition];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"compassPosition不能为null"]);
                  return;
                }
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.compassPosition = compassPosition;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_centerCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* centerCoordinateValue = (NSValue*) args[@"centerCoordinate"];
                CLLocationCoordinate2D centerCoordinate;
                if (centerCoordinateValue != nil && (NSNull*) centerCoordinateValue != [NSNull null]) {
                  [centerCoordinateValue getValue:&centerCoordinate];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"centerCoordinate不能为null"]);
                  return;
                }
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.centerCoordinate = centerCoordinate;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_zoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float zoomLevel = [args[@"zoomLevel"] floatValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.zoomLevel = zoomLevel;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_minZoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float minZoomLevel = [args[@"minZoomLevel"] floatValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.minZoomLevel = minZoomLevel;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_maxZoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float maxZoomLevel = [args[@"maxZoomLevel"] floatValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.maxZoomLevel = maxZoomLevel;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_rotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int rotation = [args[@"rotation"] intValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.rotation = rotation;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_overlooking_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int overlooking = [args[@"overlooking"] intValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.overlooking = overlooking;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_minOverlooking_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int minOverlooking = [args[@"minOverlooking"] intValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.minOverlooking = minOverlooking;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_buildingsEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL buildingsEnabled = [args[@"buildingsEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.buildingsEnabled = buildingsEnabled;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_showMapPoi_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showMapPoi = [args[@"showMapPoi"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.showMapPoi = showMapPoi;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_trafficEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL trafficEnabled = [args[@"trafficEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.trafficEnabled = trafficEnabled;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_baiduHeatMapEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL baiduHeatMapEnabled = [args[@"baiduHeatMapEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.baiduHeatMapEnabled = baiduHeatMapEnabled;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_gesturesEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL gesturesEnabled = [args[@"gesturesEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.gesturesEnabled = gesturesEnabled;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_zoomEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL zoomEnabled = [args[@"zoomEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.zoomEnabled = zoomEnabled;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_zoomEnabledWithTap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL zoomEnabledWithTap = [args[@"zoomEnabledWithTap"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.zoomEnabledWithTap = zoomEnabledWithTap;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_scrollEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL scrollEnabled = [args[@"scrollEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.scrollEnabled = scrollEnabled;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_overlookEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL overlookEnabled = [args[@"overlookEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.overlookEnabled = overlookEnabled;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_rotateEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL rotateEnabled = [args[@"rotateEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.rotateEnabled = rotateEnabled;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_forceTouchEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL forceTouchEnabled = [args[@"forceTouchEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.forceTouchEnabled = forceTouchEnabled;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_showMapScaleBar_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showMapScaleBar = [args[@"showMapScaleBar"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.showMapScaleBar = showMapScaleBar;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_mapScaleBarPosition_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapScaleBarPositionValue = (NSValue*) args[@"mapScaleBarPosition"];
                CGPoint mapScaleBarPosition;
                if (mapScaleBarPositionValue != nil && (NSNull*) mapScaleBarPositionValue != [NSNull null]) {
                  [mapScaleBarPositionValue getValue:&mapScaleBarPosition];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"mapScaleBarPosition不能为null"]);
                  return;
                }
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.mapScaleBarPosition = mapScaleBarPosition;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_logoPosition_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                BMKLogoPosition logoPosition = (BMKLogoPosition) [args[@"logoPosition"] integerValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.logoPosition = logoPosition;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_visibleMapRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* visibleMapRectValue = (NSValue*) args[@"visibleMapRect"];
                BMKMapRect visibleMapRect;
                if (visibleMapRectValue != nil && (NSNull*) visibleMapRectValue != [NSNull null]) {
                  [visibleMapRectValue getValue:&visibleMapRect];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"visibleMapRect不能为null"]);
                  return;
                }
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.visibleMapRect = visibleMapRect;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_mapPadding_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapPaddingValue = (NSValue*) args[@"mapPadding"];
                UIEdgeInsets mapPadding;
                if (mapPaddingValue != nil && (NSNull*) mapPaddingValue != [NSNull null]) {
                  [mapPaddingValue getValue:&mapPadding];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"mapPadding不能为null"]);
                  return;
                }
        
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.mapPadding = mapPadding;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_updateTargetScreenPtWhenMapPaddingChanged_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL updateTargetScreenPtWhenMapPaddingChanged = [args[@"updateTargetScreenPtWhenMapPaddingChanged"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.updateTargetScreenPtWhenMapPaddingChanged = updateTargetScreenPtWhenMapPaddingChanged;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_ChangeWithTouchPointCenterEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL ChangeWithTouchPointCenterEnabled = [args[@"ChangeWithTouchPointCenterEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.ChangeWithTouchPointCenterEnabled = ChangeWithTouchPointCenterEnabled;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_ChangeCenterWithDoubleTouchPointEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL ChangeCenterWithDoubleTouchPointEnabled = [args[@"ChangeCenterWithDoubleTouchPointEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.ChangeCenterWithDoubleTouchPointEnabled = ChangeCenterWithDoubleTouchPointEnabled;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_baseIndoorMapEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL baseIndoorMapEnabled = [args[@"baseIndoorMapEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.baseIndoorMapEnabled = baseIndoorMapEnabled;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_showIndoorMapPoi_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showIndoorMapPoi = [args[@"showIndoorMapPoi"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.showIndoorMapPoi = showIndoorMapPoi;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_showsUserLocation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsUserLocation = [args[@"showsUserLocation"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.showsUserLocation = showsUserLocation;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_userTrackingMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                BMKUserTrackingMode userTrackingMode = (BMKUserTrackingMode) [args[@"userTrackingMode"] integerValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.userTrackingMode = userTrackingMode;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_isSelectedAnnotationViewFront_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isSelectedAnnotationViewFront = [args[@"isSelectedAnnotationViewFront"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.isSelectedAnnotationViewFront = isSelectedAnnotationViewFront;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewOffsetX_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat locationViewOffsetX = [args[@"locationViewOffsetX"] floatValue];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.locationViewOffsetX = locationViewOffsetX;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewOffsetY_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat locationViewOffsetY = [args[@"locationViewOffsetY"] floatValue];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.locationViewOffsetY = locationViewOffsetY;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_isAccuracyCircleShow_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isAccuracyCircleShow = [args[@"isAccuracyCircleShow"] boolValue];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.isAccuracyCircleShow = isAccuracyCircleShow;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_accuracyCircleFillColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* accuracyCircleFillColor = (UIColor*) (args[@"accuracyCircleFillColor"] == [NSNull null] ? nil : args[@"accuracyCircleFillColor"]);
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.accuracyCircleFillColor = accuracyCircleFillColor;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_accuracyCircleStrokeColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* accuracyCircleStrokeColor = (UIColor*) (args[@"accuracyCircleStrokeColor"] == [NSNull null] ? nil : args[@"accuracyCircleStrokeColor"]);
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.accuracyCircleStrokeColor = accuracyCircleStrokeColor;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_isRotateAngleValid_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isRotateAngleValid = [args[@"isRotateAngleValid"] boolValue];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.isRotateAngleValid = isRotateAngleValid;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewImgName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* locationViewImgName = (NSString*) args[@"locationViewImgName"];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.locationViewImgName = locationViewImgName;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewImage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIImage* locationViewImage = (UIImage*) (args[@"locationViewImage"] == [NSNull null] ? nil : args[@"locationViewImage"]);
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.locationViewImage = locationViewImage;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_canShowCallOut_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL canShowCallOut = [args[@"canShowCallOut"] boolValue];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.canShowCallOut = canShowCallOut;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewHierarchy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                LocationViewHierarchy locationViewHierarchy = (LocationViewHierarchy) [args[@"locationViewHierarchy"] integerValue];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.locationViewHierarchy = locationViewHierarchy;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_fLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float fLevel = [args[@"fLevel"] floatValue];
        
                // ref
                BMKMapStatus* ref = (BMKMapStatus*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.fLevel = fLevel;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_fRotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float fRotation = [args[@"fRotation"] floatValue];
        
                // ref
                BMKMapStatus* ref = (BMKMapStatus*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.fRotation = fRotation;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_fOverlooking_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float fOverlooking = [args[@"fOverlooking"] floatValue];
        
                // ref
                BMKMapStatus* ref = (BMKMapStatus*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.fOverlooking = fOverlooking;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_targetScreenPt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* targetScreenPtValue = (NSValue*) args[@"targetScreenPt"];
                CGPoint targetScreenPt;
                if (targetScreenPtValue != nil && (NSNull*) targetScreenPtValue != [NSNull null]) {
                  [targetScreenPtValue getValue:&targetScreenPt];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"targetScreenPt不能为null"]);
                  return;
                }
        
        
                // ref
                BMKMapStatus* ref = (BMKMapStatus*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.targetScreenPt = targetScreenPt;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_targetGeoPt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* targetGeoPtValue = (NSValue*) args[@"targetGeoPt"];
                CLLocationCoordinate2D targetGeoPt;
                if (targetGeoPtValue != nil && (NSNull*) targetGeoPtValue != [NSNull null]) {
                  [targetGeoPtValue getValue:&targetGeoPt];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"targetGeoPt不能为null"]);
                  return;
                }
        
        
                // ref
                BMKMapStatus* ref = (BMKMapStatus*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.targetGeoPt = targetGeoPt;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKHeatMapNode::set_intensity_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                double intensity = [args[@"intensity"] doubleValue];
        
                // ref
                BMKHeatMapNode* ref = (BMKHeatMapNode*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.intensity = intensity;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKHeatMapNode::set_pt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* ptValue = (NSValue*) args[@"pt"];
                CLLocationCoordinate2D pt;
                if (ptValue != nil && (NSNull*) ptValue != [NSNull null]) {
                  [ptValue getValue:&pt];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"pt不能为null"]);
                  return;
                }
        
        
                // ref
                BMKHeatMapNode* ref = (BMKHeatMapNode*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.pt = pt;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mRadius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int mRadius = [args[@"mRadius"] intValue];
        
                // ref
                BMKHeatMap* ref = (BMKHeatMap*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.mRadius = mRadius;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mGradient_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKGradient* mGradient = (BMKGradient*) (args[@"mGradient"] == [NSNull null] ? nil : args[@"mGradient"]);
        
                // ref
                BMKHeatMap* ref = (BMKHeatMap*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.mGradient = mGradient;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mOpacity_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                double mOpacity = [args[@"mOpacity"] doubleValue];
        
                // ref
                BMKHeatMap* ref = (BMKHeatMap*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.mOpacity = mOpacity;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* mData = (NSArray<NSObject*>*) args[@"mData"];
        
                // ref
                BMKHeatMap* ref = (BMKHeatMap*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.mData = mData;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
     
        
        @"BMKAnnotationView::set_paopaoView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKActionPaopaoView* paopaoView = (BMKActionPaopaoView*) (args[@"paopaoView"] == [NSNull null] ? nil : args[@"paopaoView"]);
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.paopaoView = paopaoView;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_annotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<BMKAnnotation> annotation = (id<BMKAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.annotation = annotation;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
    };
}

@end
