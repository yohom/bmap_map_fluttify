//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler4.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation BmapMapFluttifyPlugin (SubHandler4)
- (NSDictionary<NSString*, Handler>*) getSubHandler4 {
    return @{
        @"BMKLocationViewDisplayParam::set_accuracyCircleStrokeColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* accuracyCircleStrokeColor = (UIColor*) HEAP[@([args[@"accuracyCircleStrokeColor"] integerValue])];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.accuracyCircleStrokeColor = accuracyCircleStrokeColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_isRotateAngleValid_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isRotateAngleValid = [args[@"isRotateAngleValid"] boolValue];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.isRotateAngleValid = isRotateAngleValid;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewImgName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* locationViewImgName = (NSString*) args[@"locationViewImgName"];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.locationViewImgName = locationViewImgName;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewImage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIImage* locationViewImage = (UIImage*) HEAP[@([args[@"locationViewImage"] integerValue])];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.locationViewImage = locationViewImage;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_canShowCallOut_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL canShowCallOut = [args[@"canShowCallOut"] boolValue];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.canShowCallOut = canShowCallOut;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewHierarchy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                LocationViewHierarchy locationViewHierarchy = (LocationViewHierarchy) [args[@"locationViewHierarchy"] integerValue];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.locationViewHierarchy = locationViewHierarchy;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_fLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float fLevel = [args[@"fLevel"] floatValue];
        
                // ref
                BMKMapStatus* ref = (BMKMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.fLevel = fLevel;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_fRotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float fRotation = [args[@"fRotation"] floatValue];
        
                // ref
                BMKMapStatus* ref = (BMKMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.fRotation = fRotation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_fOverlooking_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float fOverlooking = [args[@"fOverlooking"] floatValue];
        
                // ref
                BMKMapStatus* ref = (BMKMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.fOverlooking = fOverlooking;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_targetScreenPt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* targetScreenPtValue = (NSValue*) HEAP[@([args[@"targetScreenPt"] integerValue])];
                CGPoint targetScreenPt;
                [targetScreenPtValue getValue:&targetScreenPt];
        
                // ref
                BMKMapStatus* ref = (BMKMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.targetScreenPt = targetScreenPt;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_targetGeoPt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* targetGeoPtValue = (NSValue*) HEAP[@([args[@"targetGeoPt"] integerValue])];
                CLLocationCoordinate2D targetGeoPt;
                [targetGeoPtValue getValue:&targetGeoPt];
        
                // ref
                BMKMapStatus* ref = (BMKMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.targetGeoPt = targetGeoPt;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKHeatMapNode::set_intensity_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                double intensity = [args[@"intensity"] doubleValue];
        
                // ref
                BMKHeatMapNode* ref = (BMKHeatMapNode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.intensity = intensity;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKHeatMapNode::set_pt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* ptValue = (NSValue*) HEAP[@([args[@"pt"] integerValue])];
                CLLocationCoordinate2D pt;
                [ptValue getValue:&pt];
        
                // ref
                BMKHeatMapNode* ref = (BMKHeatMapNode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.pt = pt;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mRadius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int mRadius = [args[@"mRadius"] intValue];
        
                // ref
                BMKHeatMap* ref = (BMKHeatMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.mRadius = mRadius;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mGradient_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKGradient* mGradient = (BMKGradient*) HEAP[@([args[@"mGradient"] integerValue])];
        
                // ref
                BMKHeatMap* ref = (BMKHeatMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.mGradient = mGradient;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mOpacity_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                double mOpacity = [args[@"mOpacity"] doubleValue];
        
                // ref
                BMKHeatMap* ref = (BMKHeatMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.mOpacity = mOpacity;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSNumber*>* mDataRefArray = (NSArray<NSNumber*> *) args[@"mData"];
                NSMutableArray<NSMutableArray*>* mData = [NSMutableArray arrayWithCapacity:mDataRefArray.count];
                for (int __i__ = 0; __i__ < mDataRefArray.count; __i__++) {
                    NSMutableArray* item = (NSMutableArray*) HEAP[[mDataRefArray objectAtIndex:__i__]];
                    [mData addObject:item];
                }
        
                // ref
                BMKHeatMap* ref = (BMKHeatMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.mData = mData;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayView::set_colors_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSNumber*>* colorsRefArray = (NSArray<NSNumber*> *) args[@"colors"];
                NSMutableArray<NSArray<UIColor*>*>* colors = [NSMutableArray arrayWithCapacity:colorsRefArray.count];
                for (int __i__ = 0; __i__ < colorsRefArray.count; __i__++) {
                    NSArray<UIColor*>* item = (NSArray<UIColor*>*) HEAP[[colorsRefArray objectAtIndex:__i__]];
                    [colors addObject:item];
                }
        
                // ref
                BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.colors = colors;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_paopaoView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKActionPaopaoView* paopaoView = (BMKActionPaopaoView*) HEAP[@([args[@"paopaoView"] integerValue])];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.paopaoView = paopaoView;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_annotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<BMKAnnotation> annotation = (id<BMKAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.annotation = annotation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_image_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIImage* image = (UIImage*) HEAP[@([args[@"image"] integerValue])];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.image = image;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_centerOffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* centerOffsetValue = (NSValue*) HEAP[@([args[@"centerOffset"] integerValue])];
                CGPoint centerOffset;
                [centerOffsetValue getValue:&centerOffset];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.centerOffset = centerOffset;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_calloutOffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* calloutOffsetValue = (NSValue*) HEAP[@([args[@"calloutOffset"] integerValue])];
                CGPoint calloutOffset;
                [calloutOffsetValue getValue:&calloutOffset];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.calloutOffset = calloutOffset;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_enabled3D_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL enabled3D = [args[@"enabled3D"] boolValue];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.enabled3D = enabled3D;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_enabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL enabled = [args[@"enabled"] boolValue];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.enabled = enabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_selected_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL selected = [args[@"selected"] boolValue];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.selected = selected;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_canShowCallout_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL canShowCallout = [args[@"canShowCallout"] boolValue];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.canShowCallout = canShowCallout;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_leftCalloutAccessoryView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIView* leftCalloutAccessoryView = (UIView*) HEAP[@([args[@"leftCalloutAccessoryView"] integerValue])];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.leftCalloutAccessoryView = leftCalloutAccessoryView;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_rightCalloutAccessoryView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIView* rightCalloutAccessoryView = (UIView*) HEAP[@([args[@"rightCalloutAccessoryView"] integerValue])];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.rightCalloutAccessoryView = rightCalloutAccessoryView;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_draggable_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL draggable = [args[@"draggable"] boolValue];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.draggable = draggable;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_dragState_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSUInteger dragState = [args[@"dragState"] unsignedIntegerValue];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.dragState = dragState;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenSingleTapOnMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL hidePaopaoWhenSingleTapOnMap = [args[@"hidePaopaoWhenSingleTapOnMap"] boolValue];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.hidePaopaoWhenSingleTapOnMap = hidePaopaoWhenSingleTapOnMap;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenDoubleTapOnMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL hidePaopaoWhenDoubleTapOnMap = [args[@"hidePaopaoWhenDoubleTapOnMap"] boolValue];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.hidePaopaoWhenDoubleTapOnMap = hidePaopaoWhenDoubleTapOnMap;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenTwoFingersTapOnMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL hidePaopaoWhenTwoFingersTapOnMap = [args[@"hidePaopaoWhenTwoFingersTapOnMap"] boolValue];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.hidePaopaoWhenTwoFingersTapOnMap = hidePaopaoWhenTwoFingersTapOnMap;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenSelectOthers_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL hidePaopaoWhenSelectOthers = [args[@"hidePaopaoWhenSelectOthers"] boolValue];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.hidePaopaoWhenSelectOthers = hidePaopaoWhenSelectOthers;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenDrag_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL hidePaopaoWhenDrag = [args[@"hidePaopaoWhenDrag"] boolValue];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.hidePaopaoWhenDrag = hidePaopaoWhenDrag;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenDragOthers_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL hidePaopaoWhenDragOthers = [args[@"hidePaopaoWhenDragOthers"] boolValue];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.hidePaopaoWhenDragOthers = hidePaopaoWhenDragOthers;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_displayPriority_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float displayPriority = [args[@"displayPriority"] floatValue];
        
                // ref
                BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.displayPriority = displayPriority;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_fillColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* fillColor = (UIColor*) HEAP[@([args[@"fillColor"] integerValue])];
        
                // ref
                BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.fillColor = fillColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_strokeColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
        
                // ref
                BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.strokeColor = strokeColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_lineWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
        
                // ref
                BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.lineWidth = lineWidth;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_lineDash_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL lineDash = [args[@"lineDash"] boolValue];
        
                // ref
                BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.lineDash = lineDash;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_tileTexture_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL tileTexture = [args[@"tileTexture"] boolValue];
        
                // ref
                BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.tileTexture = tileTexture;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_keepScale_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL keepScale = [args[@"keepScale"] boolValue];
        
                // ref
                BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.keepScale = keepScale;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_lineJoinType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                BMKLineJoinType lineJoinType = (BMKLineJoinType) [args[@"lineJoinType"] integerValue];
        
                // ref
                BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.lineJoinType = lineJoinType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_lineCapType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                BMKLineCapType lineCapType = (BMKLineCapType) [args[@"lineCapType"] integerValue];
        
                // ref
                BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.lineCapType = lineCapType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_lineDashType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                BMKLineDashType lineDashType = (BMKLineDashType) [args[@"lineDashType"] integerValue];
        
                // ref
                BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.lineDashType = lineDashType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKShape::set_title_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* title = (NSString*) args[@"title"];
        
                // ref
                BMKShape* ref = (BMKShape*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.title = title;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKShape::set_subtitle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* subtitle = (NSString*) args[@"subtitle"];
        
                // ref
                BMKShape* ref = (BMKShape*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.subtitle = subtitle;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOLSearchRecord::set_cityName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* cityName = (NSString*) args[@"cityName"];
        
                // ref
                BMKOLSearchRecord* ref = (BMKOLSearchRecord*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.cityName = cityName;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOLSearchRecord::set_size_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int64_t size = [args[@"size"] longLongValue];
        
                // ref
                BMKOLSearchRecord* ref = (BMKOLSearchRecord*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.size = size;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOLSearchRecord::set_cityID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int cityID = [args[@"cityID"] intValue];
        
                // ref
                BMKOLSearchRecord* ref = (BMKOLSearchRecord*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.cityID = cityID;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOLSearchRecord::set_cityType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int cityType = [args[@"cityType"] intValue];
        
                // ref
                BMKOLSearchRecord* ref = (BMKOLSearchRecord*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.cityType = cityType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOLSearchRecord::set_childCities_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSNumber*>* childCitiesRefArray = (NSArray<NSNumber*> *) args[@"childCities"];
                NSMutableArray<NSArray*>* childCities = [NSMutableArray arrayWithCapacity:childCitiesRefArray.count];
                for (int __i__ = 0; __i__ < childCitiesRefArray.count; __i__++) {
                    NSArray* item = (NSArray*) HEAP[[childCitiesRefArray objectAtIndex:__i__]];
                    [childCities addObject:item];
                }
        
                // ref
                BMKOLSearchRecord* ref = (BMKOLSearchRecord*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.childCities = childCities;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_cityName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* cityName = (NSString*) args[@"cityName"];
        
                // ref
                BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.cityName = cityName;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_cityID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int cityID = [args[@"cityID"] intValue];
        
                // ref
                BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.cityID = cityID;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_size_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int64_t size = [args[@"size"] longLongValue];
        
                // ref
                BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.size = size;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_serversize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int64_t serversize = [args[@"serversize"] longLongValue];
        
                // ref
                BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.serversize = serversize;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_ratio_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int ratio = [args[@"ratio"] intValue];
        
                // ref
                BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.ratio = ratio;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_status_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int status = [args[@"status"] intValue];
        
                // ref
                BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.status = status;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_update_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL update = [args[@"update"] boolValue];
        
                // ref
                BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.update = update;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_pt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* ptValue = (NSValue*) HEAP[@([args[@"pt"] integerValue])];
                CLLocationCoordinate2D pt;
                [ptValue getValue:&pt];
        
                // ref
                BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.pt = pt;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKCustomMapStyleOption::set_customMapStyleID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* customMapStyleID = (NSString*) args[@"customMapStyleID"];
        
                // ref
                BMKCustomMapStyleOption* ref = (BMKCustomMapStyleOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.customMapStyleID = customMapStyleID;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKCustomMapStyleOption::set_customMapStyleFilePath_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* customMapStyleFilePath = (NSString*) args[@"customMapStyleFilePath"];
        
                // ref
                BMKCustomMapStyleOption* ref = (BMKCustomMapStyleOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.customMapStyleFilePath = customMapStyleFilePath;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"RefClass::isKindOfBMKActionPaopaoView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKActionPaopaoView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKTileLayerView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKTileLayerView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOverlayPathView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOverlayPathView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKGroundOverlay class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKPolyline class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKCircleView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKCircleView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKPointAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKPointAnnotation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKGradient class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKArcline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKArcline class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKMultiPoint class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKBaseIndoorMapInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKBaseIndoorMapInfo class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKTileLayer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKURLTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKURLTileLayer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKSyncTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKSyncTileLayer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKAsyncTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKAsyncTileLayer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKPolylineView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKPolylineView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKPinAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKPinAnnotationView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKCircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKCircle class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKMapPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKMapPoi class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKMapView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKMapView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKLocationViewDisplayParam": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKLocationViewDisplayParam class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKMapStatus class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKArclineView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKArclineView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKHeatMapNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKHeatMapNode class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKHeatMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKHeatMap class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKPolygon class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKPolygonView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKPolygonView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOverlayView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOverlayView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKGroundOverlayView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKGroundOverlayView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKAnnotationView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOverlayGLBasicView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOverlayGLBasicView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKShape": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKShape class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOLSearchRecord": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOLSearchRecord class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOLUpdateElement": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOLUpdateElement class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKCustomMapStyleOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKCustomMapStyleOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOfflineMap class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::asBMKActionPaopaoView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKActionPaopaoView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKTileLayerView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKTileLayerView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOverlayPathView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOverlayPathView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKGroundOverlay *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKPolyline *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKCircleView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKCircleView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKPointAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKPointAnnotation *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKGradient *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKArcline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKArcline *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKMultiPoint *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKBaseIndoorMapInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKBaseIndoorMapInfo *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKTileLayer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKURLTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKURLTileLayer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKSyncTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKSyncTileLayer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKAsyncTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKAsyncTileLayer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKPolylineView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKPolylineView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKPinAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKPinAnnotationView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKCircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKCircle *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKMapPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKMapPoi *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKMapView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKMapView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKLocationViewDisplayParam": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKLocationViewDisplayParam *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKMapStatus *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKArclineView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKArclineView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKHeatMapNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKHeatMapNode *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKHeatMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKHeatMap *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKPolygon *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKPolygonView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKPolygonView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOverlayView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOverlayView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKGroundOverlayView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKGroundOverlayView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKAnnotationView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOverlayGLBasicView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOverlayGLBasicView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKShape": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKShape *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOLSearchRecord": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOLSearchRecord *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOLUpdateElement": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOLUpdateElement *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKCustomMapStyleOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKCustomMapStyleOption *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOfflineMap *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"ObjectFactory::createBMKActionPaopaoView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKActionPaopaoView");
            }
        
            BMKActionPaopaoView* ref = [[BMKActionPaopaoView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKTileLayerView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKTileLayerView");
            }
        
            BMKTileLayerView* ref = [[BMKTileLayerView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOverlayPathView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOverlayPathView");
            }
        
            BMKOverlayPathView* ref = [[BMKOverlayPathView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKGroundOverlay");
            }
        
            BMKGroundOverlay* ref = [[BMKGroundOverlay alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKPolyline");
            }
        
            BMKPolyline* ref = [[BMKPolyline alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKCircleView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKCircleView");
            }
        
            BMKCircleView* ref = [[BMKCircleView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKPointAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKPointAnnotation");
            }
        
            BMKPointAnnotation* ref = [[BMKPointAnnotation alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKGradient");
            }
        
            BMKGradient* ref = [[BMKGradient alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKArcline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKArcline");
            }
        
            BMKArcline* ref = [[BMKArcline alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKMultiPoint");
            }
        
            BMKMultiPoint* ref = [[BMKMultiPoint alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKBaseIndoorMapInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKBaseIndoorMapInfo");
            }
        
            BMKBaseIndoorMapInfo* ref = [[BMKBaseIndoorMapInfo alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKTileLayer");
            }
        
            BMKTileLayer* ref = [[BMKTileLayer alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKURLTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKURLTileLayer");
            }
        
            BMKURLTileLayer* ref = [[BMKURLTileLayer alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKSyncTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKSyncTileLayer");
            }
        
            BMKSyncTileLayer* ref = [[BMKSyncTileLayer alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKAsyncTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKAsyncTileLayer");
            }
        
            BMKAsyncTileLayer* ref = [[BMKAsyncTileLayer alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKPolylineView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKPolylineView");
            }
        
            BMKPolylineView* ref = [[BMKPolylineView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKPinAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKPinAnnotationView");
            }
        
            BMKPinAnnotationView* ref = [[BMKPinAnnotationView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKCircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKCircle");
            }
        
            BMKCircle* ref = [[BMKCircle alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKMapPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKMapPoi");
            }
        
            BMKMapPoi* ref = [[BMKMapPoi alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKMapView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKMapView");
            }
        
            BMKMapView* ref = [[BMKMapView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKLocationViewDisplayParam": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKLocationViewDisplayParam");
            }
        
            BMKLocationViewDisplayParam* ref = [[BMKLocationViewDisplayParam alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKMapStatus");
            }
        
            BMKMapStatus* ref = [[BMKMapStatus alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKArclineView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKArclineView");
            }
        
            BMKArclineView* ref = [[BMKArclineView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKHeatMapNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKHeatMapNode");
            }
        
            BMKHeatMapNode* ref = [[BMKHeatMapNode alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKHeatMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKHeatMap");
            }
        
            BMKHeatMap* ref = [[BMKHeatMap alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKPolygon");
            }
        
            BMKPolygon* ref = [[BMKPolygon alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKPolygonView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKPolygonView");
            }
        
            BMKPolygonView* ref = [[BMKPolygonView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOverlayView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOverlayView");
            }
        
            BMKOverlayView* ref = [[BMKOverlayView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKGroundOverlayView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKGroundOverlayView");
            }
        
            BMKGroundOverlayView* ref = [[BMKGroundOverlayView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKAnnotationView");
            }
        
            BMKAnnotationView* ref = [[BMKAnnotationView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOverlayGLBasicView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOverlayGLBasicView");
            }
        
            BMKOverlayGLBasicView* ref = [[BMKOverlayGLBasicView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKShape": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKShape");
            }
        
            BMKShape* ref = [[BMKShape alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOLSearchRecord": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOLSearchRecord");
            }
        
            BMKOLSearchRecord* ref = [[BMKOLSearchRecord alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOLUpdateElement": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOLUpdateElement");
            }
        
            BMKOLUpdateElement* ref = [[BMKOLUpdateElement alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKCustomMapStyleOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKCustomMapStyleOption");
            }
        
            BMKCustomMapStyleOption* ref = [[BMKCustomMapStyleOption alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOfflineMap");
            }
        
            BMKOfflineMap* ref = [[BMKOfflineMap alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKActionPaopaoView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKActionPaopaoView* ref = [[BMKActionPaopaoView alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKTileLayerView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKTileLayerView* ref = [[BMKTileLayerView alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOverlayPathView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKOverlayPathView* ref = [[BMKOverlayPathView alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKGroundOverlay* ref = [[BMKGroundOverlay alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKPolyline* ref = [[BMKPolyline alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKCircleView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKCircleView* ref = [[BMKCircleView alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKPointAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKPointAnnotation* ref = [[BMKPointAnnotation alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKGradient* ref = [[BMKGradient alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKArcline": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKArcline* ref = [[BMKArcline alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKMultiPoint* ref = [[BMKMultiPoint alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKBaseIndoorMapInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKBaseIndoorMapInfo* ref = [[BMKBaseIndoorMapInfo alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKTileLayer* ref = [[BMKTileLayer alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKURLTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKURLTileLayer* ref = [[BMKURLTileLayer alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKSyncTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKSyncTileLayer* ref = [[BMKSyncTileLayer alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKAsyncTileLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKAsyncTileLayer* ref = [[BMKAsyncTileLayer alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKPolylineView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKPolylineView* ref = [[BMKPolylineView alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKPinAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKPinAnnotationView* ref = [[BMKPinAnnotationView alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKCircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKCircle* ref = [[BMKCircle alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKMapPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKMapPoi* ref = [[BMKMapPoi alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKMapView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKMapView* ref = [[BMKMapView alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKLocationViewDisplayParam": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKLocationViewDisplayParam* ref = [[BMKLocationViewDisplayParam alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKMapStatus* ref = [[BMKMapStatus alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKArclineView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKArclineView* ref = [[BMKArclineView alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKHeatMapNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKHeatMapNode* ref = [[BMKHeatMapNode alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKHeatMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKHeatMap* ref = [[BMKHeatMap alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKPolygon* ref = [[BMKPolygon alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKPolygonView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKPolygonView* ref = [[BMKPolygonView alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOverlayView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKOverlayView* ref = [[BMKOverlayView alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
    };
}

@end
