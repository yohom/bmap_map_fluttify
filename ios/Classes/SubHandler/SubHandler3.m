//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler3.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation BmapMapFluttifyPlugin (SubHandler3)
- (NSDictionary<NSString*, Handler>*) getSubHandler3 {
    return @{
        @"BMKOverlayPathView::set_lineDashPhase": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayPathView::set_lineDashPhase");
            }
        
            // args
            // jsonable arg
            CGFloat lineDashPhase = [args[@"lineDashPhase"] floatValue];
        
            // ref
            BMKOverlayPathView* ref = (BMKOverlayPathView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.lineDashPhase = lineDashPhase;
            methodResult(@"success");
        },
        
        @"BMKOverlayPathView::set_lineDashPattern": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayPathView::set_lineDashPattern");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* lineDashPatternRefArray = (NSArray<NSNumber*> *) args[@"lineDashPattern"];
            NSMutableArray<NSArray*>* lineDashPattern = [NSMutableArray arrayWithCapacity:lineDashPatternRefArray.count];
            for (int __i__ = 0; __i__ < lineDashPatternRefArray.count; __i__++) {
                NSArray* item = (NSArray*) HEAP[[lineDashPatternRefArray objectAtIndex:__i__]];
                [lineDashPattern addObject:item];
            }
        
            // ref
            BMKOverlayPathView* ref = (BMKOverlayPathView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.lineDashPattern = lineDashPattern;
            methodResult(@"success");
        },
        
        @"BMKGroundOverlay::set_pt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGroundOverlay::set_pt");
            }
        
            // args
            // struct arg
            NSValue* ptValue = (NSValue*) HEAP[@([args[@"pt"] integerValue])];
            CLLocationCoordinate2D pt;
            [ptValue getValue:&pt];
        
            // ref
            BMKGroundOverlay* ref = (BMKGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.pt = pt;
            methodResult(@"success");
        },
        
        @"BMKGroundOverlay::set_anchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGroundOverlay::set_anchor");
            }
        
            // args
            // struct arg
            NSValue* anchorValue = (NSValue*) HEAP[@([args[@"anchor"] integerValue])];
            CGPoint anchor;
            [anchorValue getValue:&anchor];
        
            // ref
            BMKGroundOverlay* ref = (BMKGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.anchor = anchor;
            methodResult(@"success");
        },
        
        @"BMKGroundOverlay::set_bound": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGroundOverlay::set_bound");
            }
        
            // args
            // struct arg
            NSValue* boundValue = (NSValue*) HEAP[@([args[@"bound"] integerValue])];
            BMKCoordinateBounds bound;
            [boundValue getValue:&bound];
        
            // ref
            BMKGroundOverlay* ref = (BMKGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.bound = bound;
            methodResult(@"success");
        },
        
        @"BMKGroundOverlay::set_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGroundOverlay::set_icon");
            }
        
            // args
            // ref arg
            UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
        
            // ref
            BMKGroundOverlay* ref = (BMKGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.icon = icon;
            methodResult(@"success");
        },
        
        @"BMKPolyline::set_textureIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPolyline::set_textureIndex");
            }
        
            // args
            // jsonable arg
            NSArray<NSNumber*>* textureIndex = (NSArray<NSNumber*>*) args[@"textureIndex"];
        
            // ref
            BMKPolyline* ref = (BMKPolyline*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.textureIndex = textureIndex;
            methodResult(@"success");
        },
        
        @"BMKPointAnnotation::set_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPointAnnotation::set_coordinate");
            }
        
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
            BMKPointAnnotation* ref = (BMKPointAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.coordinate = coordinate;
            methodResult(@"success");
        },
        
        @"BMKPointAnnotation::set_isLockedToScreen": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPointAnnotation::set_isLockedToScreen");
            }
        
            // args
            // jsonable arg
            BOOL isLockedToScreen = [args[@"isLockedToScreen"] boolValue];
        
            // ref
            BMKPointAnnotation* ref = (BMKPointAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.isLockedToScreen = isLockedToScreen;
            methodResult(@"success");
        },
        
        @"BMKPointAnnotation::set_screenPointToLock": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPointAnnotation::set_screenPointToLock");
            }
        
            // args
            // struct arg
            NSValue* screenPointToLockValue = (NSValue*) HEAP[@([args[@"screenPointToLock"] integerValue])];
            CGPoint screenPointToLock;
            [screenPointToLockValue getValue:&screenPointToLock];
        
            // ref
            BMKPointAnnotation* ref = (BMKPointAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.screenPointToLock = screenPointToLock;
            methodResult(@"success");
        },
        
        @"BMKGradient::set_mColors": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGradient::set_mColors");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* mColorsRefArray = (NSArray<NSNumber*> *) args[@"mColors"];
            NSMutableArray<NSArray*>* mColors = [NSMutableArray arrayWithCapacity:mColorsRefArray.count];
            for (int __i__ = 0; __i__ < mColorsRefArray.count; __i__++) {
                NSArray* item = (NSArray*) HEAP[[mColorsRefArray objectAtIndex:__i__]];
                [mColors addObject:item];
            }
        
            // ref
            BMKGradient* ref = (BMKGradient*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.mColors = mColors;
            methodResult(@"success");
        },
        
        @"BMKGradient::set_mStartPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGradient::set_mStartPoints");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* mStartPointsRefArray = (NSArray<NSNumber*> *) args[@"mStartPoints"];
            NSMutableArray<NSArray*>* mStartPoints = [NSMutableArray arrayWithCapacity:mStartPointsRefArray.count];
            for (int __i__ = 0; __i__ < mStartPointsRefArray.count; __i__++) {
                NSArray* item = (NSArray*) HEAP[[mStartPointsRefArray objectAtIndex:__i__]];
                [mStartPoints addObject:item];
            }
        
            // ref
            BMKGradient* ref = (BMKGradient*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.mStartPoints = mStartPoints;
            methodResult(@"success");
        },
        
        @"BMKBaseIndoorMapInfo::set_strID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKBaseIndoorMapInfo::set_strID");
            }
        
            // args
            // jsonable arg
            NSString* strID = (NSString*) args[@"strID"];
        
            // ref
            BMKBaseIndoorMapInfo* ref = (BMKBaseIndoorMapInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.strID = strID;
            methodResult(@"success");
        },
        
        @"BMKBaseIndoorMapInfo::set_strFloor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKBaseIndoorMapInfo::set_strFloor");
            }
        
            // args
            // jsonable arg
            NSString* strFloor = (NSString*) args[@"strFloor"];
        
            // ref
            BMKBaseIndoorMapInfo* ref = (BMKBaseIndoorMapInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.strFloor = strFloor;
            methodResult(@"success");
        },
        
        @"BMKBaseIndoorMapInfo::set_arrStrFloors": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKBaseIndoorMapInfo::set_arrStrFloors");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* arrStrFloorsRefArray = (NSArray<NSNumber*> *) args[@"arrStrFloors"];
            NSMutableArray<NSMutableArray*>* arrStrFloors = [NSMutableArray arrayWithCapacity:arrStrFloorsRefArray.count];
            for (int __i__ = 0; __i__ < arrStrFloorsRefArray.count; __i__++) {
                NSMutableArray* item = (NSMutableArray*) HEAP[[arrStrFloorsRefArray objectAtIndex:__i__]];
                [arrStrFloors addObject:item];
            }
        
            // ref
            BMKBaseIndoorMapInfo* ref = (BMKBaseIndoorMapInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.arrStrFloors = arrStrFloors;
            methodResult(@"success");
        },
        
        @"BMKTileLayer::set_minZoom": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKTileLayer::set_minZoom");
            }
        
            // args
            // jsonable arg
            NSInteger minZoom = [args[@"minZoom"] longValue];
        
            // ref
            BMKTileLayer* ref = (BMKTileLayer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.minZoom = minZoom;
            methodResult(@"success");
        },
        
        @"BMKTileLayer::set_maxZoom": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKTileLayer::set_maxZoom");
            }
        
            // args
            // jsonable arg
            NSInteger maxZoom = [args[@"maxZoom"] longValue];
        
            // ref
            BMKTileLayer* ref = (BMKTileLayer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.maxZoom = maxZoom;
            methodResult(@"success");
        },
        
        @"BMKTileLayer::set_visibleMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKTileLayer::set_visibleMapRect");
            }
        
            // args
            // struct arg
            NSValue* visibleMapRectValue = (NSValue*) HEAP[@([args[@"visibleMapRect"] integerValue])];
            BMKMapRect visibleMapRect;
            [visibleMapRectValue getValue:&visibleMapRect];
        
            // ref
            BMKTileLayer* ref = (BMKTileLayer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.visibleMapRect = visibleMapRect;
            methodResult(@"success");
        },
        
        @"BMKPolylineView::set_isFocus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPolylineView::set_isFocus");
            }
        
            // args
            // jsonable arg
            BOOL isFocus = [args[@"isFocus"] boolValue];
        
            // ref
            BMKPolylineView* ref = (BMKPolylineView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.isFocus = isFocus;
            methodResult(@"success");
        },
        
        @"BMKPinAnnotationView::set_pinColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPinAnnotationView::set_pinColor");
            }
        
            // args
            // jsonable arg
            NSUInteger pinColor = [args[@"pinColor"] unsignedIntegerValue];
        
            // ref
            BMKPinAnnotationView* ref = (BMKPinAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.pinColor = pinColor;
            methodResult(@"success");
        },
        
        @"BMKPinAnnotationView::set_animatesDrop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPinAnnotationView::set_animatesDrop");
            }
        
            // args
            // jsonable arg
            BOOL animatesDrop = [args[@"animatesDrop"] boolValue];
        
            // ref
            BMKPinAnnotationView* ref = (BMKPinAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.animatesDrop = animatesDrop;
            methodResult(@"success");
        },
        
        @"BMKCircle::set_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCircle::set_coordinate");
            }
        
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
            BMKCircle* ref = (BMKCircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.coordinate = coordinate;
            methodResult(@"success");
        },
        
        @"BMKCircle::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCircle::set_radius");
            }
        
            // args
            // jsonable arg
            CLLocationDistance radius = [args[@"radius"] doubleValue];
        
            // ref
            BMKCircle* ref = (BMKCircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.radius = radius;
            methodResult(@"success");
        },
        
        @"BMKMapPoi::set_text": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapPoi::set_text");
            }
        
            // args
            // jsonable arg
            NSString* text = (NSString*) args[@"text"];
        
            // ref
            BMKMapPoi* ref = (BMKMapPoi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.text = text;
            methodResult(@"success");
        },
        
        @"BMKMapPoi::set_pt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapPoi::set_pt");
            }
        
            // args
            // struct arg
            NSValue* ptValue = (NSValue*) HEAP[@([args[@"pt"] integerValue])];
            CLLocationCoordinate2D pt;
            [ptValue getValue:&pt];
        
            // ref
            BMKMapPoi* ref = (BMKMapPoi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.pt = pt;
            methodResult(@"success");
        },
        
        @"BMKMapPoi::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapPoi::set_uid");
            }
        
            // args
            // jsonable arg
            NSString* uid = (NSString*) args[@"uid"];
        
            // ref
            BMKMapPoi* ref = (BMKMapPoi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uid = uid;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_delegate");
            }
        
            // args
        
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.delegate = self;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_mapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_mapType");
            }
        
            // args
            // enum arg
            BMKMapType mapType = (BMKMapType) [args[@"mapType"] integerValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.mapType = mapType;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_region": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_region");
            }
        
            // args
            // struct arg
            NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
            BMKCoordinateRegion region;
            [regionValue getValue:&region];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.region = region;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_limitMapRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_limitMapRegion");
            }
        
            // args
            // struct arg
            NSValue* limitMapRegionValue = (NSValue*) HEAP[@([args[@"limitMapRegion"] integerValue])];
            BMKCoordinateRegion limitMapRegion;
            [limitMapRegionValue getValue:&limitMapRegion];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.limitMapRegion = limitMapRegion;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_compassPosition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_compassPosition");
            }
        
            // args
            // struct arg
            NSValue* compassPositionValue = (NSValue*) HEAP[@([args[@"compassPosition"] integerValue])];
            CGPoint compassPosition;
            [compassPositionValue getValue:&compassPosition];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.compassPosition = compassPosition;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_centerCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_centerCoordinate");
            }
        
            // args
            // struct arg
            NSValue* centerCoordinateValue = (NSValue*) HEAP[@([args[@"centerCoordinate"] integerValue])];
            CLLocationCoordinate2D centerCoordinate;
            [centerCoordinateValue getValue:&centerCoordinate];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.centerCoordinate = centerCoordinate;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_zoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_zoomLevel");
            }
        
            // args
            // jsonable arg
            float zoomLevel = [args[@"zoomLevel"] floatValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.zoomLevel = zoomLevel;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_minZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_minZoomLevel");
            }
        
            // args
            // jsonable arg
            float minZoomLevel = [args[@"minZoomLevel"] floatValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.minZoomLevel = minZoomLevel;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_maxZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_maxZoomLevel");
            }
        
            // args
            // jsonable arg
            float maxZoomLevel = [args[@"maxZoomLevel"] floatValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.maxZoomLevel = maxZoomLevel;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_rotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_rotation");
            }
        
            // args
            // jsonable arg
            int rotation = [args[@"rotation"] intValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.rotation = rotation;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_overlooking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_overlooking");
            }
        
            // args
            // jsonable arg
            int overlooking = [args[@"overlooking"] intValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.overlooking = overlooking;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_minOverlooking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_minOverlooking");
            }
        
            // args
            // jsonable arg
            int minOverlooking = [args[@"minOverlooking"] intValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.minOverlooking = minOverlooking;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_buildingsEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_buildingsEnabled");
            }
        
            // args
            // jsonable arg
            BOOL buildingsEnabled = [args[@"buildingsEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.buildingsEnabled = buildingsEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_showMapPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_showMapPoi");
            }
        
            // args
            // jsonable arg
            BOOL showMapPoi = [args[@"showMapPoi"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.showMapPoi = showMapPoi;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_trafficEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_trafficEnabled");
            }
        
            // args
            // jsonable arg
            BOOL trafficEnabled = [args[@"trafficEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.trafficEnabled = trafficEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_baiduHeatMapEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_baiduHeatMapEnabled");
            }
        
            // args
            // jsonable arg
            BOOL baiduHeatMapEnabled = [args[@"baiduHeatMapEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.baiduHeatMapEnabled = baiduHeatMapEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_gesturesEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_gesturesEnabled");
            }
        
            // args
            // jsonable arg
            BOOL gesturesEnabled = [args[@"gesturesEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.gesturesEnabled = gesturesEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_zoomEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_zoomEnabled");
            }
        
            // args
            // jsonable arg
            BOOL zoomEnabled = [args[@"zoomEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.zoomEnabled = zoomEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_zoomEnabledWithTap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_zoomEnabledWithTap");
            }
        
            // args
            // jsonable arg
            BOOL zoomEnabledWithTap = [args[@"zoomEnabledWithTap"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.zoomEnabledWithTap = zoomEnabledWithTap;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_scrollEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_scrollEnabled");
            }
        
            // args
            // jsonable arg
            BOOL scrollEnabled = [args[@"scrollEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.scrollEnabled = scrollEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_overlookEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_overlookEnabled");
            }
        
            // args
            // jsonable arg
            BOOL overlookEnabled = [args[@"overlookEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.overlookEnabled = overlookEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_rotateEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_rotateEnabled");
            }
        
            // args
            // jsonable arg
            BOOL rotateEnabled = [args[@"rotateEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.rotateEnabled = rotateEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_forceTouchEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_forceTouchEnabled");
            }
        
            // args
            // jsonable arg
            BOOL forceTouchEnabled = [args[@"forceTouchEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.forceTouchEnabled = forceTouchEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_showMapScaleBar": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_showMapScaleBar");
            }
        
            // args
            // jsonable arg
            BOOL showMapScaleBar = [args[@"showMapScaleBar"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.showMapScaleBar = showMapScaleBar;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_mapScaleBarPosition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_mapScaleBarPosition");
            }
        
            // args
            // struct arg
            NSValue* mapScaleBarPositionValue = (NSValue*) HEAP[@([args[@"mapScaleBarPosition"] integerValue])];
            CGPoint mapScaleBarPosition;
            [mapScaleBarPositionValue getValue:&mapScaleBarPosition];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.mapScaleBarPosition = mapScaleBarPosition;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_logoPosition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_logoPosition");
            }
        
            // args
            // enum arg
            BMKLogoPosition logoPosition = (BMKLogoPosition) [args[@"logoPosition"] integerValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.logoPosition = logoPosition;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_visibleMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_visibleMapRect");
            }
        
            // args
            // struct arg
            NSValue* visibleMapRectValue = (NSValue*) HEAP[@([args[@"visibleMapRect"] integerValue])];
            BMKMapRect visibleMapRect;
            [visibleMapRectValue getValue:&visibleMapRect];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.visibleMapRect = visibleMapRect;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_mapPadding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_mapPadding");
            }
        
            // args
            // struct arg
            NSValue* mapPaddingValue = (NSValue*) HEAP[@([args[@"mapPadding"] integerValue])];
            UIEdgeInsets mapPadding;
            [mapPaddingValue getValue:&mapPadding];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.mapPadding = mapPadding;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_updateTargetScreenPtWhenMapPaddingChanged": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_updateTargetScreenPtWhenMapPaddingChanged");
            }
        
            // args
            // jsonable arg
            BOOL updateTargetScreenPtWhenMapPaddingChanged = [args[@"updateTargetScreenPtWhenMapPaddingChanged"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.updateTargetScreenPtWhenMapPaddingChanged = updateTargetScreenPtWhenMapPaddingChanged;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_ChangeWithTouchPointCenterEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_ChangeWithTouchPointCenterEnabled");
            }
        
            // args
            // jsonable arg
            BOOL ChangeWithTouchPointCenterEnabled = [args[@"ChangeWithTouchPointCenterEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.ChangeWithTouchPointCenterEnabled = ChangeWithTouchPointCenterEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_ChangeCenterWithDoubleTouchPointEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_ChangeCenterWithDoubleTouchPointEnabled");
            }
        
            // args
            // jsonable arg
            BOOL ChangeCenterWithDoubleTouchPointEnabled = [args[@"ChangeCenterWithDoubleTouchPointEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.ChangeCenterWithDoubleTouchPointEnabled = ChangeCenterWithDoubleTouchPointEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_baseIndoorMapEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_baseIndoorMapEnabled");
            }
        
            // args
            // jsonable arg
            BOOL baseIndoorMapEnabled = [args[@"baseIndoorMapEnabled"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.baseIndoorMapEnabled = baseIndoorMapEnabled;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_showIndoorMapPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_showIndoorMapPoi");
            }
        
            // args
            // jsonable arg
            BOOL showIndoorMapPoi = [args[@"showIndoorMapPoi"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.showIndoorMapPoi = showIndoorMapPoi;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_showsUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_showsUserLocation");
            }
        
            // args
            // jsonable arg
            BOOL showsUserLocation = [args[@"showsUserLocation"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.showsUserLocation = showsUserLocation;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_userTrackingMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_userTrackingMode");
            }
        
            // args
            // enum arg
            BMKUserTrackingMode userTrackingMode = (BMKUserTrackingMode) [args[@"userTrackingMode"] integerValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.userTrackingMode = userTrackingMode;
            methodResult(@"success");
        },
        
        @"BMKMapView::set_isSelectedAnnotationViewFront": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapView::set_isSelectedAnnotationViewFront");
            }
        
            // args
            // jsonable arg
            BOOL isSelectedAnnotationViewFront = [args[@"isSelectedAnnotationViewFront"] boolValue];
        
            // ref
            BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.isSelectedAnnotationViewFront = isSelectedAnnotationViewFront;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewOffsetX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_locationViewOffsetX");
            }
        
            // args
            // jsonable arg
            CGFloat locationViewOffsetX = [args[@"locationViewOffsetX"] floatValue];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.locationViewOffsetX = locationViewOffsetX;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewOffsetY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_locationViewOffsetY");
            }
        
            // args
            // jsonable arg
            CGFloat locationViewOffsetY = [args[@"locationViewOffsetY"] floatValue];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.locationViewOffsetY = locationViewOffsetY;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_isAccuracyCircleShow": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_isAccuracyCircleShow");
            }
        
            // args
            // jsonable arg
            BOOL isAccuracyCircleShow = [args[@"isAccuracyCircleShow"] boolValue];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.isAccuracyCircleShow = isAccuracyCircleShow;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_accuracyCircleFillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_accuracyCircleFillColor");
            }
        
            // args
            // ref arg
            UIColor* accuracyCircleFillColor = (UIColor*) HEAP[@([args[@"accuracyCircleFillColor"] integerValue])];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.accuracyCircleFillColor = accuracyCircleFillColor;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_accuracyCircleStrokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_accuracyCircleStrokeColor");
            }
        
            // args
            // ref arg
            UIColor* accuracyCircleStrokeColor = (UIColor*) HEAP[@([args[@"accuracyCircleStrokeColor"] integerValue])];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.accuracyCircleStrokeColor = accuracyCircleStrokeColor;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_isRotateAngleValid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_isRotateAngleValid");
            }
        
            // args
            // jsonable arg
            BOOL isRotateAngleValid = [args[@"isRotateAngleValid"] boolValue];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.isRotateAngleValid = isRotateAngleValid;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewImgName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_locationViewImgName");
            }
        
            // args
            // jsonable arg
            NSString* locationViewImgName = (NSString*) args[@"locationViewImgName"];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.locationViewImgName = locationViewImgName;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_locationViewImage");
            }
        
            // args
            // ref arg
            UIImage* locationViewImage = (UIImage*) HEAP[@([args[@"locationViewImage"] integerValue])];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.locationViewImage = locationViewImage;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_canShowCallOut": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_canShowCallOut");
            }
        
            // args
            // jsonable arg
            BOOL canShowCallOut = [args[@"canShowCallOut"] boolValue];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.canShowCallOut = canShowCallOut;
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewHierarchy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKLocationViewDisplayParam::set_locationViewHierarchy");
            }
        
            // args
            // enum arg
            LocationViewHierarchy locationViewHierarchy = (LocationViewHierarchy) [args[@"locationViewHierarchy"] integerValue];
        
            // ref
            BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.locationViewHierarchy = locationViewHierarchy;
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_fLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapStatus::set_fLevel");
            }
        
            // args
            // jsonable arg
            float fLevel = [args[@"fLevel"] floatValue];
        
            // ref
            BMKMapStatus* ref = (BMKMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.fLevel = fLevel;
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_fRotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapStatus::set_fRotation");
            }
        
            // args
            // jsonable arg
            float fRotation = [args[@"fRotation"] floatValue];
        
            // ref
            BMKMapStatus* ref = (BMKMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.fRotation = fRotation;
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_fOverlooking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapStatus::set_fOverlooking");
            }
        
            // args
            // jsonable arg
            float fOverlooking = [args[@"fOverlooking"] floatValue];
        
            // ref
            BMKMapStatus* ref = (BMKMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.fOverlooking = fOverlooking;
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_targetScreenPt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapStatus::set_targetScreenPt");
            }
        
            // args
            // struct arg
            NSValue* targetScreenPtValue = (NSValue*) HEAP[@([args[@"targetScreenPt"] integerValue])];
            CGPoint targetScreenPt;
            [targetScreenPtValue getValue:&targetScreenPt];
        
            // ref
            BMKMapStatus* ref = (BMKMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.targetScreenPt = targetScreenPt;
            methodResult(@"success");
        },
        
        @"BMKMapStatus::set_targetGeoPt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapStatus::set_targetGeoPt");
            }
        
            // args
            // struct arg
            NSValue* targetGeoPtValue = (NSValue*) HEAP[@([args[@"targetGeoPt"] integerValue])];
            CLLocationCoordinate2D targetGeoPt;
            [targetGeoPtValue getValue:&targetGeoPt];
        
            // ref
            BMKMapStatus* ref = (BMKMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.targetGeoPt = targetGeoPt;
            methodResult(@"success");
        },
        
        @"BMKHeatMapNode::set_intensity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKHeatMapNode::set_intensity");
            }
        
            // args
            // jsonable arg
            double intensity = [args[@"intensity"] doubleValue];
        
            // ref
            BMKHeatMapNode* ref = (BMKHeatMapNode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.intensity = intensity;
            methodResult(@"success");
        },
        
        @"BMKHeatMapNode::set_pt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKHeatMapNode::set_pt");
            }
        
            // args
            // struct arg
            NSValue* ptValue = (NSValue*) HEAP[@([args[@"pt"] integerValue])];
            CLLocationCoordinate2D pt;
            [ptValue getValue:&pt];
        
            // ref
            BMKHeatMapNode* ref = (BMKHeatMapNode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.pt = pt;
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mRadius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKHeatMap::set_mRadius");
            }
        
            // args
            // jsonable arg
            int mRadius = [args[@"mRadius"] intValue];
        
            // ref
            BMKHeatMap* ref = (BMKHeatMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.mRadius = mRadius;
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKHeatMap::set_mGradient");
            }
        
            // args
            // ref arg
            BMKGradient* mGradient = (BMKGradient*) HEAP[@([args[@"mGradient"] integerValue])];
        
            // ref
            BMKHeatMap* ref = (BMKHeatMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.mGradient = mGradient;
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mOpacity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKHeatMap::set_mOpacity");
            }
        
            // args
            // jsonable arg
            double mOpacity = [args[@"mOpacity"] doubleValue];
        
            // ref
            BMKHeatMap* ref = (BMKHeatMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.mOpacity = mOpacity;
            methodResult(@"success");
        },
        
        @"BMKHeatMap::set_mData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKHeatMap::set_mData");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* mDataRefArray = (NSArray<NSNumber*> *) args[@"mData"];
            NSMutableArray<NSMutableArray*>* mData = [NSMutableArray arrayWithCapacity:mDataRefArray.count];
            for (int __i__ = 0; __i__ < mDataRefArray.count; __i__++) {
                NSMutableArray* item = (NSMutableArray*) HEAP[[mDataRefArray objectAtIndex:__i__]];
                [mData addObject:item];
            }
        
            // ref
            BMKHeatMap* ref = (BMKHeatMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.mData = mData;
            methodResult(@"success");
        },
        
        @"BMKOverlayView::set_colors": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayView::set_colors");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* colorsRefArray = (NSArray<NSNumber*> *) args[@"colors"];
            NSMutableArray<NSArray<UIColor*>*>* colors = [NSMutableArray arrayWithCapacity:colorsRefArray.count];
            for (int __i__ = 0; __i__ < colorsRefArray.count; __i__++) {
                NSArray<UIColor*>* item = (NSArray<UIColor*>*) HEAP[[colorsRefArray objectAtIndex:__i__]];
                [colors addObject:item];
            }
        
            // ref
            BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.colors = colors;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_paopaoView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_paopaoView");
            }
        
            // args
            // ref arg
            BMKActionPaopaoView* paopaoView = (BMKActionPaopaoView*) HEAP[@([args[@"paopaoView"] integerValue])];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.paopaoView = paopaoView;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_annotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_annotation");
            }
        
            // args
            // ref arg
            id<BMKAnnotation> annotation = (id<BMKAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.annotation = annotation;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_image": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_image");
            }
        
            // args
            // ref arg
            UIImage* image = (UIImage*) HEAP[@([args[@"image"] integerValue])];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.image = image;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_centerOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_centerOffset");
            }
        
            // args
            // struct arg
            NSValue* centerOffsetValue = (NSValue*) HEAP[@([args[@"centerOffset"] integerValue])];
            CGPoint centerOffset;
            [centerOffsetValue getValue:&centerOffset];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.centerOffset = centerOffset;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_calloutOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_calloutOffset");
            }
        
            // args
            // struct arg
            NSValue* calloutOffsetValue = (NSValue*) HEAP[@([args[@"calloutOffset"] integerValue])];
            CGPoint calloutOffset;
            [calloutOffsetValue getValue:&calloutOffset];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.calloutOffset = calloutOffset;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_enabled3D": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_enabled3D");
            }
        
            // args
            // jsonable arg
            BOOL enabled3D = [args[@"enabled3D"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.enabled3D = enabled3D;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_enabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_enabled");
            }
        
            // args
            // jsonable arg
            BOOL enabled = [args[@"enabled"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.enabled = enabled;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_selected": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_selected");
            }
        
            // args
            // jsonable arg
            BOOL selected = [args[@"selected"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.selected = selected;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_canShowCallout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_canShowCallout");
            }
        
            // args
            // jsonable arg
            BOOL canShowCallout = [args[@"canShowCallout"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.canShowCallout = canShowCallout;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_leftCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_leftCalloutAccessoryView");
            }
        
            // args
            // ref arg
            UIView* leftCalloutAccessoryView = (UIView*) HEAP[@([args[@"leftCalloutAccessoryView"] integerValue])];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.leftCalloutAccessoryView = leftCalloutAccessoryView;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_rightCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_rightCalloutAccessoryView");
            }
        
            // args
            // ref arg
            UIView* rightCalloutAccessoryView = (UIView*) HEAP[@([args[@"rightCalloutAccessoryView"] integerValue])];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.rightCalloutAccessoryView = rightCalloutAccessoryView;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_draggable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_draggable");
            }
        
            // args
            // jsonable arg
            BOOL draggable = [args[@"draggable"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.draggable = draggable;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_dragState": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_dragState");
            }
        
            // args
            // jsonable arg
            NSUInteger dragState = [args[@"dragState"] unsignedIntegerValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.dragState = dragState;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenSingleTapOnMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_hidePaopaoWhenSingleTapOnMap");
            }
        
            // args
            // jsonable arg
            BOOL hidePaopaoWhenSingleTapOnMap = [args[@"hidePaopaoWhenSingleTapOnMap"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.hidePaopaoWhenSingleTapOnMap = hidePaopaoWhenSingleTapOnMap;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenDoubleTapOnMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_hidePaopaoWhenDoubleTapOnMap");
            }
        
            // args
            // jsonable arg
            BOOL hidePaopaoWhenDoubleTapOnMap = [args[@"hidePaopaoWhenDoubleTapOnMap"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.hidePaopaoWhenDoubleTapOnMap = hidePaopaoWhenDoubleTapOnMap;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenTwoFingersTapOnMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_hidePaopaoWhenTwoFingersTapOnMap");
            }
        
            // args
            // jsonable arg
            BOOL hidePaopaoWhenTwoFingersTapOnMap = [args[@"hidePaopaoWhenTwoFingersTapOnMap"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.hidePaopaoWhenTwoFingersTapOnMap = hidePaopaoWhenTwoFingersTapOnMap;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenSelectOthers": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_hidePaopaoWhenSelectOthers");
            }
        
            // args
            // jsonable arg
            BOOL hidePaopaoWhenSelectOthers = [args[@"hidePaopaoWhenSelectOthers"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.hidePaopaoWhenSelectOthers = hidePaopaoWhenSelectOthers;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenDrag": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_hidePaopaoWhenDrag");
            }
        
            // args
            // jsonable arg
            BOOL hidePaopaoWhenDrag = [args[@"hidePaopaoWhenDrag"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.hidePaopaoWhenDrag = hidePaopaoWhenDrag;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_hidePaopaoWhenDragOthers": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_hidePaopaoWhenDragOthers");
            }
        
            // args
            // jsonable arg
            BOOL hidePaopaoWhenDragOthers = [args[@"hidePaopaoWhenDragOthers"] boolValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.hidePaopaoWhenDragOthers = hidePaopaoWhenDragOthers;
            methodResult(@"success");
        },
        
        @"BMKAnnotationView::set_displayPriority": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAnnotationView::set_displayPriority");
            }
        
            // args
            // jsonable arg
            float displayPriority = [args[@"displayPriority"] floatValue];
        
            // ref
            BMKAnnotationView* ref = (BMKAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.displayPriority = displayPriority;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_fillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_fillColor");
            }
        
            // args
            // ref arg
            UIColor* fillColor = (UIColor*) HEAP[@([args[@"fillColor"] integerValue])];
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.fillColor = fillColor;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_strokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_strokeColor");
            }
        
            // args
            // ref arg
            UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.strokeColor = strokeColor;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_lineWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_lineWidth");
            }
        
            // args
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.lineWidth = lineWidth;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_lineDash": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_lineDash");
            }
        
            // args
            // jsonable arg
            BOOL lineDash = [args[@"lineDash"] boolValue];
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.lineDash = lineDash;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_tileTexture": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_tileTexture");
            }
        
            // args
            // jsonable arg
            BOOL tileTexture = [args[@"tileTexture"] boolValue];
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tileTexture = tileTexture;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_keepScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_keepScale");
            }
        
            // args
            // jsonable arg
            BOOL keepScale = [args[@"keepScale"] boolValue];
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.keepScale = keepScale;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_lineJoinType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_lineJoinType");
            }
        
            // args
            // enum arg
            BMKLineJoinType lineJoinType = (BMKLineJoinType) [args[@"lineJoinType"] integerValue];
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.lineJoinType = lineJoinType;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_lineCapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_lineCapType");
            }
        
            // args
            // enum arg
            BMKLineCapType lineCapType = (BMKLineCapType) [args[@"lineCapType"] integerValue];
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.lineCapType = lineCapType;
            methodResult(@"success");
        },
        
        @"BMKOverlayGLBasicView::set_lineDashType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOverlayGLBasicView::set_lineDashType");
            }
        
            // args
            // enum arg
            BMKLineDashType lineDashType = (BMKLineDashType) [args[@"lineDashType"] integerValue];
        
            // ref
            BMKOverlayGLBasicView* ref = (BMKOverlayGLBasicView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.lineDashType = lineDashType;
            methodResult(@"success");
        },
        
        @"BMKShape::set_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKShape::set_title");
            }
        
            // args
            // jsonable arg
            NSString* title = (NSString*) args[@"title"];
        
            // ref
            BMKShape* ref = (BMKShape*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.title = title;
            methodResult(@"success");
        },
        
        @"BMKShape::set_subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKShape::set_subtitle");
            }
        
            // args
            // jsonable arg
            NSString* subtitle = (NSString*) args[@"subtitle"];
        
            // ref
            BMKShape* ref = (BMKShape*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.subtitle = subtitle;
            methodResult(@"success");
        },
        
        @"BMKOLSearchRecord::set_cityName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLSearchRecord::set_cityName");
            }
        
            // args
            // jsonable arg
            NSString* cityName = (NSString*) args[@"cityName"];
        
            // ref
            BMKOLSearchRecord* ref = (BMKOLSearchRecord*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cityName = cityName;
            methodResult(@"success");
        },
        
        @"BMKOLSearchRecord::set_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLSearchRecord::set_size");
            }
        
            // args
            // jsonable arg
            int64_t size = [args[@"size"] longLongValue];
        
            // ref
            BMKOLSearchRecord* ref = (BMKOLSearchRecord*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.size = size;
            methodResult(@"success");
        },
        
        @"BMKOLSearchRecord::set_cityID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLSearchRecord::set_cityID");
            }
        
            // args
            // jsonable arg
            int cityID = [args[@"cityID"] intValue];
        
            // ref
            BMKOLSearchRecord* ref = (BMKOLSearchRecord*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cityID = cityID;
            methodResult(@"success");
        },
        
        @"BMKOLSearchRecord::set_cityType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLSearchRecord::set_cityType");
            }
        
            // args
            // jsonable arg
            int cityType = [args[@"cityType"] intValue];
        
            // ref
            BMKOLSearchRecord* ref = (BMKOLSearchRecord*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cityType = cityType;
            methodResult(@"success");
        },
        
        @"BMKOLSearchRecord::set_childCities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLSearchRecord::set_childCities");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* childCitiesRefArray = (NSArray<NSNumber*> *) args[@"childCities"];
            NSMutableArray<NSArray*>* childCities = [NSMutableArray arrayWithCapacity:childCitiesRefArray.count];
            for (int __i__ = 0; __i__ < childCitiesRefArray.count; __i__++) {
                NSArray* item = (NSArray*) HEAP[[childCitiesRefArray objectAtIndex:__i__]];
                [childCities addObject:item];
            }
        
            // ref
            BMKOLSearchRecord* ref = (BMKOLSearchRecord*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.childCities = childCities;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_cityName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_cityName");
            }
        
            // args
            // jsonable arg
            NSString* cityName = (NSString*) args[@"cityName"];
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cityName = cityName;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_cityID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_cityID");
            }
        
            // args
            // jsonable arg
            int cityID = [args[@"cityID"] intValue];
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cityID = cityID;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_size");
            }
        
            // args
            // jsonable arg
            int64_t size = [args[@"size"] longLongValue];
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.size = size;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_serversize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_serversize");
            }
        
            // args
            // jsonable arg
            int64_t serversize = [args[@"serversize"] longLongValue];
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.serversize = serversize;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_ratio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_ratio");
            }
        
            // args
            // jsonable arg
            int ratio = [args[@"ratio"] intValue];
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.ratio = ratio;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_status": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_status");
            }
        
            // args
            // jsonable arg
            int status = [args[@"status"] intValue];
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.status = status;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_update": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_update");
            }
        
            // args
            // jsonable arg
            BOOL update = [args[@"update"] boolValue];
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.update = update;
            methodResult(@"success");
        },
        
        @"BMKOLUpdateElement::set_pt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOLUpdateElement::set_pt");
            }
        
            // args
            // struct arg
            NSValue* ptValue = (NSValue*) HEAP[@([args[@"pt"] integerValue])];
            CLLocationCoordinate2D pt;
            [ptValue getValue:&pt];
        
            // ref
            BMKOLUpdateElement* ref = (BMKOLUpdateElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.pt = pt;
            methodResult(@"success");
        },
        
        @"BMKCustomMapStyleOption::set_customMapStyleID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCustomMapStyleOption::set_customMapStyleID");
            }
        
            // args
            // jsonable arg
            NSString* customMapStyleID = (NSString*) args[@"customMapStyleID"];
        
            // ref
            BMKCustomMapStyleOption* ref = (BMKCustomMapStyleOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.customMapStyleID = customMapStyleID;
            methodResult(@"success");
        },
        
        @"BMKCustomMapStyleOption::set_customMapStyleFilePath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCustomMapStyleOption::set_customMapStyleFilePath");
            }
        
            // args
            // jsonable arg
            NSString* customMapStyleFilePath = (NSString*) args[@"customMapStyleFilePath"];
        
            // ref
            BMKCustomMapStyleOption* ref = (BMKCustomMapStyleOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.customMapStyleFilePath = customMapStyleFilePath;
            methodResult(@"success");
        },
        
        @"BMKOfflineMap::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOfflineMap::set_delegate");
            }
        
            // args
        
        
            // ref
            BMKOfflineMap* ref = (BMKOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.delegate = self;
            methodResult(@"success");
        },
        
        @"BMKOverlayPathView::set_fillColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* fillColor = (UIColor*) HEAP[@([args[@"fillColor"] integerValue])];
        
                // ref
                BMKOverlayPathView* ref = (BMKOverlayPathView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.fillColor = fillColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayPathView::set_strokeColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
        
                // ref
                BMKOverlayPathView* ref = (BMKOverlayPathView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.strokeColor = strokeColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayPathView::set_lineWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
        
                // ref
                BMKOverlayPathView* ref = (BMKOverlayPathView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.lineWidth = lineWidth;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayPathView::set_miterLimit_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat miterLimit = [args[@"miterLimit"] floatValue];
        
                // ref
                BMKOverlayPathView* ref = (BMKOverlayPathView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.miterLimit = miterLimit;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayPathView::set_lineDashPhase_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat lineDashPhase = [args[@"lineDashPhase"] floatValue];
        
                // ref
                BMKOverlayPathView* ref = (BMKOverlayPathView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.lineDashPhase = lineDashPhase;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOverlayPathView::set_lineDashPattern_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSNumber*>* lineDashPatternRefArray = (NSArray<NSNumber*> *) args[@"lineDashPattern"];
                NSMutableArray<NSArray*>* lineDashPattern = [NSMutableArray arrayWithCapacity:lineDashPatternRefArray.count];
                for (int __i__ = 0; __i__ < lineDashPatternRefArray.count; __i__++) {
                    NSArray* item = (NSArray*) HEAP[[lineDashPatternRefArray objectAtIndex:__i__]];
                    [lineDashPattern addObject:item];
                }
        
                // ref
                BMKOverlayPathView* ref = (BMKOverlayPathView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.lineDashPattern = lineDashPattern;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKGroundOverlay::set_pt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* ptValue = (NSValue*) HEAP[@([args[@"pt"] integerValue])];
                CLLocationCoordinate2D pt;
                [ptValue getValue:&pt];
        
                // ref
                BMKGroundOverlay* ref = (BMKGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.pt = pt;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKGroundOverlay::set_anchor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* anchorValue = (NSValue*) HEAP[@([args[@"anchor"] integerValue])];
                CGPoint anchor;
                [anchorValue getValue:&anchor];
        
                // ref
                BMKGroundOverlay* ref = (BMKGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.anchor = anchor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKGroundOverlay::set_bound_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* boundValue = (NSValue*) HEAP[@([args[@"bound"] integerValue])];
                BMKCoordinateBounds bound;
                [boundValue getValue:&bound];
        
                // ref
                BMKGroundOverlay* ref = (BMKGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.bound = bound;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKGroundOverlay::set_icon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
        
                // ref
                BMKGroundOverlay* ref = (BMKGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.icon = icon;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPolyline::set_textureIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSArray<NSNumber*>* textureIndex = (NSArray<NSNumber*>*) args[@"textureIndex"];
        
                // ref
                BMKPolyline* ref = (BMKPolyline*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.textureIndex = textureIndex;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPointAnnotation::set_coordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                BMKPointAnnotation* ref = (BMKPointAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.coordinate = coordinate;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPointAnnotation::set_isLockedToScreen_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isLockedToScreen = [args[@"isLockedToScreen"] boolValue];
        
                // ref
                BMKPointAnnotation* ref = (BMKPointAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.isLockedToScreen = isLockedToScreen;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPointAnnotation::set_screenPointToLock_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* screenPointToLockValue = (NSValue*) HEAP[@([args[@"screenPointToLock"] integerValue])];
                CGPoint screenPointToLock;
                [screenPointToLockValue getValue:&screenPointToLock];
        
                // ref
                BMKPointAnnotation* ref = (BMKPointAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.screenPointToLock = screenPointToLock;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKGradient::set_mColors_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSNumber*>* mColorsRefArray = (NSArray<NSNumber*> *) args[@"mColors"];
                NSMutableArray<NSArray*>* mColors = [NSMutableArray arrayWithCapacity:mColorsRefArray.count];
                for (int __i__ = 0; __i__ < mColorsRefArray.count; __i__++) {
                    NSArray* item = (NSArray*) HEAP[[mColorsRefArray objectAtIndex:__i__]];
                    [mColors addObject:item];
                }
        
                // ref
                BMKGradient* ref = (BMKGradient*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.mColors = mColors;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKGradient::set_mStartPoints_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSNumber*>* mStartPointsRefArray = (NSArray<NSNumber*> *) args[@"mStartPoints"];
                NSMutableArray<NSArray*>* mStartPoints = [NSMutableArray arrayWithCapacity:mStartPointsRefArray.count];
                for (int __i__ = 0; __i__ < mStartPointsRefArray.count; __i__++) {
                    NSArray* item = (NSArray*) HEAP[[mStartPointsRefArray objectAtIndex:__i__]];
                    [mStartPoints addObject:item];
                }
        
                // ref
                BMKGradient* ref = (BMKGradient*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.mStartPoints = mStartPoints;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKBaseIndoorMapInfo::set_strID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* strID = (NSString*) args[@"strID"];
        
                // ref
                BMKBaseIndoorMapInfo* ref = (BMKBaseIndoorMapInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.strID = strID;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKBaseIndoorMapInfo::set_strFloor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* strFloor = (NSString*) args[@"strFloor"];
        
                // ref
                BMKBaseIndoorMapInfo* ref = (BMKBaseIndoorMapInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.strFloor = strFloor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKBaseIndoorMapInfo::set_arrStrFloors_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSNumber*>* arrStrFloorsRefArray = (NSArray<NSNumber*> *) args[@"arrStrFloors"];
                NSMutableArray<NSMutableArray*>* arrStrFloors = [NSMutableArray arrayWithCapacity:arrStrFloorsRefArray.count];
                for (int __i__ = 0; __i__ < arrStrFloorsRefArray.count; __i__++) {
                    NSMutableArray* item = (NSMutableArray*) HEAP[[arrStrFloorsRefArray objectAtIndex:__i__]];
                    [arrStrFloors addObject:item];
                }
        
                // ref
                BMKBaseIndoorMapInfo* ref = (BMKBaseIndoorMapInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.arrStrFloors = arrStrFloors;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKTileLayer::set_minZoom_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSInteger minZoom = [args[@"minZoom"] longValue];
        
                // ref
                BMKTileLayer* ref = (BMKTileLayer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.minZoom = minZoom;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKTileLayer::set_maxZoom_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSInteger maxZoom = [args[@"maxZoom"] longValue];
        
                // ref
                BMKTileLayer* ref = (BMKTileLayer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.maxZoom = maxZoom;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKTileLayer::set_visibleMapRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* visibleMapRectValue = (NSValue*) HEAP[@([args[@"visibleMapRect"] integerValue])];
                BMKMapRect visibleMapRect;
                [visibleMapRectValue getValue:&visibleMapRect];
        
                // ref
                BMKTileLayer* ref = (BMKTileLayer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.visibleMapRect = visibleMapRect;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPolylineView::set_isFocus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isFocus = [args[@"isFocus"] boolValue];
        
                // ref
                BMKPolylineView* ref = (BMKPolylineView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.isFocus = isFocus;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPinAnnotationView::set_pinColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSUInteger pinColor = [args[@"pinColor"] unsignedIntegerValue];
        
                // ref
                BMKPinAnnotationView* ref = (BMKPinAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.pinColor = pinColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPinAnnotationView::set_animatesDrop_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL animatesDrop = [args[@"animatesDrop"] boolValue];
        
                // ref
                BMKPinAnnotationView* ref = (BMKPinAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.animatesDrop = animatesDrop;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKCircle::set_coordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                BMKCircle* ref = (BMKCircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.coordinate = coordinate;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKCircle::set_radius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CLLocationDistance radius = [args[@"radius"] doubleValue];
        
                // ref
                BMKCircle* ref = (BMKCircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.radius = radius;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapPoi::set_text_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* text = (NSString*) args[@"text"];
        
                // ref
                BMKMapPoi* ref = (BMKMapPoi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.text = text;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapPoi::set_pt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* ptValue = (NSValue*) HEAP[@([args[@"pt"] integerValue])];
                CLLocationCoordinate2D pt;
                [ptValue getValue:&pt];
        
                // ref
                BMKMapPoi* ref = (BMKMapPoi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.pt = pt;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapPoi::set_uid_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* uid = (NSString*) args[@"uid"];
        
                // ref
                BMKMapPoi* ref = (BMKMapPoi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.uid = uid;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_mapType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                BMKMapType mapType = (BMKMapType) [args[@"mapType"] integerValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.mapType = mapType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_region_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
                BMKCoordinateRegion region;
                [regionValue getValue:&region];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.region = region;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_limitMapRegion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* limitMapRegionValue = (NSValue*) HEAP[@([args[@"limitMapRegion"] integerValue])];
                BMKCoordinateRegion limitMapRegion;
                [limitMapRegionValue getValue:&limitMapRegion];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.limitMapRegion = limitMapRegion;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_compassPosition_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* compassPositionValue = (NSValue*) HEAP[@([args[@"compassPosition"] integerValue])];
                CGPoint compassPosition;
                [compassPositionValue getValue:&compassPosition];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.compassPosition = compassPosition;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_centerCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* centerCoordinateValue = (NSValue*) HEAP[@([args[@"centerCoordinate"] integerValue])];
                CLLocationCoordinate2D centerCoordinate;
                [centerCoordinateValue getValue:&centerCoordinate];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.centerCoordinate = centerCoordinate;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_zoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float zoomLevel = [args[@"zoomLevel"] floatValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.zoomLevel = zoomLevel;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_minZoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float minZoomLevel = [args[@"minZoomLevel"] floatValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.minZoomLevel = minZoomLevel;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_maxZoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float maxZoomLevel = [args[@"maxZoomLevel"] floatValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.maxZoomLevel = maxZoomLevel;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_rotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int rotation = [args[@"rotation"] intValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.rotation = rotation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_overlooking_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int overlooking = [args[@"overlooking"] intValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.overlooking = overlooking;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_minOverlooking_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int minOverlooking = [args[@"minOverlooking"] intValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.minOverlooking = minOverlooking;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_buildingsEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL buildingsEnabled = [args[@"buildingsEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.buildingsEnabled = buildingsEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_showMapPoi_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showMapPoi = [args[@"showMapPoi"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.showMapPoi = showMapPoi;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_trafficEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL trafficEnabled = [args[@"trafficEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.trafficEnabled = trafficEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_baiduHeatMapEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL baiduHeatMapEnabled = [args[@"baiduHeatMapEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.baiduHeatMapEnabled = baiduHeatMapEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_gesturesEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL gesturesEnabled = [args[@"gesturesEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.gesturesEnabled = gesturesEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_zoomEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL zoomEnabled = [args[@"zoomEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.zoomEnabled = zoomEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_zoomEnabledWithTap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL zoomEnabledWithTap = [args[@"zoomEnabledWithTap"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.zoomEnabledWithTap = zoomEnabledWithTap;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_scrollEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL scrollEnabled = [args[@"scrollEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.scrollEnabled = scrollEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_overlookEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL overlookEnabled = [args[@"overlookEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.overlookEnabled = overlookEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_rotateEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL rotateEnabled = [args[@"rotateEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.rotateEnabled = rotateEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_forceTouchEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL forceTouchEnabled = [args[@"forceTouchEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.forceTouchEnabled = forceTouchEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_showMapScaleBar_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showMapScaleBar = [args[@"showMapScaleBar"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.showMapScaleBar = showMapScaleBar;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_mapScaleBarPosition_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapScaleBarPositionValue = (NSValue*) HEAP[@([args[@"mapScaleBarPosition"] integerValue])];
                CGPoint mapScaleBarPosition;
                [mapScaleBarPositionValue getValue:&mapScaleBarPosition];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.mapScaleBarPosition = mapScaleBarPosition;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_logoPosition_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                BMKLogoPosition logoPosition = (BMKLogoPosition) [args[@"logoPosition"] integerValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.logoPosition = logoPosition;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_visibleMapRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* visibleMapRectValue = (NSValue*) HEAP[@([args[@"visibleMapRect"] integerValue])];
                BMKMapRect visibleMapRect;
                [visibleMapRectValue getValue:&visibleMapRect];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.visibleMapRect = visibleMapRect;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_mapPadding_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapPaddingValue = (NSValue*) HEAP[@([args[@"mapPadding"] integerValue])];
                UIEdgeInsets mapPadding;
                [mapPaddingValue getValue:&mapPadding];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.mapPadding = mapPadding;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_updateTargetScreenPtWhenMapPaddingChanged_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL updateTargetScreenPtWhenMapPaddingChanged = [args[@"updateTargetScreenPtWhenMapPaddingChanged"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.updateTargetScreenPtWhenMapPaddingChanged = updateTargetScreenPtWhenMapPaddingChanged;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_ChangeWithTouchPointCenterEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL ChangeWithTouchPointCenterEnabled = [args[@"ChangeWithTouchPointCenterEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.ChangeWithTouchPointCenterEnabled = ChangeWithTouchPointCenterEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_ChangeCenterWithDoubleTouchPointEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL ChangeCenterWithDoubleTouchPointEnabled = [args[@"ChangeCenterWithDoubleTouchPointEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.ChangeCenterWithDoubleTouchPointEnabled = ChangeCenterWithDoubleTouchPointEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_baseIndoorMapEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL baseIndoorMapEnabled = [args[@"baseIndoorMapEnabled"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.baseIndoorMapEnabled = baseIndoorMapEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_showIndoorMapPoi_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showIndoorMapPoi = [args[@"showIndoorMapPoi"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.showIndoorMapPoi = showIndoorMapPoi;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_showsUserLocation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsUserLocation = [args[@"showsUserLocation"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.showsUserLocation = showsUserLocation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_userTrackingMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                BMKUserTrackingMode userTrackingMode = (BMKUserTrackingMode) [args[@"userTrackingMode"] integerValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.userTrackingMode = userTrackingMode;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapView::set_isSelectedAnnotationViewFront_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isSelectedAnnotationViewFront = [args[@"isSelectedAnnotationViewFront"] boolValue];
        
                // ref
                BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.isSelectedAnnotationViewFront = isSelectedAnnotationViewFront;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewOffsetX_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat locationViewOffsetX = [args[@"locationViewOffsetX"] floatValue];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.locationViewOffsetX = locationViewOffsetX;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_locationViewOffsetY_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat locationViewOffsetY = [args[@"locationViewOffsetY"] floatValue];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.locationViewOffsetY = locationViewOffsetY;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_isAccuracyCircleShow_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isAccuracyCircleShow = [args[@"isAccuracyCircleShow"] boolValue];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.isAccuracyCircleShow = isAccuracyCircleShow;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKLocationViewDisplayParam::set_accuracyCircleFillColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* accuracyCircleFillColor = (UIColor*) HEAP[@([args[@"accuracyCircleFillColor"] integerValue])];
        
                // ref
                BMKLocationViewDisplayParam* ref = (BMKLocationViewDisplayParam*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.accuracyCircleFillColor = accuracyCircleFillColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
    };
}

@end
